<?xml version="1.0"?>
<doc>
    <assembly>
        <name>unvell.ReoGrid</name>
    </assembly>
    <members>
        <member name="T:unvell.ReoGrid.Chart.AxisDataInfo">
            <summary>
            Axis data information for axis-based chart.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.Levels">
            <summary>
            Get or set the plot vertial levels.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.Scaler">
            <summary>
            Get or set axis scaler.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.Minimum">
            <summary>
            Get or set axis minimum value.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.Maximum">
            <summary>
            Get or set axis maximum value.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.AutoMinimum">
            <summary>
            Specifies that whether or not to decide the axis minimum value automatically by scanning data.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.AutoMaximum">
            <summary>
            Specifies that whether or not to decide the axis maximum value automatically by scanning data.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.LargeStride">
            <summary>
            Get or set the axis large stride value.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisDataInfo.SmallStride">
            <summary>
            Get or set the axis small stride value.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.AxisTypes">
            <summary>
            Axis types.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Chart.AxisTypes.Primary">
            <summary>
            Primary axis
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Chart.AxisTypes.Secondary">
            <summary>
            Secondary axis
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.DrawingObject">
            <summary>
            Represents drawing object.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.IDrawingObject">
            <summary>
            Represents interface of drawing objects.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.IFloatingObject">
            <summary>
            Represents an floating object above worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Bounds">
            <summary>
            Get or set the bounds relative to the container of this floating object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.X">
            <summary>
            Get or set the position on X-coordinate.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Y">
            <summary>
            Get or set the position on Y-coordinate.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Location">
            <summary>
            Get or set position on both X and Y coordinates.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Left">
            <summary>
            Get left position of bounds relative to the container of this floating object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Right">
            <summary>
            Get right position of bounds relative to the container of this floating object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Top">
            <summary>
            Get top position of bounds relative to the container of this floating object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Bottom">
            <summary>
            Get bottom position of bounds relative to the container of this floating object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Size">
            <summary>
            Get or set size of this floating object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Width">
            <summary>
            Get and set the width of this floating object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObject.Height">
            <summary>
            Get or set the height of this floating object.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Interaction.IVisualObject">
            <summary>
            Represents user-interface visual object in ReoGrid cross-platform views system
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Interaction.IVisualObject.OnMouseDown(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons)">
            <summary>
            Handle mouse down event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Interaction.IVisualObject.OnMouseMove(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons)">
            <summary>
            Handle mouse move event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Interaction.IVisualObject.OnMouseUp(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons)">
            <summary>
            Handle mouse up event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Interaction.IVisualObject.OnMouseDoubleClick(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons)">
            <summary>
            Handle mouse double click event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Interaction.IVisualObject.OnKeyDown(unvell.ReoGrid.Interaction.KeyCode)">
            <summary>
            Handle key down event
            </summary>
            <param name="keys">ReoGrid virtual keys (equal to System.Windows.Forms.Keys)</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Interaction.IVisualObject.SetFocus">
            <summary>
            Set this object to get user interface focus. Object after get focus could be always able 
            to receive user's mouse and keyboard event until FreeFocus method called.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Interaction.IVisualObject.FreeFocus">
            <summary>
            Release user interface focus from this object. This object will no longer be able to 
            receive user's mouse and keyboard event.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.IDrawingObject.Draw(unvell.ReoGrid.Rendering.DrawingContext)">
            <summary>
            Render this drawing object.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingObject.ClientBounds">
            <summary>
            Get or set the client bounds of drawing object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingObject.ScaleX">
            <summary>
            Get or set horizontal scaling of drawing object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingObject.ScaleY">
            <summary>
            Get or set vertical scaling of drawing object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingObject.RotateAngle">
            <summary>
            Get or set the rotation angle of drawing object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingObject.Container">
            <summary>
            Get or set the container of drawing object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingObject.Style">
            <summary>
            Access the style set of drawing object.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.DrawingObject.#ctor">
            <summary>
            Create drawing object instance.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.DrawingObject.Invalidate">
            <summary>
            Invalidate the drawing object on rendering device.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.DrawingObject.OnPaint(unvell.ReoGrid.Rendering.DrawingContext)">
            <summary>
            Paint this object
            </summary>
            <param name="dc">Instance of container drawing context</param>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingObject.Container">
            <summary>
            Get or set the container of this drawing object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingObject.Bounds">
            <summary>
            Get bounds relative to container
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingObject.ClientBounds">
            <summary>
            Get client bounds
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingObject.OriginPoint">
            <summary>
            Get the origin point of this object
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingObject.ScaleX">
            <summary>
            Get or set the horizontal display scaling.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingObject.ScaleY">
            <summary>
            Get or set the vertial display sacling.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingObject.RotateAngle">
            <summary>
            Get or set object rotation angle
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Drawing.DrawingObject.SelectionChanged">
            <summary>
            Event will be fired when selection status changed.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.ChartPlotView">
            <summary>
            Represents common chart plot view.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.IPlotView">
            <summary>
            Chart Plot View 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.ChartPlotView.#ctor(unvell.ReoGrid.Chart.Chart)">
            <summary>
            Create common chart plot view object.
            </summary>
            <param name="chart">Owner chart instance.</param>
        </member>
        <member name="P:unvell.ReoGrid.Chart.ChartPlotView.Chart">
            <summary>
            Get or set the owner chart to this plot view.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.IChartDataSource">
            <summary>
            Respresents the interface of data source for chart graphic.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Data.IDataSource">
            <summary>
            Represents a common data source.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.IDataSource.GetData(System.Int32,System.Int32)">
            <summary>
            Get data by specified two-dimensional position.
            </summary>
            <param name="row">Number of row to get data.</param>
            <param name="col">Number of column to get data.</param>
            <returns>Data fetched from specified two-dimensional position. Null might be returned from this method.</returns>
        </member>
        <member name="P:unvell.ReoGrid.Data.IDataSource.DataRange">
            <summary>
            Data range to read data.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.IDataSource.RowCount">
            <summary>
            Get the number of available rows from this source.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.IDataSource.ColCount">
            <summary>
            Get the number of available columns from this source.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.IChartDataSource.GetRowTitle(System.Int32)">
            <summary>
            Return the title of specified row.
            </summary>
            <param name="index">Zero-based number of row.</param>
            <returns>Return the title that will be displayed on chart.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Chart.IChartDataSource.GetColTitle(System.Int32)">
            <summary>
            Return the title of specified column.
            </summary>
            <param name="index">Zero-based number of column.</param>
            <returns>Return the title that will be displayed on chart.</returns>
        </member>
        <member name="E:unvell.ReoGrid.Chart.IChartDataSource.DataChanged">
            <summary>
            This event will be raised when any data from the serial data range changed.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Chart.IChartDataSource.DataRangeChanged">
            <summary>
            This event will be raised when serial data range changed.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.WorksheetChartDataSource">
            <summary>
            Data source from given worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.WorksheetChartDataSource.#ctor(unvell.ReoGrid.Worksheet)">
            <summary>
            Create data source instance with specified worksheet instance
            </summary>
            <param name="worksheet">Instance of worksheet to read titles and data of plot serial.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.WorksheetChartDataSource.#ctor(unvell.ReoGrid.Worksheet,System.String)">
            <summary>
            Create data source instance with specified worksheet instance and serial data range.
            </summary>
            <param name="worksheet">Instance of worksheet to read titles and data of plot serial.</param>
            <param name="addressOrName">Serial data specified by string address or range name.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.WorksheetChartDataSource.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create data source instance with specified worksheet instance and serial data range.
            </summary>
            <param name="worksheet">Instance of worksheet to read titles and data of plot serial.</param>
            <param name="range">Range position struction to read serial data.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.WorksheetChartDataSource.OnDataChanged">
            <summary>
            This method will be invoked when any data from the serial data range changed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.WorksheetChartDataSource.OnDataRangeChanged">
            <summary>
            This method will be invoked when the serial data range changed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.WorksheetChartDataSource.GetRowTitle(System.Int32)">
            <summary>
            Return the title of specified row.
            </summary>
            <param name="index">Zero-based number of row.</param>
            <returns>Return the title that will be displayed on chart.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Chart.WorksheetChartDataSource.GetColTitle(System.Int32)">
            <summary>
            Return the title of specified column.
            </summary>
            <param name="index">Zero-based number of column.</param>
            <returns>Return the title that will be displayed on chart.</returns>
        </member>
        <member name="P:unvell.ReoGrid.Chart.WorksheetChartDataSource.Worksheet">
            <summary>
            Get instance of worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.WorksheetChartDataSource.DataRange">
            <summary>
            Determine the range to read data from worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.WorksheetChartDataSource.RowTitleRange">
            <summary>
            Get or set the range to read row serial titles.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.WorksheetChartDataSource.ColTitleRange">
            <summary>
            Get or set the range to read column serial titles.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Chart.WorksheetChartDataSource.DataChanged">
            <summary>
            This event will be raised when data from the serial data range changed.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Chart.WorksheetChartDataSource.DataRangeChanged">
            <summary>
            This event will be raised when the serial data range changed.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.Chart">
            <summary>
            Represents chart drawing component.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.IDrawingContainer">
            <summary>
            Represents container of drawing objects.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.IDrawingContainer.Invalidate">
            <summary>
            Force to redraw and update screen
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingContainer.Children">
            <summary>
            Collection of children objects in this container
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IDrawingContainer.ClipBounds">
            <summary>
            Clip bounds for rendering final object
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.DrawingComponent.ClipBounds">
            <summary>
            Get or set the clip bounds to render final object
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.IChart">
            <summary>
            Interface of chart component
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.IChart.Title">
            <summary>
            Get or set the title of chart
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.IChart.DataSource">
            <summary>
            Get or set the data source of chart
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.IChart.SwapDataRowColumn">
            <summary>
            Determine that whether or not to swap row and column for reading data
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.IChart.DataSerialStyles">
            <summary>
            Determine the style of data serial
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.ILegendSupportedChart">
            <summary>
            Represents legend supported chart interface.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.ILegendSupportedChart.GetLegendSymbolSize">
            <summary>
            Get default symbol size of chart legend.
            </summary>
            <returns>Symbol size of chart legend.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Chart.ILegendSupportedChart.DrawLegendSymbol(unvell.ReoGrid.Rendering.DrawingContext,System.Int32,unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            Draw legend symbol for every data rows
            </summary>
            <param name="dc">Current instance of drawing context</param>
            <param name="index">Number of row in data source</param>
            <param name="bounds">Symbol bounds relative to legend view</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.GetDefaultTitleBounds">
            <summary>
            Get default title bounds.
            </summary>
            <returns>Rectangle of title bounds.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.GetDefaultBodyBounds">
            <summary>
            Get default body bounds.
            </summary>
            <returns>Rectangle of body bounds.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.OnDataChanged">
            <summary>
            This method will be invoked when data from data source is changed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.OnDataSourceChanged">
            <summary>
            This method will be invoked when chart data source is changed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.UpdateDataInfo">
            <summary>
            Update data information.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.AddPlotViewLayer(unvell.ReoGrid.Chart.IPlotView)">
            <summary>
            Add chart plot view object.
            </summary>
            <param name="view">Chart plot view object.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.GetLegendSymbolSize">
            <summary>
            Get default symbol size of chart legend.
            </summary>
            <returns>Symbol size of chart legend.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.DrawLegendSymbol(unvell.ReoGrid.Rendering.DrawingContext,System.Int32,unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            Draw chart legend symbol for data row by specified index.
            </summary>
            <param name="dc">Drawing context.</param>
            <param name="index">Row index of data range.</param>
            <param name="bounds">Bounds to draw symbol.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.ResetDataSerialStyles">
            <summary>
            Reset data serial to row default styles.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.Chart.OnMouseDown(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons)">
            <summary>
            Handles the mouse down event.
            </summary>
            <param name="location">Relative location of mouse button press-down.</param>
            <param name="button">Determines that which mouse button is pressed down.</param>
            <returns>True if event has been handled; Otherwise false.</returns>
        </member>
        <member name="P:unvell.ReoGrid.Chart.Chart.TitleView">
            <summary>
            Get or set the title string object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.Chart.PrimaryLegend">
            <summary>
            Get or set the primary legend object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.Chart.Title">
            <summary>
            Get or set the title of chart.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.Chart.SwapDataRowColumn">
            <summary>
            Specifies that whether or not allow to swap the row and column from specified data range.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.Chart.DataSource">
            <summary>
            Get or set chart data source.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Chart.Chart.ChartDataChanged">
            <summary>
            This event will be invoked when chart data from data source is changed.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Chart.Chart.DataSourceChanged">
            <summary>
            This event will be invoked when chart data source is changed.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.Chart.PlotViewContainer">
            <summary>
            Get the chart plot view component.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.Chart.DataSerialStyles">
            <summary>
            Get data serial styles.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.AxisChart">
            <summary>
            Represents axis-based chart component. 
            This is an abstract class that should be implemented by other axis-based chart classes.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.#ctor">
            <summary>
            Create axis-based chart instance.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.OnDataSourceChanged">
            <summary>
            This method will be invoked when data source of this chart is changed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.OnDataChanged">
            <summary>
            This method will be invoked when data from the data source of this chart is changed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.UpdateDataInfo">
            <summary>
            Update chart data information.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.UpdateAxisInfo(unvell.ReoGrid.Chart.AxisDataInfo,System.Double,System.Double)">
            <summary>
            Update specified axis information.
            </summary>
            <param name="ai">Axis information set.</param>
            <param name="minData">Minimum value scanned from data range.</param>
            <param name="maxData">Maximum value scanned from data range.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.MeasureAxisRuler(unvell.ReoGrid.Chart.AxisDataInfo,System.Double)">
            <summary>
            Measure axis ruler information.
            </summary>
            <param name="info">Specified axis data information set.</param>
            <param name="data">Data to be measured.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.AxisOriginToZero(System.Double,System.Double,System.Double)">
            <summary>
            Determines that whether or not allow to set axis minimum value to a non-zero position automatically.
            </summary>
            <param name="minData">Minimum data scanned from data source.</param>
            <param name="maxData">Maximum data scanned from data source.</param>
            <param name="range">Data range.</param>
            <returns>True to set axis minimum value; Otherwise false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.ResetDrawPoints">
            <summary>
            Reset plot drawing points.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.UpdateDrawPoints">
            <summary>
            Update plot drawing points.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.AxisChart.OnBoundsChanged(unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            This method will be invoked when chart bounds changed.
            </summary>
            <param name="oldRect">Old bounds rectangle.</param>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.PrimaryAxisInfo">
            <summary>
            Get or set the primary axis information set.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.SecondaryAxisInfo">
            <summary>
            Get or set the secondary axis information set.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.PrimaryAxisView">
            <summary>
            Get or set the primary axis view object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.DataLabelView">
            <summary>
            Get or set the data label view object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.GuideLineBackgroundView">
            <summary>
            Get or set the grid line background view object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.ShowHorizontalGuideLines">
            <summary>
            Specifies that whether or not allow to display the horizontal guide lines.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.ShowVerticalGridLines">
            <summary>
            Specifies that whether or not allow to display the vertical guide lines.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.ColumnLegend">
            <summary>
            Get or set the chart legend view object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.AxisChart.ZeroHeight">
            <summary>
            Get the origin value height related to this view object.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.LineChart">
            <summary>
            Represents line chart component.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.LineChart.#ctor">
            <summary>
            Create line chart component instance.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.LineChart.GetLegendSymbolSize">
            <summary>
            Get default symbol size of chart legend.
            </summary>
            <returns>Symbol size of chart legend.</returns>
        </member>
        <member name="P:unvell.ReoGrid.Chart.LineChart.LineChartPlotView">
            <summary>
            Get plot view object of line chart component.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.LineChartPlotView">
            <summary>
            Represents plot view object of line chart component.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Chart.LineChartPlotView.#ctor(unvell.ReoGrid.Chart.AxisChart)">
            <summary>
            Create line chart plot view object.
            </summary>
            <param name="chart">Parent chart component instance.</param>
        </member>
        <member name="M:unvell.ReoGrid.Chart.LineChartPlotView.OnPaint(unvell.ReoGrid.Rendering.DrawingContext)">
            <summary>
            Render plot view region of line chart component.
            </summary>
            <param name="dc">Platform no-associated drawing context.</param>
        </member>
        <member name="T:unvell.ReoGrid.Chart.DataPointStyles">
            <summary>
            Data point styles for line plot view.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Chart.DataPointStyles.None">
            <summary>
            None (Default style)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Chart.DataPointStyles.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Chart.DataPointStyles.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Chart.DataPointStyles.EllipseOutline">
            <summary>
            Ellipse Outline
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Chart.DataPointStyles.EllipseFilled">
            <summary>
            Ellipse Filled
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.IDataSerialStyle">
            <summary>
            Represents the interface of data serial style.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Chart.DataSerialStyleCollection">
            <summary>
            Represents a collection of data serial styles.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.DataSerialStyleCollection.Item(System.Int32)">
            <summary>
            Get or set the seiral style for data specified by zero-based index.
            </summary>
            <param name="index">Zero-based index of data to get style.</param>
            <returns>Data serial style object of data.</returns>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet">
            <summary>
            ReoGrid worksheet object, manage the single spreadsheet data and styles.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create automatic column filter and display on specified headers of worksheet.
            </summary>
            <param name="range">Range to filter data</param>
            <returns>This method returns the instance of built-in automatic column filter instance.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.Data.AutoColumnFilterUI)">
            <summary>
            Create automatic column filter and display on specified headers of worksheet.
            </summary>
            <param name="range">Range to filter data</param>
            <param name="columnFilterUI">Indicates whether allow to create graphics user interface (GUI), 
            by default the dropdown-button on the column and candidates dropdown-panel will be created.
            Set this argument as NoGUI to create filter without GUI.</param>
            <returns>This method returns the instance of built-in automatic column filter instance.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(System.String)">
            <summary>
            Create automatic column filter and display on specified headers of worksheet.
            </summary>
            <param name="startColumn">First column specified by an address to create filter</param>
            <returns>This method returns the instance of built-in automatic column filter instance.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(System.String,System.Int32)">
            <summary>
            Create automatic column filter and display on specified headers of worksheet.
            </summary>
            <param name="startColumn">First column specified by an address to create filter.</param>
            <param name="titleRows">Indicates that how many title rows exist at the top of spreadsheet,
            title rows will not be included in filter apply range.</param>
            <returns>This method returns the instance of built-in automatic column filter instance.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(System.String,System.String)">
            <summary>
            Create automatic column filter and display on specified headers of worksheet.
            </summary>
            <param name="startColumn">First column specified by an address to create filter.</param>
            <param name="endColumn">Last column specified by an address to the filter.</param>
            <returns>This method returns the instance of built-in automatic column filter instance.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(System.String,System.String,System.Int32)">
            <summary>
            Create automatic column filter and display on specified headers of worksheet.
            </summary>
            <param name="startColumn">First column specified by an address to create filter.</param>
            <param name="endColumn">Last column specified by an address to the filter.</param>
            <param name="titleRows">Indicates that how many title rows exist at the top of spreadsheet,
            title rows will not be included in filter apply range.</param>
            <returns>This method returns the instance of built-in automatic column filter instance.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(System.String,System.String,System.Int32,unvell.ReoGrid.Data.AutoColumnFilterUI)">
            <summary>
            Create automatic column filter and display on specified headers of worksheet.
            </summary>
            <param name="startColumn">First column specified by an address to create filter.</param>
            <param name="endColumn">Last column specified by an address to the filter.</param>
            <param name="titleRows">Indicates that how many title rows exist at the top of spreadsheet,
            title rows will not be included in filter apply range.</param>
            <param name="columnFilterUI">Indicates whether allow to create graphics user interface (GUI), 
            by default the dropdown-button on the column and candidates dropdown-panel will be created.
            Set this argument as NoGUI to create filter without GUI.</param>
            <returns>This method returns the instance of built-in automatic column filter instance.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(System.Int32,System.Int32,unvell.ReoGrid.Data.AutoColumnFilterUI)">
            <summary>
            Create column filter
            </summary>
            <param name="startColumn">first column specified by a zero-based number of column to create filter</param>
            <param name="titleRows">indicates that how many title rows exist at the top of spreadsheet,
            title rows will not be included in filter apply range.</param>
            <param name="columnFilterUI">Indicates whether allow to create graphics user interface (GUI), 
            by default the dropdown-button on the column and candidates dropdown-panel will be created.
            Set this argument as NoGUI to create filter without GUI.</param>
            <returns>Built-in auto column filter instance</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateColumnFilter(System.Int32,System.Int32,System.Int32,unvell.ReoGrid.Data.AutoColumnFilterUI)">
            <summary>
            Create column filter
            </summary>
            <param name="startColumn">first column specified by a zero-based number of column to create filter</param>
            <param name="endColumn">last column specified by a zero-based number of column to create filter</param>
            <param name="titleRows">indicates that how many title rows exist at the top of spreadsheet,
            title rows will not be included in filter apply range.</param>
            <param name="columnFilterUI">Indicates whether allow to create graphics user interface (GUI), 
            by default the dropdown-button on the column and candidates dropdown-panel will be created.
            Set this argument as NoGUI to create filter without GUI.</param>
            <returns>Built-in auto column filter instance</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SortColumn(System.String,System.Boolean,System.Func{System.Int32,System.Int32,System.Object,System.Object,System.Int32})">
            <summary>
            Sort data on specified column
            </summary>
            <param name="columnAddress">base column specified by an address to sort data</param>
            <param name="ascending">true to perform ascending sort, false to perform descending</param>
            <param name="cellDataComparer">custom cell data comparer, compares two cells and returns an integer,
            set null to use built-in comparer.</param>
            <returns>data changed range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SortColumn(System.Int32,System.Boolean,System.Func{System.Int32,System.Int32,System.Object,System.Object,System.Int32})">
            <summary>
            Sort data on specified column
            </summary>
            <param name="columnIndex">zero-based number of column to sort data</param>
            <param name="ascending">true to perform ascending sort, false to perform descending</param>
            <param name="cellDataComparer">custom cell data comparer, compares two cells and returns an integer,
            set null to use built-in comparer.</param>
            <returns>data changed range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SortColumn(System.Int32,System.Int32,System.Boolean,System.Func{System.Int32,System.Int32,System.Object,System.Object,System.Int32})">
            <summary>
            Sort data on specified column
            </summary>
            <param name="columnIndex">zero-based number of column to sort data</param>
            <param name="titleRows">indicates that how many title rows exist at the top of this spreadsheet, 
            title rows will not be included in sort apply range</param>
            <param name="ascending">true to perform ascending sort, false to perform descending</param>
            <param name="cellDataComparer">custom cell data comparer, compares two cells and returns an integer, 
            set null to use built-in comparer.</param>
            <returns>data changed range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SortColumn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Func{System.Int32,System.Int32,System.Object,System.Object,System.Int32})">
            <summary>
            Sort data on specified column
            </summary>
            <param name="columnIndex">zero-based number of column to sort data</param>
            <param name="startRow">first number of row to allow sort data</param>
            <param name="endRow">last number of number of row to allow sort data</param>
            <param name="startColumn">first number of column to allow sort data</param>
            <param name="endColumn">last number of column to allow sort data</param>
            <param name="ascending">true to perform ascending sort, false to perform descending</param>
            <param name="cellDataComparer">custom cell data comparer, compares two cells and returns an integer, 
            set null to use built-in comparer.</param>
            <returns>data changed range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SortColumn(System.Int32,unvell.ReoGrid.ReoGridRange,System.Boolean,System.Func{System.Int32,System.Int32,System.Object,System.Object,System.Int32})">
            <summary>
            Sort data on specified column
            </summary>
            <param name="columnIndex">zero-based number of column to sort data</param>
            <param name="applyRange">data only be changed in this range during sort</param>
            <param name="ascending">true to perform ascending sort, false to perform descending</param>
            <param name="cellDataComparer">custom cell data comparer, compares two cells and returns an integer, 
            set null to use built-in comparer.</param>
            <returns>data changed range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SuspendUIUpdates">
            <summary>
            Suspend worksheet UI updates
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ResumeUIUpdates">
            <summary>
            Resume worksheet UI updates
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.InvalidateSheet">
            <summary>
            Force to repaint the canvas region of control
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartEdit">
            <summary>
            Start to edit selected cell
            </summary>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartEdit(System.String)">
            <summary>
            Start to edit selected cell
            </summary>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartEdit(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Start to edit specified cell
            </summary>
            <param name="pos">Position of specified cell</param>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartEdit(unvell.ReoGrid.ReoGridPos,System.String)">
            <summary>
            Start to edit specified cell
            </summary>
            <param name="pos">Position of specified cell</param>
            <param name="newText">A text will be displayed in the edit field initially.</param>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartEdit(System.Int32,System.Int32)">
            <summary>
            Start to edit specified cell
            </summary>
            <param name="row">Index of row of specified cell</param>
            <param name="col">Index of column of specified cell</param>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartEdit(System.Int32,System.Int32,System.String)">
            <summary>
            Start to edit specified cell
            </summary>
            <param name="row">Index of row of specified cell</param>
            <param name="col">Index of column of specified cell</param>
            <param name="newText">A text will be displayed in the edit field initially.</param>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetEditingCell">
            <summary>
            Get position of cell that currently is in edit mode
            </summary>
            <returns>position of cell which is editing</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.EndEdit(unvell.ReoGrid.EndEditReason)">
            <summary>
            Force end current editing operation with the specified reason.
            </summary>
            <param name="reason">Ending Reason of editing operation</param>
            <returns>True if currently in editing mode, and operation has been
            finished successfully.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.EndEdit(System.Object)">
            <summary>
            Force end current editing operation.
            Uses specified data instead of the data of user edited.
            </summary>
            <param name="data">New data to be set to the edited cell</param>
            <returns>True if currently in editing mode, and operation has been
            finished successfully.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.EndEdit(System.Object,unvell.ReoGrid.EndEditReason)">
            <summary>
            Force end current editing operation with the specified reason.
            Uses specified data instead of the data of user edited.
            </summary>
            <param name="data">New data to be set to the edited cell</param>
            <param name="reason">Ending Reason of editing operation</param>
            <returns>True if currently in editing mode, and operation has been
            finished successfully.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Reset">
            <summary>
            Reset control to default status.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Reset(System.Int32,System.Int32)">
            <summary>
            Reset control and initialize to specified size
            </summary>
            <param name="rows">number of rows to be set after resting</param>
            <param name="cols">number of columns to be set after reseting</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRangePhysicsBounds(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Get physics rectangle bounds from specified range position.
            Be careful that this is different from the rectangle bounds displayed on screen,
            the actual bound positions displayed on screen are transformed and scaled 
            in order to scroll, zoom and freeze into different viewports.
            </summary>
            <param name="range">The range position to get bounds</param>
            <returns>Rectangle bounds from specified range position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellPhysicsPosition(System.Int32,System.Int32)">
            <summary>
            Get physics position from specified cell position.
            Be careful that this is different from the rectangle bounds displayed on screen,
            the actual bound positions displayed on the screen are transformed and scaled 
            in order to scroll, zoom and freeze into different viewports.
            </summary>
            <param name="row">Zero-based index of row</param>
            <param name="col">Zero-based index of column</param>
            <returns>Point position of specified cell position in pixel.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.FixRangeSelection(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Select specified range.
            </summary>
            <param name="range">Specified range to be selected</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SelectRange(System.String)">
            <summary>
            Select speicifed range on spreadsheet
            </summary>
            <param name="address">address or name of specified range to be selected</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SelectRange(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Select speicifed range on spreadsheet
            </summary>
            <param name="pos1">Start position of specified range</param>
            <param name="pos2">End position of specified range</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SelectRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Select specified range
            </summary>
            <param name="row">number of row</param>
            <param name="col">number of col</param>
            <param name="rows">number of rows to be selected</param>
            <param name="cols">number of columns to be selected</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SelectRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Select speicifed range on spreadsheet
            </summary>
            <param name="range">range to be selected</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SelectAll">
            <summary>
            Select entire sheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SelectColumns(System.Int32,System.Int32)">
            <summary>
            Select entire rows of columns form specified column
            </summary>
            <param name="col">number of column start to be selected</param>
            <param name="columns">numbers of column to be selected</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SelectRows(System.Int32,System.Int32)">
            <summary>
            Select entire column of rows from specified row
            </summary>
            <param name="row">number of row start to be selected</param>
            <param name="rows">numbers of row to be selected</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionForward">
            <summary>
            Move forward selection
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionBackward">
            <summary>
            Move backward selection
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionUp(System.Boolean)">
            <summary>
            Upward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionDown(System.Boolean)">
            <summary>
            Downward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionLeft(System.Boolean)">
            <summary>
            Leftward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionRight(System.Boolean)">
            <summary>
            Rightward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionHome(unvell.ReoGrid.RowOrColumn,System.Boolean)">
            <summary>
            Move selection to first cell of row or column which is specified by <code>rowOrColumn</code>
            </summary>
            <param name="rowOrColumn">specifies that move selection to first cell of row or column</param>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveSelectionEnd(unvell.ReoGrid.RowOrColumn,System.Boolean)">
            <summary>
            Move selection to last cell of row or column which is specified by <code>rowOrColumn</code>
            </summary>
            <param name="rowOrColumn">specifies that move selection to the cell of row or column</param>
            <param name="appendSelect">Determines that whether or not to expand the current selection.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Clone(System.String)">
            <summary>
            Clone this worksheet, create a new instance.
            </summary>
            <returns>New instance cloned from current worksheet.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeBorders(System.String,unvell.ReoGrid.BorderPositions,unvell.ReoGrid.RangeBorderStyle)">
            <summary>
            Set borders to specified range
            </summary>
            <param name="addressOrName">range specified by address</param>
            <param name="pos">positions relative to the specified range to set borders</param>
            <param name="style">border style information</param>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeBorders(System.Int32,System.Int32,System.Int32,System.Int32,unvell.ReoGrid.BorderPositions,unvell.ReoGrid.RangeBorderStyle)">
            <summary>
            Set borders to specified range
            </summary>
            <param name="row">number of start row</param>
            <param name="col">number of start column</param>
            <param name="rows">number of rows</param>
            <param name="cols">number of columns</param>
            <param name="pos">position around specified range to be set border</param>
            <param name="style">style of border to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeBorders(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions,unvell.ReoGrid.RangeBorderStyle)">
            <summary>
            Set border styles to specified range. Or set an empty border style to remove styles from specified range.
            </summary>
            <param name="range">Specified range to be set</param>
            <param name="pos">Style of which position in range should be setted</param>
            <see cref="T:unvell.ReoGrid.BorderPositions"/>
            <param name="style">The style of border to be set</param>
            <see cref="T:unvell.ReoGrid.RangeBorderStyle"/>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveRangeBorder(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions)">
            <summary>
            Remove border style from specified range.
            </summary>
            <param name="range">Range to be removed</param>
            <param name="pos">Style of which position in range should be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRangeBorder(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions,System.Boolean)">
            <summary>
            Get borders information from specified range identified by address or name
            </summary>
            <param name="range">An valid address or name to locate the range on worksheet</param>
            <param name="pos">The positions to be get from worksheet. To get only all outside around the range,
            use BorderPositions.Outside; to get all borders, use BorderPositions.All.</param>
            <param name="onlyCellsOwn">True to get the borders only owned by its cell, </param>
            <returns>Border information object</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRangeBorders(System.String,unvell.ReoGrid.BorderPositions,System.Boolean)">
            <summary>
            Get borders information from specified range identified by address or name
            </summary>
            <param name="addressOrName">An valid address or name to locate the range on worksheet</param>
            <param name="pos">The positions to be get from worksheet. To get only all outside around the range,
            use BorderPositions.Outside; to get all borders, use BorderPositions.All.</param>
            <param name="onlyCellsOwn">True to get the borders only owned by its cell, </param>
            <returns>Border information object</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRangeBorders(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions,System.Boolean)">
            <summary>
            Get borders info from specified range.
            </summary>
            <param name="range">Range to get info of border</param>
            <param name="pos">target position of range to get border style</param>
            <param name="onlyCellsOwn">Indicates whether only the borders belong to its cell to get</param>
            <returns>Borders info retrieved from specified range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellData(System.String,System.Object)">
            <summary>
            Set data of cell in the specified position
            </summary>
            <param name="addressOrName">address or name to locate the cell</param>
            <param name="data">data to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellData(unvell.ReoGrid.ReoGridPos,System.Object)">
            <summary>
            Set data of cell in the specified position
            </summary>
            <param name="pos">Position of cell</param>
            <param name="data">Data of cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellData(System.Int32,System.Int32,System.Object)">
            <summary>
            Set data of cell in the specified position
            </summary>
            <param name="row">Index of row of specified cell</param>
            <param name="col">Index of column of specified cell</param>
            <param name="data">Data of cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetSingleCellData(unvell.ReoGrid.ReoGridCell,System.Object)">
            <summary>
            Set data into specified cell.
            User-code should do not use this method, use SetCellData(pos) or SetCellData(row, col) instead.
            </summary>
            <param name="cell"></param>
            <param name="data"></param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UpdateCellData(unvell.ReoGrid.ReoGridCell,System.Object,System.Collections.Generic.Stack{System.Collections.Generic.List{unvell.ReoGrid.ReoGridCell}})">
            <summary>
            Update data for cell without doing any format and formula evalution.
            </summary>
            <param name="cell">cell to be updated</param>
            <param name="data">data to be updated</param>
            <param name="dirtyCellStack">A stack to save cells that is marked as dirty cell, the dirty cell will be updated delay</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellBody(System.Int32,System.Int32,unvell.ReoGrid.CellTypes.ICellBody)">
            <summary>
            Set body of cell at specified position of grid
            </summary>
            <param name="row">number of row</param>
            <param name="col">number of column</param>
            <param name="body">body to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellBody(unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.CellTypes.ICellBody)">
            <summary>
            Set body of cell into specified row
            </summary>
            <param name="cell">cell to be set</param>
            <param name="body">body to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellBody(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Remove cell body from specified cell
            </summary>
            <param name="pos">position of specified cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellBody(System.Int32,System.Int32)">
            <summary>
            Remove cell body from specified cell
            </summary>
            <param name="row">number of row</param>
            <param name="col">number of column</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellData(System.String)">
            <summary>
            Get cell data from specified address or name
            </summary>
            <param name="addressOrName">address or name to locate a cell</param>
            <returns>data from cell</returns>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is invalid</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellData(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get data from specified cell
            </summary>
            <param name="pos">Position of cell to get data</param>
            <returns>Data of cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellData(System.Int32,System.Int32)">
            <summary>
            Get data from specified cell
            </summary>
            <param name="row">zero-based number of row</param>
            <param name="col">zero-based number of column</param>
            <returns>data of cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellData``1(System.String)">
            <summary>
            Get data from specified cell
            </summary>
            <param name="addressOrName">address or name to locate the cell</param>
            <returns>data of cell</returns>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is invalid</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellData``1(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get data from specified cell
            </summary>
            <param name="pos">position to locate the cell</param>
            <returns>data of cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellData``1(System.Int32,System.Int32)">
            <summary>
            Get data in specified type from a cell
            </summary>
            <typeparam name="T">type of data will be converted into</typeparam>
            <param name="row">number of row to locate a cell</param>
            <param name="col">number of column to locate a cell</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellText(System.String)">
            <summary>
            Get cell display text by specified address
            </summary>
            <param name="address">address to locate a cell</param>
            <returns>display text in string returned from specified cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellText(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get formatted cell text from spcified position
            </summary>
            <param name="pos">position to be get</param>
            <returns>formatted cell's text</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellText(System.Int32,System.Int32)">
            <summary>
            Get formatted cell text from specified position
            </summary>
            <param name="row">Row of position</param>
            <param name="col">Col of position</param>
            <returns>Text of cell</returns>
        </member>
        <member name="F:unvell.ReoGrid.Worksheet.suspendDataChangedEvent">
            <summary>
            Determine whether or not to suspend all data changing event. Suspend this event when 
            update lot of data into spreadsheet will help to speed up the data updating process.
            Note: make sure this flag can be restored for event invoke.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SuspendDataChangedEvents">
            <summary>
            Suspend all data changing events, from both cell and range.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ResumeDataChangedEvents">
            <summary>
            Resume all data changing events.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StringifyRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Convert all data inside range to string
            </summary>
            <param name="range">The range will be converted</param>
            <returns>String of data converted from specified range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.PasteFromString(unvell.ReoGrid.ReoGridPos,System.String)">
            <summary>
            Paste data from formmatted string into grid
            </summary>
            <param name="startPos">Start position to put data</param>
            <param name="str">Formatted string to be copied</param>
            <returns>Result range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Copy">
            <summary>
            Copy data and put into Clipboard.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Paste">
            <summary>
            Copy data from Clipboard and put on grid.
            
            Currently ReoGrid supports the following types of source from the clipboard.
             - Data from another ReoGrid instance
             - Plain/Unicode Text from any Windows Applications
             - Tabbed Plain/Unicode Data from Excel or similar applications
            
            When data copied from another ReoGrid instance, and the destination range 
            is bigger than the source, ReoGrid will try to repeat putting data to fill 
            the destination range entirely.
            
            Todo: Copy border and cell style from Excel.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Cut">
            <summary>
            Copy any remove anything from selected range into Clipboard.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CanCopy">
            <summary>
            Determine whether the selected range can be copied.
            </summary>
            <returns>True if the selected range can be copied.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CanCut">
            <summary>
            Determine whether the selected range can be cutted.
            </summary>
            <returns>True if the selected range can be cutted.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CanPaste">
            <summary>
            Determine whether the data contained in Clipboard can be pasted into grid control.
            </summary>
            <returns>True if the data contained in Clipboard can be pasted</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeDataFormat(System.String,unvell.ReoGrid.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Set data format for specified range
            </summary>
            <param name="addressOrName">address or name to locate the cell and range on spreadsheet to be set</param>
            <param name="format">flag specifies that which format will be used</param>
            <param name="dataFormatArgs">argument to specify the details for different format</param>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeDataFormat(System.Int32,System.Int32,System.Int32,System.Int32,unvell.ReoGrid.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Set data format for specified range
            </summary>
            <param name="row">number of row to locate the range</param>
            <param name="col">number of column to locate the range</param>
            <param name="rows">number of rows contained in the range</param>
            <param name="cols">number of columns contained in the range</param>
            <param name="format">flag specifies that which format will be used</param>
            <param name="dataFormatArgs">argument to specify the details for different format</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeDataFormat(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Set data format for specified range
            </summary>
            <param name="range">range to be set</param>
            <param name="format">flag specifies that which format will be used</param>
            <param name="dataFormatArgs">argument to specify the details for different format</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteRangeDataFormat(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Delete data format settings from specified range
            </summary>
            <param name="range">Range to be remove formats</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellFormula(System.String,System.String)">
            <summary>
            Set formula into cell, calculate the value of formula and update referenced cells.
            </summary>
            <param name="addressOrName">Address or name to locate range on worksheet</param>
            <param name="formula">Formula to be set. Equal sign is not required.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellFormula(System.Int32,System.Int32,System.String)">
            <summary>
            Set formula into cell, calculate the value of formula and update referenced cells.
            </summary>
            <param name="row">Number of row of cell</param>
            <param name="col">Number of column of cell</param>
            <param name="formula">Formula to be set. Equal sign is not required.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellFormula(unvell.ReoGrid.ReoGridPos,System.String)">
            <summary>
            Set formula into cell, calculate the value of formula and update referenced cells.
            </summary>
            <param name="pos">position of cell</param>
            <param name="formula">Formula to be set. Equal sign is not required.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteCellFormula(System.String)">
            <summary>
            Delete formula from specified cell
            </summary>
            <param name="addressOrName">Address or name used to locate cell on worksheet</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteCellFormula(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Delete formula from specified cell
            </summary>
            <param name="pos">Position to locate the cell on worksheet</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteCellFormula(System.Int32,System.Int32)">
            <summary>
            Delete formula from specified cell
            </summary>
            <param name="row">Number of row of the cell to be deleted</param>
            <param name="col">Number of column of the cell to be deleted</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteCellFormula(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Delete formula from specified 
            </summary>
            <param name="cell">Instance of cell to be deleted</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RecalcCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Recalculate and get the value of formula stored in the specified cell.
            </summary>
            <param name="pos">Position of cell to be recalculated</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RecalcCell(System.Int32,System.Int32)">
            <summary>
            Recalculate and get the value of formula stored in the specified cell.
            </summary>
            <param name="row">Index of row of cell</param>
            <param name="col">Index of column of cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RecalcCell(unvell.ReoGrid.ReoGridCell,System.Collections.Generic.Stack{System.Collections.Generic.List{unvell.ReoGrid.ReoGridCell}})">
            <summary>
            Recalculate and get the value of formula stored in the specified cell.
            </summary>
            <param name="cell">Instance of cell to be recalculated</param>
            <param name="dirtyCellStack">Dirty cell stack.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SuspendFormulaReferenceUpdates">
            <summary>
            Suspend to update formula referenced cells
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ResumeFormulaReferenceUpdates">
            <summary>
            Resume to update formula referenced cells
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Recalculate">
            <summary>
            Recalculate entire worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellFormulaReferenceRanges(System.String)">
            <summary>
            Get a list of referenced ranges from formula of specified cell
            </summary>
            <param name="address">address of cell to find its reference list</param>
            <returns>a list of referenced cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellFormulaReferenceRanges(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get a list of referenced ranges from formula of specified cell
            </summary>
            <param name="pos">position of cell to find its reference list</param>
            <returns>a list of referenced cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellFormulaReferenceRanges(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Get a list of referenced ranges from formula of specified cell
            </summary>
            <param name="cell">cell to find its reference list</param>
            <returns>a list of referenced cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellFormula(System.String)">
            <summary>
            Get formula from cell specified by an address or registered name
            </summary>
            <param name="addressOrName">address or name used to locate a cell</param>
            <returns>formula as string returned from cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellFormula(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get formula from cell specified by position
            </summary>
            <param name="pos">position to locate the cell to be get</param>
            <returns>formula as string returned from specified cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.TraceCellPrecedents(System.String)">
            <summary>
            Show cell formula precedent trace lines on worksheet
            </summary>
            <param name="address">address to trace the cell</param>
            <returns>true if trace is successful</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.TraceCellPrecedents(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Show cell formula precendent trace lines on worksheet
            </summary>
            <param name="pos">position to trace the cell</param>
            <returns>true if trace is successful</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellTracePrecedents(System.String)">
            <summary>
            Remove cell trace precedents from specified address
            </summary>
            <param name="address">address to remove trace precedents</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellTracePrecedents(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Remove cell formula precedent trace lines from worksheet
            </summary>
            <param name="pos">position to locate the cell remove trace lines</param>
            <returns>true if trace lines has been removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellTracePrecedents(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Remove cell formula precedent trace lines from worksheet
            </summary>
            <param name="cell">cell to be checked and removed</param>
            <returns>true if trace lines has been removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.TraceCellDependents(System.String)">
            <summary>
            Start trace dependents to specified address
            </summary>
            <param name="address">target address to trace dependents</param>
            <returns>true if trace arrow added</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.TraceCellDependents(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Start trace dependents to specified position
            </summary>
            <param name="pos">target position to trace dependents</param>
            <returns>true if trace arrow added</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.TraceCellDependents(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Start trace dependents to specified cell
            </summary>
            <param name="cell">target cell to trace dependents</param>
            <returns>true if trace arrow added</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellTraceDependents(System.String)">
            <summary>
            Remove all trace dependent arrows from specified address
            </summary>
            <param name="address">address to remove cell dependents</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellTraceDependents(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Remove all trace dependent arrows from specified position
            </summary>
            <param name="pos">position to remove cell dependents</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellTraceDependents(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Remove all trace dependent arrows from specified cell
            </summary>
            <param name="cell">cell to remove trace dependents</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AddTraceLine(unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.ReoGridCell)">
            <summary>
            Add trace arrow between specified two cells
            </summary>
            <param name="fromCell">Trace arrow begin from this cell</param>
            <param name="toCell">Trace arrow end to this cell</param>
            <returns>true if </returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveTraceLine(unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.ReoGridCell)">
            <summary>
            Remove trace arrow between specified two cells
            </summary>
            <param name="fromCell">Trace arrow begin from this cell</param>
            <param name="toCell">Trace arrow end to this cell</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellAllTraceArrows(System.String)">
            <summary>
            Remove all trace arrows from specified address
            </summary>
            <param name="address">Address of position to locate a cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellAllTraceArrows(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Remove all trace arrows from specified position
            </summary>
            <param name="pos">Position to locate a cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveCellAllTraceArrows(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Remove all trace arrows from specified cell
            </summary>
            <param name="cell">cell instance to remove trace arrows</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveRangeAllTraceArrows(System.String)">
            <summary>
            Remove all trace arrows from specified range of address
            </summary>
            <param name="address">address to locate a range</param>
            <returns>true if address is valid</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveRangeAllTraceArrows(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Remove all trace arrows from specified range
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsCellInTracePrecedents(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check whether specified cell currently in trace precedents
            </summary>
            <param name="pos">a position to locate cell</param>
            <returns>true if cell in trace precedents</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsCellInTraceDependents(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check whether specified cell currently in trace dependents
            </summary>
            <param name="pos">a position to locate cell</param>
            <returns>true if cell in trace dependents</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetAllTraceDependentCells">
            <summary>
            Retrieve all cells which in trace precedents or dependents
            </summary>
            <returns>list of cells</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetColumnsWidth(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Set width of specified columns
            </summary>
            <param name="col">Start column index to set</param>
            <param name="count">Number of columns to set</param>
            <param name="width">Width value of column</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRowsHeight(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Set height of specified rows
            </summary>
            <param name="row">Start row index to set</param>
            <param name="count">Number of rows to set</param>
            <param name="height">Height value of row</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetColumnWidth(System.Int32)">
            <summary>
            Get width from specified column
            </summary>
            <param name="col">Column index to get</param>
            <returns>Width value of specified column</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRowHeight(System.Int32)">
            <summary>
            Get height from specified row
            </summary>
            <param name="row">Row index to get</param>
            <returns>Height value of specified row</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DisableAutoRowHeight(System.Int32)">
            <summary>
            Disable auto-row-height adjust on specified row
            </summary>
            <param name="row">row to be disable auto-row-height</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.EnableAutoRowHeight(System.Int32)">
            <summary>
            Disable auto-row-height adjust on specified row
            </summary>
            <param name="row">row to be disable auto-row-height</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsAutoRowHeight(System.Int32)">
            <summary>
            Disable auto-row-height adjust on specified row
            </summary>
            <param name="row">row to be disable auto-row-height</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AutoFitRowHeight(System.Int32,System.Boolean)">
            <summary>
            Make height of specified row header to fit the cells on that row automatically.
            </summary>
            <param name="row">Zero-based number of row to be adjusted.</param>
            <param name="byAction">Specify that whether or not this operation should 
            be done by performing action, that will be able to revoke this behavior.</param>
            <returns>Return true if operation actually done; Return false if nothing 
            happened. (cells are default height)</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AutoFitColumnWidth(System.Int32,System.Boolean)">
            <summary>
            Make width of specified column header to fit the cells on that column automatically.
            </summary>
            <param name="col">Zero-based number of column to be adjusted</param>
            <param name="byAction">Specify that whether or not this operation should 
            be done by performing action, that will be able to revoke this behavior.</param>
            <returns>Return true if operation actually done; Return false if nothing 
            need to do (cells are default width).</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AppendCols(System.Int32)">
            <summary>
            Append specified columns at right of grid
            </summary>
            <param name="count">number of columns</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AppendRows(System.Int32)">
            <summary>
            Append specified rows at bottom of grid
            </summary>
            <param name="count">number of rows</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Resize(System.Int32,System.Int32)">
            <summary>
            Resize grid to specified number of rows and cols
            </summary>
            <param name="rows">number of rows to resize</param>
            <param name="cols">number of columns to resize</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCols(System.Int32)">
            <summary>
            Set number of columns (up to 32768)
            </summary>
            <param name="colCount">Number of columns</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRows(System.Int32)">
            <summary>
            Set number of rows (up to 1048576)
            </summary>
            <param name="rowCount">Number of rows</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.InsertRows(System.Int32,System.Int32)">
            <summary>
            Insert rows before specified row index
            </summary>
            <param name="row">index of row</param>
            <param name="count">number of rows</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.InsertColumns(System.Int32,System.Int32)">
            <summary>
            Insert rows before specified row index
            </summary>
            <param name="col">zero-based number of column start to insert columns</param>
            <param name="count">number of columns to be inserted</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteRows(System.Int32,System.Int32)">
            <summary>
            Delete rows from speicifed number of row
            </summary>
            <param name="row">number of row start to be deleted</param>
            <param name="count">number of rows to be deleted</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteColumns(System.Int32,System.Int32)">
            <summary>
            Delete columns from specified number of column
            </summary>
            <param name="col">number of column start to be deleted</param>
            <param name="count">number of columns to be deleted</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.HideRows(System.Int32,System.Int32)">
            <summary>
            Hide specified rows 
            </summary>
            <param name="row">index of start row to hide</param>
            <param name="count">number of rows to be hidden</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ShowRows(System.Int32,System.Int32)">
            <summary>
            Show specified rows
            </summary>
            <param name="row">number of row</param>
            <param name="count">number of rows</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.HideColumns(System.Int32,System.Int32)">
            <summary>
            Hide specified columns 
            </summary>
            <param name="col">index of start column to hide</param>
            <param name="count">number of columns to be hidden</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ShowColumns(System.Int32,System.Int32)">
            <summary>
            Show specified columns
            </summary>
            <param name="col">number of column</param>
            <param name="count">number of columns</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsHiddenRow(System.Int32)">
            <summary>
            Check whether an entire row is hidden
            </summary>
            <param name="row">number of row to be checked</param>
            <returns>true if the entire row is hidden, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsHiddenColumn(System.Int32)">
            <summary>
            Check whether an entire column is hidden
            </summary>
            <param name="col">number of column to be checked</param>
            <returns>true if the entire column is hidden, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RetrieveRowHeader(System.Int32)">
            <summary>
            Get instance of row header from specified number of row
            (internal method, no boundary check)
            </summary>
            <param name="index">number of row to be get</param>
            <returns>instance of row header</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RetrieveColumnHeader(System.Int32)">
            <summary>
            Get the instance of column header from specified number of column
            (internal method, no boundary check)
            </summary>
            <param name="index">number of column to be get</param>
            <returns>instance of column header</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRowHeader(System.Int32)">
            <summary>
            Get instance of row header from specified number of row
            </summary>
            <param name="index">number of row to be get</param>
            <returns>instance of row header</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetColumnHeader(System.Int32)">
            <summary>
            Get the instance of column header from specified number of column
            </summary>
            <param name="index">number of column to be get</param>
            <returns>instance of column header</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetOutlines(unvell.ReoGrid.RowOrColumn)">
            <summary>
            Retrieve the attached outlines from spreadsheet
            </summary>
            <param name="flag">Row or column to be retrieved</param>
            <returns>Retrieved collection of outline</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IterateOutlines(unvell.ReoGrid.RowOrColumn,System.Func{unvell.ReoGrid.Outline.OutlineGroup{unvell.ReoGrid.Outline.ReoGridOutline},unvell.ReoGrid.Outline.ReoGridOutline,System.Boolean})">
            <summary>
            Iterate over all attached outlines
            </summary>
            <param name="flag">Spcifiy that row or column to be iterated</param>
            <param name="iterator">Iterator to handle all outlines</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GroupColumns(System.Int32,System.Int32)">
            <summary>
            Group columns from specified number of columns
            </summary>
            <param name="col">number of columns to start group</param>
            <param name="count">numbers of column to be grouped</param>
            <returns>an outline instance including the information of grouped columns</returns>
            <exception cref="T:unvell.ReoGrid.OutlineOutOfRangeException">if specified number of rows out of maximum row in this grid</exception>
            <exception cref="T:unvell.ReoGrid.OutlineTooMuchException">if there is more than 9 outlines has been already added into this grid</exception>
            <exception cref="T:unvell.ReoGrid.OutlineAlreadyDefinedException">if there is a same outline with specified number and count has been already added</exception>
            <exception cref="T:unvell.ReoGrid.OutlineIntersectedException">if specified outline intersects with another one which has been already added</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GroupRows(System.Int32,System.Int32)">
            <summary>
            Group rows from specified number of rows
            </summary>
            <param name="row">number of rows to start group</param>
            <param name="count">numbers of row to be grouped</param>
            <returns>an outline instance including the information of grouped rows</returns>
            <exception cref="T:unvell.ReoGrid.OutlineOutOfRangeException">if specified number of rows out of maximum row in this grid</exception>
            <exception cref="T:unvell.ReoGrid.OutlineTooMuchException">if there is more than 9 outlines has been already added into this grid</exception>
            <exception cref="T:unvell.ReoGrid.OutlineAlreadyDefinedException">if there is a same outline with specified number and count has been already added</exception>
            <exception cref="T:unvell.ReoGrid.OutlineIntersectedException">if specified outline intersects with another one which has been already added</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AddOutline(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Add outline (Group rows) from specified start position
            </summary>
            <param name="flag">what direction used to add outline (specifying Row or Column)</param>
            <param name="start">Start position of outline</param>
            <param name="count">Total count of outline</param>
            <returns>An outline instance including the information of grouped rows or columns</returns>
            <exception cref="T:unvell.ReoGrid.OutlineOutOfRangeException">if specified number of rows out of maximum row in this grid</exception>
            <exception cref="T:unvell.ReoGrid.OutlineTooMuchException">if there is more than 9 outlines has been already added into this grid</exception>
            <exception cref="T:unvell.ReoGrid.OutlineAlreadyDefinedException">if there is a same outline with specified number and count has been already added</exception>
            <exception cref="T:unvell.ReoGrid.OutlineIntersectedException">if specified outline intersects with another one which has been already added</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetOutline(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Get an instance of outline by specified position
            </summary>
            <param name="flag">Determine that outline in row or column direction to be get</param>
            <param name="start">Zero-based start position of the outline</param>
            <param name="count">Number of rows or columns contained in the outline</param>
            <returns>Instance of outline if found with specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CollapseOutline(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Collapse specified outline
            </summary>
            <param name="flag">Determine that outline in row or column direction to be get</param>
            <param name="start">Zero-based start position of the outline</param>
            <param name="count">Number of rows or columns contained in the outline</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExpandOutline(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Expand specified outline
            </summary>
            <param name="flag">Determine that outline in row or column direction to be get</param>
            <param name="start">Zero-based start position of the outline</param>
            <param name="count">Number of rows or columns contained in the outline</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveOutline(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Remove outline from specified position by number of rows or columns
            </summary>
            <param name="flag">Which row and column to be removed</param>
            <param name="start">Zero-based start position of the outline</param>
            <param name="count">Number of rows or columns contained in the outline</param>
            <returns>Instance of outline has been removed; Return null if no outlines found 
            from specified position and count information.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveOutline(unvell.ReoGrid.Outline.IReoGridOutline)">
            <summary>
            Remove specfieid outline from collection of outlines of control
            </summary>
            <param name="outline">the instance of outline will be removed</param>
            <returns>true if outline has been found by specified position and count,
            and has been removed successfully; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UngroupRows(System.Int32,System.Int32)">
            <summary>
            Ungroup rows (Remove outline from specified rows)
            </summary>
            <param name="row">number of row to ungroup</param>
            <param name="count">number of rows to ungroup</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UngroupColumns(System.Int32,System.Int32)">
            <summary>
            Ungroup columns (Remove outline from specified columns)
            </summary>
            <param name="col">number of column to ungroup</param>
            <param name="count">number of columns to ungroup</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UngroupAllRows">
            <summary>
            Ungroup all rows (Remove all row outlines from spreadsheet)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UngroupAllColumns">
            <summary>
            Ungroup all columns (Remove all column outlines from spreadsheet)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ClearOutlines(unvell.ReoGrid.RowOrColumn)">
            <summary>
            Clear all outlines, and close the outline display panel.
            </summary>
            <param name="flag">Which outline of row and column to be clear</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetPartialGrid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy specified range into a separated grid 
            </summary>
            <param name="row">number of start row</param>
            <param name="col">number of start col</param>
            <param name="rows">number of rows to be copied</param>
            <param name="cols">number of columns to be copied</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetPartialGrid(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Copy range into separated grid from current grid
            </summary>
            <param name="range">The range to be copied</param>
            <returns>A partial grid copied from specified range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetPartialGrid(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PartialGrid)">
            <summary>
            Copy from a separated grid into current grid
            </summary>
            <param name="data">Partial grid to be copied</param>
            <param name="toRange">Range to be copied</param>
            <returns>Range has been copied</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetPartialGridRepeatly(unvell.ReoGrid.PartialGrid,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Repeat to copy from a separated grid to fit specified range
            </summary>
            <param name="grid">Partial grid to be copied</param>
            <param name="range">Range to be copied</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ResetAllPageBreaks">
            <summary>
            Reset all page breaks
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AutoSplitPage">
            <summary>
            Split spreadsheet into multiple pages automatically according to given paper size.
            </summary>
            <remarks>
            This method itself works very fast, but will be slower if a remote printer is specified 
            as target printer. Fetching paper size from a remote printer will spend more than 100ms. 
            (depending on the network environment)
            </remarks>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AutoSetMaximumScaleForPages">
            <summary>
            Adjust the page scale to fit every page print range automatically
            in order to make page cells can be printed out properly.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreatePrintSession">
            <summary>
            Create printable document instance from this worksheet
            </summary>
            <returns></returns>
            <exception cref="T:unvell.ReoGrid.NoPrintableContentException">throws this excepiton if there is no cells which has content to be print</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IteratePrintPages(System.Func{unvell.ReoGrid.ReoGridRange,System.Boolean})">
            <summary>
            Iterate over all page break ranges
            </summary>
            <param name="iterator">delegate function to iterate over each pages</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IteratePrintPages(unvell.ReoGrid.Print.PrintPageOrder,System.Func{unvell.ReoGrid.ReoGridRange,System.Boolean})">
            <summary>
            Iterate over all page break ranges
            </summary>
            <param name="pageOrder">order for iterating pages (down then over, over then down)</param>
            <param name="iterator">delegate function to iterate over each pages</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ChangeColumnPageBreak(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change (Move) a column page break at specified column to another new position
            </summary>
            <param name="oldIndex">zero-based number of column to find the page break that will be moved</param>
            <param name="newIndex">zero-based number of column to put column page break</param>
            <param name="refreshPageBreaks">indicates that whether allow to update others page 
            break and adjust the page scale automatically. (default is true)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ChangeRowPageBreak(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change (Move) a row page break at specified row to another new position
            </summary>
            <param name="oldIndex">zero-based number of row to find the page break that will be moved</param>
            <param name="newIndex">zero-based number of row to put row page break</param>
            <param name="refreshPageBreaks">indicates that whether allow to update others page 
            break and adjust the page scale automatically. (default is true)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.InsertColumnPageBreak(System.Int32,System.Boolean)">
            <summary>
            Insert row page break before specified column
            </summary>
            <param name="columnIndex">zero-based number of row to insert page break</param>
            <param name="refreshPageBreaks">indicates that whether allow to update others page 
            break and adjust the page scale automatically. (default is true)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.InsertRowPageBreak(System.Int32,System.Boolean)">
            <summary>
            Insert row page break before specified row
            </summary>
            <param name="rowIndex">zero-based number of row to insert page break</param>
            <param name="refreshPageBreaks">indicates that whether allow to update others page 
            break and adjust the page scale automatically. (default is true)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveColumnPageBreak(System.Int32)">
            <summary>
            Remove column page break from specified number of column
            </summary>
            <param name="columnIndex">zero-based number of column to remove specified page break</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveRowPageBreak(System.Int32)">
            <summary>
            Remove row page break from specified number of row
            </summary>
            <param name="rowIndex">zero-based number of row to remove specified page break</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ClearColumnPageBreaks">
            <summary>
            Clear all column page breaks
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ClearRowPageBreaks">
            <summary>
            Clear all row page breaks
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ClearAllPageBreaks">
            <summary>
            Clear all page breaks
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRangeData(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Get data array from specified range
            </summary>
            <param name="range">Range to get data array</param>
            <returns>Data array of range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteRangeData(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Remove all data contained in specified range
            </summary>
            <param name="range">Range to remove data array</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DeleteRangeData(unvell.ReoGrid.ReoGridRange,System.Boolean)">
            <summary>
            Remove all data contained in specified range
            </summary>
            <param name="range">Range to remove data array</param>
            <param name="checkReadonly">if this flag is set to true, the value from 
            readonly cells will not be deleted</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeData(System.String,System.Object)">
            <summary>
            Set data into specified range
            </summary>
            <param name="addressOrName"></param>
            <param name="data"></param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeData(System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Set data into specified range.
            </summary>
            <param name="row">Zero-based number of row</param>
            <param name="col">Zero-based number of column</param>
            <param name="rows">Number of rows in the range</param>
            <param name="cols">Number of columns in the range</param>
            <param name="data">Data to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeData(unvell.ReoGrid.ReoGridRange,System.Object)">
            <summary>
            Set data into specified range.
            </summary>
            <param name="range">Range to set data</param>
            <param name="data">Data to be set into the range</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeData(unvell.ReoGrid.ReoGridRange,System.Object,System.Boolean)">
            <summary>
            Set data into specified range.
            </summary>
            <param name="range">Range to set data</param>
            <param name="data">Data to be set into the range</param>
            <param name="checkReadonly">Ignore to update read-only cells if this flag is set as true; 
            Otherwise update all cells in specified range.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeData(unvell.ReoGrid.ReoGridRange,System.Data.DataTable)">
            <summary>
            Set range data copied from data table.
            </summary>
            <param name="range">Range to fill the data read from data table</param>
            <param name="table">Read data from this data table</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.FixPos(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check specified cell position, make it is inside valid range of spreadsheet
            </summary>
            <param name="pos">cell position to be checked</param>
            <returns>corrected cell position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.FixRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check the bounds of range, return a sefe range
            </summary>
            <param name="range">specified range to be checked</param>
            <returns>a safe range has been checked</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CheckMergedRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check whether specified range intersects with other merged range, and return the merged largest range.
            </summary>
            <param name="range">range to be checked</param>
            <returns>merged largest range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RangeIsCell(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check whether or not specified range contains only one cell, merged cell is treated as one cell.
            </summary>
            <param name="range">Range to be checked</param>
            <returns>True if the range contains only one cell or one merged cell; otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToCell(System.String)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="address">address to locate the specified cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="pos">index position to locate specified cell</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToCell(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="cell">cell instance to be displayed</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToCell(System.Int32,System.Int32)">
            <summary>
            Scroll to specified cell position
            </summary>
            <param name="row">Number of row</param>
            <param name="col">Number of column</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToRange(System.String)">
            <summary>
            Scroll view to make the specified range visible.
            </summary>
            <param name="addressOrName">address or name to locate a range</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="row">number of row</param>
            <param name="col">number of column</param>
            <param name="rows">number of rows in the range</param>
            <param name="cols">number of columns in the range</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="range">range index to locate a range on spreadsheet</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ScrollToRange(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Scroll to specified range based on a position to the range
            </summary>
            <param name="range">Range to be displayed</param>
            <param name="basePos">Base point to scroll views</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveRange(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Move cells from specified range to another range
            </summary>
            <param name="fromRange">cells moved from this range</param>
            <param name="toRange">cells moved to this range</param>
            <exception cref="T:unvell.ReoGrid.CellDataReadonlyException">throw when current worksheet is read-only</exception>
            <exception cref="T:unvell.ReoGrid.RangeIntersectionException">range to be moved or copied contains a part of another merged cell</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MoveRange(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PartialGridCopyFlag)">
            <summary>
            Move cells from specified range to another range
            </summary>
            <param name="fromRange">cells moved from this range</param>
            <param name="toRange">cells moved to this range</param>
            <param name="flags">Select what content </param>
            <exception cref="T:unvell.ReoGrid.CellDataReadonlyException">throw when current worksheet is read-only</exception>
            <exception cref="T:unvell.ReoGrid.RangeIntersectionException">range to be moved or copied contains a part of another merged cell</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CopyRange(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Copy content from specified range to another range.
            </summary>
            <remarks>
            The range copied from cannot be a part of another range, <para>fromRange</para> contains a part of 
            another range will cause RangeIntersectionException.
            </remarks>
            <param name="fromRange">the range copied from</param>
            <param name="toRange">target position to put copied content from original range</param>
            <exception cref="T:unvell.ReoGrid.CellDataReadonlyException">throw when current worksheet is read-only</exception>
            <exception cref="T:unvell.ReoGrid.RangeIntersectionException">range to be moved or copied contains a part of another merged cell</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CopyRange(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PartialGridCopyFlag)">
            <summary>
            Copy content from specified range to another range.
            </summary>
            <remarks>
            The range copied from cannot be a part of another range, <para>fromRange</para> contains a part of 
            another range will cause RangeIntersectionException.
            </remarks>
            <param name="fromRange">the range copied from</param>
            <param name="toRange">target position to put copied content from original range</param>
            <param name="flags">content flags specifies that what kind of content in cells should be copied (data, borders and styles)</param>
            <exception cref="T:unvell.ReoGrid.CellDataReadonlyException">throw when current worksheet is read-only</exception>
            <exception cref="T:unvell.ReoGrid.RangeIntersectionException">range to be moved or copied contains a part of another merged cell</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CopyRange(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PartialGridCopyFlag,System.Boolean)">
            <summary>
            Copy content from specified range to another range.
            </summary>
            <remarks>
            The range copied from cannot be a part of another range, <para>fromRange</para> contains a part of 
            another range will cause <code>RangeIntersectionException</code>.
            Operation will be cancelled if <para>fromRange</para> is same as <para>toRange</para>
            </remarks>
            <param name="fromRange">the range copied from</param>
            <param name="toRange">target position to put copied content from original range</param>
            <param name="flags">content flags specifies that what kind of content in cells should be copied (data, borders and styles)</param>
            <param name="moveRange">decides whether or not remove content from original range (move range)</param>
            <exception cref="T:unvell.ReoGrid.CellDataReadonlyException">throw when current worksheet is read-only</exception>
            <exception cref="T:unvell.ReoGrid.RangeIntersectionException">range to be moved or copied contains a part of another merged cell</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ClearRangeContent(System.String,unvell.ReoGrid.CellElementFlag)">
            <summary>
            Clear content inside specified range
            </summary>
            <param name="addressOrName">Address or name to locate the range</param>
            <param name="flags">Elements in cell specified by this flag to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ClearRangeContent(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.CellElementFlag,System.Boolean)">
            <summary>
            Clear content inside specified range
            </summary>
            <param name="range">The range to be clear</param>
            <param name="flags">Elements in cell specified by this flag to be removed</param>
            <param name="checkReadonly">True to ignore read-only cells; False to delete content from read-only cells</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AddNamedRange(unvell.ReoGrid.NamedRange)">
            <summary>
            Add a named range into current spreadsheet.
            </summary>
            <param name="namedRange">Named range to be added.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DefineNamedRange(System.String,System.String)">
            <summary>
            Define named range from an address.
            </summary>
            <param name="name">Name to identify a range in spreadsheet.</param>
            <param name="address">Address reference to a range.</param>
            <returns>Instance of named range added into spreadsheet</returns>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DefineNamedRange(System.String,System.String,unvell.ReoGrid.NamedRangeScope)">
            <summary>
            Define named range from an address.
            </summary>
            <param name="name">Name to identify a range in spreadsheet</param>
            <param name="address">Address reference to a range</param>
            <param name="scope">The valid scope of this named range</param>
            <returns>Instance of named range added into spreadsheet</returns>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DefineNamedRange(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Define named range to specify region
            </summary>
            <param name="name">name to be defined to the range</param>
            <param name="row">number of row start to the range</param>
            <param name="col">number of column start to the range</param>
            <param name="rows">number of rows contained in the range</param>
            <param name="cols">number of columns contained in the range</param>
            <returns>Instance of named range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DefineNamedRange(System.String,System.Int32,System.Int32,System.Int32,System.Int32,unvell.ReoGrid.NamedRangeScope)">
            <summary>
            Define named range to specify region
            </summary>
            <param name="name">name to be defined to the range</param>
            <param name="row">number of row start to the range</param>
            <param name="col">number of column start to the range</param>
            <param name="rows">number of rows contained in the range</param>
            <param name="cols">number of columns contained in the range</param>
            <param name="scope">The valid scope of this named range</param>
            <returns>Instance of named range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DefineNamedRange(System.String,unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.NamedRangeScope)">
            <summary>
            Define named range registered into spreadsheet
            </summary>
            <param name="name">Name to identify a range in spreadsheet</param>
            <param name="range">Range to be added into spreadsheet</param>
            <param name="scope">The valid scope of this named range</param>
            <returns>Instance of named range added into spreadsheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetNamedRange(System.String)">
            <summary>
            Get named range which registered in current sheet
            </summary>
            <param name="name">string to name a range</param>
            <returns>referenced range of specified name</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.TryGetNamedRange(System.String,unvell.ReoGrid.NamedRange@)">
            <summary>
            Try get a named range by specified name
            </summary>
            <param name="name">name for range to be get</param>
            <param name="namedRange">output argument, range assoicated with specified name will be returned</param>
            <returns>true if specified name exists and the instance of range has been returned from spreadsheet, otherwise false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetAllNamedRanges">
            <summary>
            Get all named range that has been registered in current spreadsheet
            </summary>
            <returns>list of name for all named ranges registered in this</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetNameByRange(System.String)">
            <summary>
            Find name by specified address of range
            </summary>
            <param name="address">an address used to locate the range</param>
            <returns>name to target range, and null if not found</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetNameByRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Find name for a named range by its location
            </summary>
            <param name="range">a range location used to search the name</param>
            <returns>name as string for the range, return null if no range was found</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveNamedRange(System.String)">
            <summary>
            Remove named range from current worksheet
            </summary>
            <param name="name">Name of range</param>
            <returns>true if the range was found and removed by specified name</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UndefineNamedRange(System.String)">
            <summary>
            Undefine named range from this worksheet
            </summary>
            <param name="name">Name of range</param>
            <returns>true if the range was found and removed by specified name</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RenameNamedRange(System.String,System.String)">
            <summary>
            Rename a named range to another name
            </summary>
            <param name="oldName">Old name used to find range to be renamed</param>
            <param name="newName">New name to set to the range</param>
            <returns>true if range could be found by old name, and renamed to new name successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Load(System.String)">
            <summary>
            Load grid from specified file
            </summary>
            <param name="file">Path of file to load grid</param>
            <exception cref="T:unvell.ReoGrid.ReoGridLoadException">exception will be thrown if any errors happened during loading process</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Load(System.String,System.Text.Encoding)">
            <summary>
            Load grid from specified file
            </summary>
            <param name="file">Path of file to load grid</param>
            <param name="encoding">encoding to read text from file</param>
            <exception cref="T:unvell.ReoGrid.ReoGridLoadException">exception will be thrown if any errors happened during loading process</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Load(System.IO.Stream)">
            <summary>
            Load spreadsheet from specified input stream
            </summary>
            <param name="s">input stream to read data</param>
            <exception cref="T:unvell.ReoGrid.ReoGridLoadException">exception will be thrown if any errors happened during loading process</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.LoadRGF(System.IO.Stream,System.Func{System.String,System.Type})">
            <summary>
            Load spreadsheet from specified input stream
            </summary>
            <param name="s">input stream to read data</param>
            <param name="cellBodyTypeProvider">A provider used to return a type for given 
            cell body which is read from input stream. This argument is optional.</param>
            <returns>True if spreadsheet is loaded successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.LoadCSV(System.String)">
            <summary>
            Load a csv file format from file
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.LoadCSV(System.String,System.Text.Encoding)">
            <summary>
            Load a csv file format from file
            </summary>
            <param name="path">path to load csv file</param>
            <param name="encoding">encoding used to read string from file</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.LoadCSV(System.IO.Stream)">
            <summary>
            Load a csv file format from stream
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.LoadCSV(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Load data from CSV file
            </summary>
            <param name="s">stream to read data</param>
            <param name="encoding">text encoding to read string</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.LoadCSV(System.IO.Stream,System.Boolean,System.Int32,System.Text.Encoding)">
            <summary>
            Load a csv file format from stream
            </summary>
            <param name="s">input stream to read data</param>
            <param name="autoSpread">decide whether or not to append rows or columns automatically to fill csv data</param>
            <param name="bufferLines">decide how many lines int the buffer to read and fill csv data</param>
            <param name="encoding">text encoding to read string</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Save(System.String,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Save current worksheet into file
            </summary>
            <param name="path">file path to save worksheet</param>
            <param name="format">file format used to save worksheet</param>
            <returns>true if saving is successful; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Save(System.IO.Stream,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Save current worksheet into file
            </summary>
            <param name="stream">stream to output worksheet</param>
            <param name="format">file format used to save worksheet</param>
            <returns>true if saving is successful; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SaveRGF(System.String)">
            <summary>
            Save grid into specified file
            </summary>
            <param name="path">Path of file to save grid</param>
            <returns>True if grid saved successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SaveRGF(System.IO.Stream)">
            <summary>
            Save spreadsheet as xml into specified output stream
            </summary>
            <param name="s">stream to save current spreadsheet</param>
            <returns>true if grid is saved successfully</returns>
            <remarks>
            Exceptions will also be thrown if any errors happen during saving
            </remarks>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeStyle(System.String,unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Set styles to each cells inside specified range
            </summary>
            <param name="addressOrName">address or name to locate the cell or range on spreadsheet</param>
            <param name="style">styles to be set</param>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeStyle(System.Int32,System.Int32,System.Int32,System.Int32,unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Set styles to each cells inside specified range
            </summary>
            <param name="row">number of row of specified range</param>
            <param name="col">number of col of specified range</param>
            <param name="rows">number of rows inside specified range</param>
            <param name="cols">number of columns inside specified range</param>
            <param name="style">styles to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetRangeStyle(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Set styles to each cells inside specified range
            </summary>
            <param name="range">specified range to the styles</param>
            <param name="style">styles to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetCellStyleOwn(System.Int32,System.Int32,unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Set style to cell specified by row and col index
            </summary>
            <param name="row">index to row</param>
            <param name="col">index to col</param>
            <param name="style">style will be copied</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveRangeStyle(System.String,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Remove specified styles from a range specified by address or name
            </summary>
            <param name="addressOrName">Address or name to locate range from spreadsheet</param>
            <param name="flags">Styles specified by this flags to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveRangeStyle(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Remove specified styles from a specified range
            </summary>
            <param name="range">Range to be remove styles</param>
            <param name="flags">Styles specified by this flags to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRangeStyle(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Get style of specified range
            </summary>
            <param name="range">The range to get style</param>
            <returns>Style info of specified range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellStyle(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get style of single cell
            </summary>
            <param name="pos">Position of cell to get</param>
            <returns>Style of cell in the specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellStyle(System.Int32,System.Int32)">
            <summary>
            Get style of single cell
            </summary>
            <param name="row">Index of row of specified cell</param>
            <param name="col">Index of column of specified cell</param>
            <returns>Style of cell in ths specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCellStyleItem(System.Int32,System.Int32,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Get single style item from specified cell
            </summary>
            <param name="row">Zero-based number of row</param>
            <param name="col">Zero-based number of column</param>
            <param name="flag">Specified style item to be get</param>
            <returns>Style item value</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UpdateCellTextBounds(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Update Cell Text Bounds for View/Edit mode
            </summary>
            <param name="cell"></param>
            <param name="updateRowHeight"></param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UpdateCellTextBounds(unvell.ReoGrid.Graphics.IGraphics,unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.Rendering.DrawMode,System.Double)">
            <summary>
            Update cell text bounds. 
            need to call this method when content of cell is changed, contains styles like align, font, etc.
            
            if cell's display property is null, this method does nothing.
            </summary>
            <param name="ig">The graphics device used to calculate bounds. Null to use default graphic device.</param>
            <param name="cell">The target cell will be updated.</param>
            <param name="drawMode">Draw mode</param>
            <param name="scaleFactor">Scale factor of current worksheet</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StepRangeFont(unvell.ReoGrid.ReoGridRange,System.Func{System.Single,System.Single})">
            <summary>
            Make the text of cells in specified range larger or smaller.
            </summary>
            <param name="range">The spcified range</param>
            <param name="stepHandler">Iterator callback to handle how to make text larger or smaller</param>
        </member>
        <member name="F:unvell.ReoGrid.Worksheet.InitDefaultColumnWidth">
            <summary>
            Default width of column
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Worksheet.InitDefaultRowHeight">
            <summary>
            Default height of row
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Worksheet.DefaultCols">
            <summary>
            Default number of columns
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Worksheet.DefaultRows">
            <summary>
            Default number of rows
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Worksheet.OutlineButtonSize">
            <summary>
            Default button size of outlinetextColor buttons
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Worksheet.DefaultStyle">
            <summary>
            Default root style of entire range of grid control
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.#ctor(unvell.ReoGrid.Workbook,System.String)">
            <summary>
            Create ReoGrid worksheet instance
            </summary>
            <param name="workbook">ReoGrid workbook instance</param>
            <param name="name">Name for this worksheet</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.#ctor(unvell.ReoGrid.Workbook,System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="workbook">ReoGrid workbook instance</param>
            <param name="name">Name for this worksheet</param>
            <param name="rows">Initial number of rows</param>
            <param name="cols">Initial number of columns</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.FreezeToCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Freeze grid at specified cell
            </summary>
            <param name="pos">position to be freezeed</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.FreezeToCell(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.FreezePosition)">
            <summary>
            Freeze grid at specified cell
            </summary>
            <param name="pos">Cell position used to start freeze</param>
            <param name="position">Freeze position determines that where to dock the frozen cells</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.FreezeToCell(System.Int32,System.Int32)">
            <summary>
            Freeze grid to specified cell
            </summary>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.FreezeToCell(System.Int32,System.Int32,unvell.ReoGrid.FreezePosition)">
            <summary>
            Freeze grid to specified cell (specified by zero-based number of row and number column)
            </summary>
            <param name="row">index of row</param>
            <param name="col">index of column</param>
            <param name="position">Determine where to start freeze this worksheet</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.Unfreeze">
            <summary>
            Unfreeze current grid
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CanFreeze">
            <summary>
            Check whether current grid could be frozen.
            </summary>
            <returns>true if current grid could be frozen</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsForzen">
            <summary>
            Check whether current grid is frozen.
            </summary>
            <returns>true if current grid is frozen, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetFreezePos">
            <summary>
            Get current freeze position
            </summary>
            <returns>the position indicates freeze rows and columns</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetFreezePosition">
            <summary>
            Get current freeze position
            </summary>
            <returns>Return position of current frozen, otherwise None if not in freezing</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetScale(System.Single)">
            <summary>
            Set scale factor to zoom in/out current grid
            </summary>
            <param name="factor">factor of scale (0.1f ~ 4f)</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ZoomIn">
            <summary>
            Zoom in current grid
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ZoomOut">
            <summary>
            Zoom out current grid
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ZoomReset">
            <summary>
            Set scale factor to 1f to restore current grid
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CheckIntersectedMergingRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check are there any merged range exist in specified range
            </summary>
            <param name="range">range to be checked</param>
            <returns>the intersected range with specified range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.HasIntersectedMergingRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check are there any merged range exist in specified range
            </summary>
            <param name="range">range to be checked</param>
            <returns>true if specified range can be merged</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MergeRange(System.String)">
            <summary>
            Merge a range by specified address or name
            </summary>
            <param name="addressOrName">address or name to locate a range, if a name of range is specified, 
            the name must be defined by DefineNamedRange first.</param>
            <exception cref="T:unvell.ReoGrid.NamedRangeNotFoundException">throw when the specified name of range cannot be found.</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MergeRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merge specified range into single cell
            </summary>
            <param name="row">number of start row</param>
            <param name="col">number of start column</param>
            <param name="rows">number of rows to be merged</param>
            <param name="cols">number of columns to be merged</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.MergeRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Merge specified range into single cell
            </summary>
            <exception cref="T:unvell.ReoGrid.RangeTooSmallException">thrown when specified range has only one cell.</exception>
            <exception cref="T:unvell.ReoGrid.RangeIntersectionException">thrown when specified range intersectes with another one. </exception>
            <param name="range">Range to be merged</param>
            <seealso cref="M:unvell.ReoGrid.Worksheet.UnmergeRange(unvell.ReoGrid.ReoGridRange)"/>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.UnmergeRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Unmerge all cells contained in the specified range.
            </summary>
            <seealso cref="M:unvell.ReoGrid.Worksheet.MergeRange(System.String)"/>
            <param name="range">Range to be checked and all cells in this range will be unmerged.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateAndGetCell(System.String)">
            <summary>
            Get cell from an specified address. 
            If instance of cell does not create, then create and return it. 
            Use GetCell if do not want to create instance.
            </summary>
            <param name="address">Address to create and get cell instance</param>
            <returns>cell instance at specified address</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateAndGetCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get cell from specified position.
            If instance of cell does not create, then create and return it. 
            Use GetCell if do not want to create instance.
            </summary>
            <param name="pos">Position to create and get cell instance</param>
            <returns>cell instance at specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateAndGetCell(System.Int32,System.Int32)">
            <summary>
            Get cell from specified position.
            If instance of cell does not create, then create and return it. 
            Use GetCell if do not want to create instance.
            </summary>
            <param name="row">Zero-based number of row</param>
            <param name="col">Zero-based number ofcolumn</param>
            <returns>cell instance at specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create cell instance at specified position
            </summary>
            <param name="row">Zero-based number of row</param>
            <param name="col">Zero-based number ofcolumn</param>
            <param name="updateStyle">determine whether or not to initial cell's style</param>
            <returns>Created cell instance at specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCell(System.String)">
            <summary>
            Retrieve cell instance by specified address or defined name
            </summary>
            <param name="addressOrName">Address or defined name to find the cell</param>
            <returns>instance of cell retrieved from specified address or defined name, 
            return null if the instance does not exist</returns>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Retrieve cell from specified position
            </summary>
            <param name="pos">Position to locate cell</param>
            <returns>Null if cell instance not found at specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Retrieve cell at specified number of row and number of column
            </summary>
            <param name="row">Zero-based number of row</param>
            <param name="col">Zero-based number of column</param>
            <returns>Null if cell instance not found at specified position</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetMergedCellOfRange(System.String)">
            <summary>
            Return the merged first cell inside range
            </summary>
            <param name="address">Position in range</param>
            <returns>First left-top cell of the range which cell belongs to</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetMergedCellOfRange(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Return the merged first cell inside range
            </summary>
            <param name="pos">Position in range</param>
            <returns>First left-top cell of the range which cell belongs to</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetMergedCellOfRange(System.Int32,System.Int32)">
            <summary>
            Return the first cell inside merged range
            </summary>
            <param name="row">Row of position in range</param>
            <param name="col">Column of position in range</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetMergedCellOfRange(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Return the first cell inside merged range
            </summary>
            <param name="cell">Cell instance in range</param>
            <returns>Cell instance of merged range</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.GetRangeIfMergedCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Return the range if the cell specified by position is a merged cell
            </summary>
            <param name="pos">Cell of this position to be checked</param>
            <returns>Range of merged cell returned from this method</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsMergedCell(System.String)">
            <summary>
            Check whether the cell specified by an address is merged cell
            </summary>
            <param name="address">address to be checked</param>
            <returns>true if the cell is merged cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsMergedCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check whether the cell at specified position is a merged cell
            </summary>
            <param name="pos">position to be checked</param>
            <returns>true if the cell is merged cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsMergedCell(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check whether specified range does just contains one merged cell
            </summary>
            <param name="range">specified range to be checked</param>
            <returns>true if range contains only one merged cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsMergedCell(System.Int32,System.Int32)">
            <summary>
            Check whether a cell is merged cell
            </summary>
            <param name="row">number of row to be checked</param>
            <param name="col">number of column to be checked</param>
            <returns>true if the cell is merged cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsValidCell(System.String)">
            <summary>
            Check whether the specified cell is valid (Not merged by others cell)
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsValidCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check whether the specified cell is valid (Not merged by others cell)
            </summary>
            <param name="pos">Position to be checked</param>
            <returns>true if specified position is a valid cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Check whether the specified cell is valid (Not merged by others cell)
            </summary>
            <param name="row">Position of row to be checked</param>
            <param name="col">Position of column to be checked</param>
            <returns>true if specified position is valid cell</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsHiddenCell(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Check whether a cell is on hidden row or column
            </summary>
            <param name="cell">instance of cell to be checked</param>
            <returns>true if the cell is on hidden row or column</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsHiddenCell(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check whether a cell is on hidden row or column
            </summary>
            <param name="pos">position of cell to be checked</param>
            <returns>true if the cell is on hidden row or column</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IsHiddenCell(System.Int32,System.Int32)">
            <summary>
            Check whether a cell is on hidden row or column
            </summary>
            <param name="row">number of row to be checked</param>
            <param name="col">number of column to be checked</param>
            <returns>true if the cell is on hidden row or column</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IterateCells(System.String,System.Func{System.Int32,System.Int32,unvell.ReoGrid.ReoGridCell,System.Boolean})">
            <summary>
            Iterate over all existed cells in the specified range. Cells with nothing attached will be skipped.
            </summary>
            <param name="addressOrName">address or name to locate the range</param>
            <param name="iterator">callback iterator to check through all cells</param>
            <remarks>anytime return <code>false</code> to abort iteration.</remarks>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is invalid</exception>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IterateCells(unvell.ReoGrid.ReoGridRange,System.Func{System.Int32,System.Int32,unvell.ReoGrid.ReoGridCell,System.Boolean})">
            <summary>
            Iterate over all existed cells in the specified range. Cells with nothing attached will be skipped.
            </summary>
            <param name="range">Specified range to iterate cells</param>
            <param name="iterator">callback iterator to check through all cells</param>
            <remarks>anytime return <code>false</code> to abort iteration.</remarks>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.IterateCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,unvell.ReoGrid.ReoGridCell,System.Boolean})">
            <summary>
            Iterate over all existed cells in the specified range. Cells with nothing attached will be skipped.
            </summary>
            <param name="row">Specified index of row</param>
            <param name="col">Specified index of column</param>
            <param name="rows">Specified number of rows</param>
            <param name="cols">Specified number of columns</param>
            <param name="iterator">callback iterator to check through all cells</param>
            <remarks>anytime return <code>false</code> to abort iteration.</remarks>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartPickRangeAndCopyStyle">
            <summary>
            Start to pick a range and copy the style from selected range.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.StartCreateHighlightRange">
            <summary>
            Start pick and create a highlight range on spreadsheet.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateHighlightRange(System.String,unvell.ReoGrid.Graphics.SolidColor)">
            <summary>
            Create highlight range at specified position
            </summary>
            <param name="addressOrName">Address or name to locate a range on worksheet</param>
            <param name="color">Color of the hihglight range displayed on worksheet</param>
            <returns>Instace of highlight range created in this worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.CreateHighlightRange(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.Graphics.SolidColor)">
            <summary>
            Create highlight range at specified position
            </summary>
            <param name="range">Range on worksheet to be highlight</param>
            <param name="color">Color of the hihglight range displayed on worksheet</param>
            <returns>Instace of highlight range created in this worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AddHighlightRange(System.String)">
            <summary>
            Crearte and display a highlighted range at specified position on worksheet
            </summary>
            <param name="address">Address or name to locate a range on worksheet</param>
            <returns>Instance of highlight range on worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.AddHighlightRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Crearte and display a highlighted range at specified position on worksheet
            </summary>
            <param name="range">Position to add highlighted range</param>
            <returns>Instance of highlight range on worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveHighlightRange(System.String)">
            <summary>
            Remove a highlighted range from specified address
            </summary>
            <param name="address">address to remove highlighted range</param>
            <returns>true if range removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveHighlightRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Remove a highlighted range from specified position
            </summary>
            <param name="range">position to remove highlighted range</param>
            <returns>true if range removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RemoveAllHighlightRanges">
            <summary>
            Remove all highlighted ranges from current spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.HasHighlightRange(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check whether a range specified by position is added into current spreadsheet
            </summary>
            <param name="range">range to be checked</param>
            <returns>true if specified range is alreay added</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.TimerRun">
            <summary>
            Threading to update frames of focus highlighted range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.EnableSettings(unvell.ReoGrid.WorksheetSettings)">
            <summary>
            Enable control settings
            </summary>
            <param name="settings">Setting flags to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.DisableSettings(unvell.ReoGrid.WorksheetSettings)">
            <summary>
            Disable control settings
            </summary>
            <param name="settings">Settings to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.SetSettings(unvell.ReoGrid.WorksheetSettings,System.Boolean)">
            <summary>
            Set control settings
            </summary>
            <param name="settings">Setting flags to be set</param>
            <param name="value">value of setting to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.HasSettings(unvell.ReoGrid.WorksheetSettings)">
            <summary>
            Determine whether specified settings have been set
            </summary>
            <param name="setting">Setting flags to be checked</param>
            <returns>True if all settings has setted</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsHTML(System.IO.Stream)">
            <summary>
            Export spreadsheet as html into specified stream
            </summary>
            <param name="s">Stream is used to write html content</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsHTML(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Export spreadsheet as html into specified stream
            </summary>
            <param name="s">Stream is used to write html content</param>
            <param name="pageTitle">A string will be printed out to the html as page title</param>
            <param name="exportHeader">true to export the html headers, false to export content only inside table tag.</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsCSV(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Export spreadsheet as CSV format from specified number of rows
            </summary>
            <param name="path">File path to write CSV format as stream</param>
            <param name="startRow">Number of rows start to export data, this property is useful to skip the headers on top rows of spreadsheet</param>
            <param name="encoding">Text encoding during output text in CSV format</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsCSV(System.String,System.String,System.Text.Encoding)">
            <summary>
            Export spreadsheet as CSV format from specified range
            </summary>
            <param name="path">File path to write CSV format as stream</param>
            <param name="addressOrName">Range to be output from this worksheet, specified by address or name</param>
            <param name="encoding">Text encoding during output text in CSV format</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsCSV(System.String,unvell.ReoGrid.ReoGridRange,System.Text.Encoding)">
            <summary>
            Export spreadsheet as CSV format from specified range
            </summary>
            <param name="path">File path to write CSV format as stream</param>
            <param name="range">Range to be output from this worksheet</param>
            <param name="encoding">Text encoding during output text in CSV format</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsCSV(System.IO.Stream,System.Int32,System.Text.Encoding)">
            <summary>
            Export spreadsheet as CSV format from specified number of rows
            </summary>
            <param name="s">Stream to write CSV format as stream</param>
            <param name="startRow">Number of rows start to export data, this property is useful to skip the headers on top rows of spreadsheet</param>
            <param name="encoding">Text encoding during output text in CSV format</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsCSV(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Export spreadsheet as CSV format from specified range
            </summary>
            <param name="s">Stream to write CSV format as stream</param>
            <param name="addressOrName">Range to be output from this worksheet, specified by address or name</param>
            <param name="encoding">Text encoding during output text in CSV format</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ExportAsCSV(System.IO.Stream,unvell.ReoGrid.ReoGridRange,System.Text.Encoding)">
            <summary>
            Export spreadsheet as CSV format from specified range
            </summary>
            <param name="s">Stream to write CSV format as stream</param>
            <param name="range">Range to be output from this worksheet</param>
            <param name="encoding">Text encoding during output text in CSV format</param>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.FloatingObjects">
            <summary>
            Access the collection of floating objects from worksheet.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.IsUIUpdatesSuspending">
            <summary>
            Check whether UI updates is suspending
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ViewportController">
            <summary>
            Get or set viewport controller for worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ViewMode">
            <summary>
            Get or set view mode of current worksheet (Reserved)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.IsEditing">
            <summary>
            Check whether any cell current in edit mode
            </summary>
            <returns>true if any cell is editing</returns>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeCellEdit">
            <summary>
            Event raised before cell changed to edit mode
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterCellEdit">
            <summary>
            Event raised after cell changed to edit mode
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellEditTextChanging">
            <summary>
            Event raised after input text changing
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellEditCharInputed">
            <summary>
            Event raised after any characters is input
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.CellEditText">
            <summary>
            Get or set the current text in edit textbox of cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.FocusPos">
            <summary>
            Get or set current focused cell position
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.FocusPosChanged">
            <summary>
            Raise when focus cell is changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.FocusPosStyle">
            <summary>
            Get or set focus position display style
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.FocusPosStyleChanged">
            <summary>
            Focus position style changed.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.HoverPos">
            <summary>
            Cell when mouse moving and hover on
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.HoverPosChanged">
            <summary>
            Raise when hover cell is changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.SelectionRange">
            <summary>
            Current selection range of entire grid. If SelectionMode is None, the value of this property will be Empty.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.SelectionMode">
            <summary>
            Selection Mode for Control
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.SelectionStyle">
            <summary>
            Selection Style for Control
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.SelectionForwardDirection">
            <summary>
            Selection Forward Direction for Control
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeSelectionRangeChange">
            <summary>
            Event raised before selection range changing
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SelectionRangeChanged">
            <summary>
            Event raised on focus-selection-range changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SelectionRangeChanging">
            <summary>
            Event raised on focus-selection-range is changing by mouse move
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SelectionModeChanged">
            <summary>
            Event raised on Selection-Mode change
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SelectionStyleChanged">
            <summary>
            Event raised on Selection-Style change
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SelectionForwardDirectionChanged">
            <summary>
            Event raised on SelectionForwardDirection change
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SelectionMovedForward">
            <summary>
            Event raised when focus-selection will move to next position
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SelectionMovedBackward">
            <summary>
            Event raised when focus-selection will move to previous position
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BorderAdded">
            <summary>
            Event fired when any border styles be setted.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BorderRemoved">
            <summary>
            Event fired when any border styles be removed.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellDataChanged">
            <summary>
            Event raised when any data has been changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforePaste">
            <summary>
            Before a range will be pasted from Clipboard
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterPaste">
            <summary>
            When a range has been pasted into grid
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.OnPasteError">
            <summary>
            When an error happened during perform paste
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeCopy">
            <summary>
            Before a range to be copied into Clipboard
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterCopy">
            <summary>
            When a range has been copied into Clipboard
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeCut">
            <summary>
            Before a range to be moved into Clipboard
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterCut">
            <summary>
            After a range to be moved into Clipboard
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.Recalculated">
            <summary>
            This event will be invoked when worksheet is recalculated after any cell's value change.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowHeaderWidth">
            <summary>
            Get or set width of row header in pixel.
            
            Set to -1 to restore system default width;
            Set to 0 to hide the panel of row header;
            Set to other value to decide the width of row header in pixel;
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Rows">
            <summary>
            Get or set number of rows of current worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Columns">
            <summary>
            Get or set number of columns of current worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnCount">
            <summary>
            Get or set number of columns for current worksheet (must at least one column left)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowCount">
            <summary>
            Get or set number of rows for current worksheet (must at least one row left)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowHeaders">
            <summary>
            Row header collection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnHeaders">
            <summary>
            Column header collection
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.RowInserted">
            <summary>
            Event raised on row inserted at given index of row
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.RowDeleted">
            <summary>
            Event raised on row deleted at given index of row
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.ColumnsInserted">
            <summary>
            Event raised on column inserted at given index of column
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.ColumnsDeleted">
            <summary>
            Event raised on column deleted at given index of column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowOutlines">
            <summary>
            Get row outline collection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnOutlines">
            <summary>
            Get column outline collection
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.OutlineAdded">
            <summary>
            Event raised when an outline has been added onto spreadsheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.OutlineRemoved">
            <summary>
            Event raised when an outline has been removed from spreadsheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeOutlineCollapse">
            <summary>
            Event is raised before an outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterOutlineCollapse">
            <summary>
            Event is raised after an outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeOutlineExpand">
            <summary>
            Event is raised before an outline expanding
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterOutlineExpand">
            <summary>
            Event is raised after an outline expanding
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.PrintSettings">
            <summary>
            Ger or set ReoGrid spreadsheet print settings
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.PrintableRange">
            <summary>
            Get or set printable range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowPageBreakIndexes">
            <summary>
            Get collection of row page-break indexes
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexes">
            <summary>
            Get collection of column page break indexes
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.PrintableRangeChanged">
            <summary>
            Event raised when printable range is changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.PrintPageCounts">
            <summary>
            Get number of printable pages
            </summary>
            <returns>Number of pages</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Ranges">
            <summary>
            Virtual collection range of spreadsheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.RangeDataChanged">
            <summary>
            Event raised when entire data from a range is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeRangeMove">
            <summary>
            Event raised before move a range
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeRangeCopy">
            <summary>
            Event raised before copy a range
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterRangeMove">
            <summary>
            Event raised after move a range
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterRangeCopy">
            <summary>
            Event rasied after copy a range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.NamedRanges">
            <summary>
            Get collection of named range
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.NamedRangeDefined">
            <summary>
            Event raised when named range is defined
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.NamedRangeUndefined">
            <summary>
            Event raised when named range is undefined
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.FileLoaded">
            <summary>
            Event raised when grid loaded from file
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.FileSaved">
            <summary>
            Event raised when grid saved into a file
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.RangeStyleChanged">
            <summary>
            Event raised on style of range changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Workbook">
            <summary>
            Instance of workbook of this worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Name">
            <summary>
            Get or set the name of worksheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.NameChanged">
            <summary>
            Event raised when name of worksheet is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellsFrozen">
            <summary>
            Event raised when spreadsheet is frozen
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellsUnfreezed">
            <summary>
            Event raised when spreadsheet is unfreezed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ScaleFactor">
            <summary>
            Current scale factor 
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.Scaled">
            <summary>
            Event raised on grid scaled 
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.RangeMerged">
            <summary>
            Event raised when range merged
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.RangeUnmerged">
            <summary>
            Event raised when range unmerged
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Item(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get data of cell in specified position
            </summary>
            <param name="pos">Position of cell</param>
            <returns>Data of cell in specified position</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Item(System.Int32,System.Int32)">
            <summary>
            Get data of cell in specified position
            </summary>
            <param name="row">Index of row of specified cell</param>
            <param name="col">Index of column of specified cell</param>
            <returns>Data of cell in specified position</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get or set data in specified range
            </summary>
            <param name="row">number of start row</param>
            <param name="col">number of start column</param>
            <param name="rows">number of rows</param>
            <param name="cols">number of columns</param>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Item(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Get or set data from specified range
            </summary>
            <param name="range">range to be get or set</param>
            <returns>data copied from grid</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Item(System.String)">
            <summary>
            Get or set data from specified position or range
            </summary>
            <example>A1 or A1:C3</example>
            <param name="addressOrName">position in string ("A1" or "A1:C3" etc.)</param>
            <returns>object to get from specified position</returns>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Item(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Get or set data to specified cell
            </summary>
            <param name="cell">cell to set data</param>
            <returns>data retrieved from specifed cell</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.MaxContentRow">
            <summary>
            Get maximum content number of row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.MaxContentCol">
            <summary>
            Get maximum content number of column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.Cells">
            <summary>
            Get collection of cells from spreadsheet.
            
            (Careful: this method will create cell instance even there is no data and styles used in the cell,
            create many empty cell instances will spend a lot of memory. To get cell's data or style without
            creating instance use the <code>GetCellData</code> or <code>GetRangeStyle</code> API instead.)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.IgnoreMouseDoubleClick">
            <summary>
            When a cell body has procesed any mousedown event,
            this flag is used to notify the Control to ignore the double click event
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellMouseEnter">
            <summary>
            Event raised when mouse pointer moved into any cells
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellMouseLeave">
            <summary>
            Event rasied when mouse pointer moved out from any cells
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellMouseMove">
            <summary>
            Event raised when mouse moving over all cells
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellMouseDown">
            <summary>
            Event raised after mouse button pressed down on spreadsheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellMouseUp">
            <summary>
            Event raised after mouse button released up on spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.FocusVisual">
            <summary>
            Get current focused visual object.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.DropKeyUpAfterEndEdit">
            <summary>
            Sometimes when in editing mode, the Escape key used to cancel editing,
            The keyUp event of Escape to cancel editing should be ignored to pass to cell body.
            When this flag is true, the KeyUp event notify to the cell body will be ignored once.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.BeforeCellKeyDown">
            <summary>
            Event raised before key pressed down on spreadsheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.AfterCellKeyDown">
            <summary>
            Event raised after key pressed down on spreadsheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.CellKeyUp">
            <summary>
            Event raised after key released up on spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.FocusHighlightRange">
            <summary>
            Get or set the focus highlight range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.HighlightRanges">
            <summary>
            Collection of highlighted ranges
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.Resetted">
            <summary>
            Event raised when control resetted
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Worksheet.SettingsChanged">
            <summary>
            Event raisd when worksheet settings is changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.IndentSize">
            <summary>
            Get or set cell's text indent size
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet.RowHeaderCollection">
            <summary>
            Row header collection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowHeaderCollection.Item(System.Int32)">
            <summary>
            Get row header by zero-based index of number of row
            </summary>
            <param name="index">Zero-based number of row</param>
            <returns>Row header instance</returns>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet.ColumnHeaderCollection">
            <summary>
            Column header collection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnHeaderCollection.Item(System.Int32)">
            <summary>
            Get column header by zero-based index of number of column
            </summary>
            <param name="index">Zero-based number of column</param>
            <returns>Column header instance</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnHeaderCollection.Item(System.String)">
            <summary>
            Get column header by address code (e.g. A, B, Z)
            </summary>
            <param name="address">Address code to get column header</param>
            <returns>Column header instance</returns>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection">
            <summary>
            Collection of row page-break indexes
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.GetEnumerator">
            <summary>
            Get enumerator of row page break indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.Add(System.Int32)">
            <summary>
            Insert a new index
            </summary>
            <param name="rowIndex">row index to be inserted</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.Clear">
            <summary>
            Clear all row break indexes
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.Contains(System.Int32)">
            <summary>
            Check whether or not the specified index is contained in current collection
            </summary>
            <param name="index">index to be checked</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copy elements to another array
            </summary>
            <param name="array">Array to put elements</param>
            <param name="arrayIndex">Start index to copy</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.Remove(System.Int32)">
            <summary>
            Remove element by specified index
            </summary>
            <param name="rowIndex">Number of element to be removed</param>
            <returns>True if element was found and removed successfully</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.Count">
            <summary>
            Get the number of elements
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.IsReadOnly">
            <summary>
            Check whether or not this collection is read-only
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.RowPageBreakIndexCollection.Item(System.Int32)">
            <summary>
            Get or set page-break by zero-based index
            </summary>
            <param name="index">Index to get page-break index</param>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection">
            <summary>
            Collection of column page break indexes
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.GetEnumerator">
            <summary>
            Get the enumerator of current collection
            </summary>
            <returns>enumerator of current collection</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.Add(System.Int32)">
            <summary>
            Add a column page break
            </summary>
            <param name="columnIndex">number of column to be added as page break</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.Clear">
            <summary>
            Clear all column page breaks
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.Contains(System.Int32)">
            <summary>
            Check whether or not a column page break has already added
            </summary>
            <param name="index">number of column index to be checked</param>
            <returns>true if the page break has been added, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copy all column page breaks into another array
            </summary>
            <param name="array">array to be save the page breaks</param>
            <param name="arrayIndex">number of index to start copy the array</param>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.Remove(System.Int32)">
            <summary>
            Remove a column page break from spreadsheet
            </summary>
            <param name="columnIndex">number of column index to be removed</param>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.Count">
            <summary>
            Get the column page break count
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.IsReadOnly">
            <summary>
            Check whether or not current column page break is read-only
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ColumnPageBreakIndexCollection.Item(System.Int32)">
            <summary>
            Get or set the column page break
            </summary>
            <param name="index">number of column index to be added or removed</param>
            <returns>number of column index returned from current spreadsheet</returns>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet.ReoGridRangeCollection">
            <summary>
            Virtual collection range of spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ReoGridRangeCollection.Item(System.String)">
            <summary>
            Retrieve logical range by specified address
            </summary>
            <param name="address">address to locate a range</param>
            <returns>range position information</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ReoGridRangeCollection.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve logical range by specified address
            </summary>
            <param name="row">zero-based number of row of range</param>
            <param name="col">zero-based number of column of range</param>
            <param name="rows">number of rows contained in range</param>
            <param name="cols">number of columns contained in range</param>
            <returns>range position information</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ReoGridRangeCollection.Item(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Retrieve logical range by specified start cell position and end cell position
            </summary>
            <param name="startPos">start cell position of range</param>
            <param name="endPos">end cell position of range</param>
            <returns>range position information</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ReoGridRangeCollection.Item(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Retrieve logical range by specified range position
            </summary>
            <param name="range">The range position to be get</param>
            <returns>Instance of referenced range to worksheet</returns>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet.ReoGridCellCollection">
            <summary>
            Cell collection for a cell container, usually returned by grid control
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Worksheet.ReoGridCellCollection.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ReoGridCellCollection.Item(System.String)">
            <summary>
            Get cell instance by speicified reference from an address or name
            </summary>
            <param name="addressOrName">reference from an address or name</param>
            <returns>instance for cell</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ReoGridCellCollection.Item(System.Int32,System.Int32)">
            <summary>
            Get cell instance by specified number of row and column
            </summary>
            <param name="row">number of row to get cell instance</param>
            <param name="col">number of column to get cell instance</param>
            <returns>instance for cell</returns>
        </member>
        <member name="P:unvell.ReoGrid.Worksheet.ReoGridCellCollection.Item(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Get cell instance by specified position
            </summary>
            <param name="pos">position to get cell instance</param>
            <returns>instance for cell</returns>
        </member>
        <member name="T:unvell.ReoGrid.Worksheet.HighlightRangeCollection">
            <summary>
            Collection of highlighted range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.IWorkbook">
            <summary>
            Represents an interface of workbook instance
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Save(System.String)">
            <summary>
            Save workbook into file.
            </summary>
            <param name="path">File path to create file and save workbook data.</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Save(System.String,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Save workbook into file.
            </summary>
            <param name="path">File path to create file and save workbook data.</param>
            <param name="fileFormat">Specified file format used to write data of workbook.</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Save(System.String,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Save workbook into file.
            </summary>
            <param name="path">File path to create file and save workbook data.</param>
            <param name="fileFormat">Specified file format used to write data of workbook.</param>
            <param name="encoding">Encoding used to write plain-text format file data. (Optional)</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Save(System.IO.Stream,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Save workbook into stream.
            </summary>
            <param name="stream">Output stream to write data of workbook.</param>
            <param name="fileFormat">Specifies the file format used to write data of workbook.</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Save(System.IO.Stream,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Save workbook into stream.
            </summary>
            <param name="stream">Output stream to write data of workbook.</param>
            <param name="fileFormat">Specifies the file format used to write data of workbook.</param>
            <param name="encoding">Encoding used to write plain-text from resource. (Optional)</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Load(System.String)">
            <summary>
            Load workbook from file by specified path.
            </summary>
            <param name="path">Path to locate the file and read workbook data from the file.</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Load(System.String,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Load workbook from file by specified path.
            </summary>
            <param name="path">Path to locate the file and read workbook data from the file.</param>
            <param name="fileFormat">Specified file format used to read data of workbook.</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Load(System.String,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Load workbook from file by specified path.
            </summary>
            <param name="path">Path to locate the file and read workbook data from the file.</param>
            <param name="fileFormat">Specified file format used to read data of workbook.</param>
            <param name="encoding">Encoding used to read plain-text format workbook data from stream. (Optional)</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Load(System.IO.Stream,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Load workbook from specified stream.
            </summary>
            <param name="stream">Input stream to read data of workbook.</param>
            <param name="fileFormat">Specified file format used to read workbook data from stream.</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Load(System.IO.Stream,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Load workbook from specified stream.
            </summary>
            <param name="stream">Input stream to read data of workbook.</param>
            <param name="fileFormat">Specified file format used to read workbook data from stream.</param>
            <param name="encoding">Encoding used to read plain-text format workbook data from stream. (Optional)</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.CreateWorksheet(System.String)">
            <summary>
            Create a new worksheet
            </summary>
            <param name="name">Name for the worksheet (null or empty name to use default sheet name)</param>
            <returns>Instance of worksheet has been created</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.InsertWorksheet(System.Int32,unvell.ReoGrid.Worksheet)">
            <summary>
            Insert worksheet into workbook before specified index
            </summary>
            <param name="index">Zero-based number of workbook to insert specified worksheet</param>
            <param name="sheet">Worksheet to be inserted</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.AddWorksheet(unvell.ReoGrid.Worksheet)">
            <summary>
            Add worksheet into workbook
            </summary>
            <param name="sheet">Worksheet to be added</param>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.RemoveWorksheet(System.Int32)">
            <summary>
            Remove specified worksheet from workbook by specified index
            </summary>
            <param name="index">Zero-based number of worksheet to be removed</param>
            <returns>True if specified worksheet can be found, and removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.RemoveWorksheet(unvell.ReoGrid.Worksheet)">
            <summary>
            Remove specified worksheet from workbook
            </summary>
            <param name="sheet">Worksheet to be removed</param>
            <returns>True if worksheet is removed from this workbook successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.GetWorksheetIndex(unvell.ReoGrid.Worksheet)">
            <summary>
            Get the index of specified worksheet from workbook
            </summary>
            <param name="sheet">Worksheet to be get</param>
            <returns>Zero-based number of worksheet in the collection</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.GetWorksheetByName(System.String)">
            <summary>
            Find worksheet by specified name
            </summary>
            <param name="name">Name to find worksheet</param>
            <returns>Instance of worksheet that is found by specified name; otherwise return null</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.CopyWorksheet(System.Int32,System.Int32,System.String)">
            <summary>
            Create a cloned worksheet and put into specified position
            </summary>
            <param name="index">Index of source worksheet to be copied</param>
            <param name="newIndex">Target index used to insert the copied worksheet</param>
            <param name="newName">Name for new worksheet, set as null to use a default worksheet name e.g. Sheet1, Sheet2...</param>
            <returns>New instance of copid worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.CopyWorksheet(unvell.ReoGrid.Worksheet,System.Int32,System.String)">
            <summary>
            Create a cloned worksheet and put into specified position
            </summary>
            <param name="sheet">Source worksheet to be copied, the worksheet must be already added into this workbook</param>
            <param name="newIndex">Target index used to insert the copied worksheet</param>
            <param name="newName">Name for new worksheet, set as null to use a default worksheet name e.g. Sheet1, Sheet2...</param>
            <returns>New instance of copid worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.MoveWorksheet(System.Int32,System.Int32)">
            <summary>
            Move worksheet from a position to another position
            </summary>
            <param name="index">Worksheet in this position to be moved</param>
            <param name="newIndex">Target position moved to</param>
            <returns>Instance of moved worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.MoveWorksheet(unvell.ReoGrid.Worksheet,System.Int32)">
            <summary>
            Create a cloned worksheet and put into specified position
            </summary>
            <param name="sheet">Instance of worksheet to be moved, the worksheet must be already added into this workbook</param>
            <param name="newIndex">Target position moved to</param>
            <returns>Instance of moved worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.Reset">
            <summary>
            Reset this workbook (Clear all worksheets and put one new)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.IWorkbook.NotifyExceptionHappen(unvell.ReoGrid.Worksheet,System.Exception)">
            <summary>
            Notify that there are exceptions happen on any worksheet. 
            The event ExceptionHappened of workbook will be invoked.
            </summary>
            <param name="sheet">Worksheet where the exception happened</param>
            <param name="ex">Exception to describe the details of error information</param>
        </member>
        <member name="E:unvell.ReoGrid.IWorkbook.WorkbookLoaded">
            <summary>
            Event raised when workbook loaded from stream or file.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.IWorkbook.WorkbookSaved">
            <summary>
            Event raised when workbook saved into stream or file.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.IWorkbook.Worksheets">
            <summary>
            Get the collection of worksheets
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.IWorkbook.Readonly">
            <summary>
            Determine whether or not this workbook is read-only
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.IWorkbook.WorksheetCreated">
            <summary>
            Event raised when worksheet is created
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.IWorkbook.WorksheetInserted">
            <summary>
            Event raised when worksheet is inserted into this workbook
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.IWorkbook.WorksheetRemoved">
            <summary>
            Event raised when worksheet is removed from this workbook
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.IWorkbook.WorksheetNameChanged">
            <summary>
            Event raised when name of worksheet is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.IWorkbook.ExceptionHappened">
            <summary>
            Event raised when exception has been happened during internal processed.
            Usually these internal processes are raised by hot-keys pressed by user.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.IWorkbook.ControlInstance">
            <summary>
            Retrieve the control instance from this workbook (Memory workbook doesn't have instance)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.IWorkbook.ControlStyle">
            <summary>
            Get or set the control appearance style for entire workbook
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.#ctor(unvell.ReoGrid.Views.IControlAdapter)">
            <summary>
            Create workbook instance
            </summary>
            <param name="adapter">Control instance adapter</param>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.Clear">
            <summary>
            Clear all worksheets
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.CopyWorksheet(System.Int32,System.Int32,System.String)">
            <summary>
            Duplicate worksheet and insert the new instance into specified position
            </summary>
            <param name="index">zero-based number of worksheet to be duplicated</param>
            <param name="newIndex">position used to insert duplicated new instance</param>
            <param name="newName">New name to be apply to copied worksheet</param>
            <returns>instance of duplicated worksheet from specified worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.CopyWorksheet(unvell.ReoGrid.Worksheet,System.Int32,System.String)">
            <summary>
            Duplicate worksheet and insert the new instance into specified position
            </summary>
            <param name="sheet">worksheet to be duplicated. The worksheet passed here should be 
            already added into current workbook.</param>
            <param name="newIndex">position used to insert duplicated new instance</param>
            <param name="newName">New name to be apply</param>
            <returns>instance of duplicated worksheet from specified worksheet</returns>
            <exception cref="T:unvell.ReoGrid.WorksheetNotFoundException">when specified worksheet does not belong to
            this workbook.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when the position used to insert
            duplicated instace of worksheet is out of valid range of this workbook.</exception>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.MoveWorksheet(System.Int32,System.Int32)">
            <summary>
            Move worksheet from a position to another position
            </summary>
            <param name="index">Worksheet in this position to be moved</param>
            <param name="newIndex">Target position moved to</param>
            <returns>Instance of moved worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.MoveWorksheet(unvell.ReoGrid.Worksheet,System.Int32)">
            <summary>
            Create a cloned worksheet and put into specified position
            </summary>
            <param name="sheet">Instance of worksheet to be moved, the worksheet must be already added into this workbook</param>
            <param name="newIndex">Target position moved to</param>
            <returns>New instance of copid worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.GetWorksheetIndex(unvell.ReoGrid.Worksheet)">
            <summary>
            Get index of specified worksheet from the collection in this workbook
            </summary>
            <param name="sheet">worksheet to be get</param>
            <returns>zero-based number of worksheet in this workbook's collection</returns>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.GetWorksheetByName(System.String)">
            <summary>
            Find worksheet by specified name
            </summary>
            <param name="name">Name to find worksheet</param>
            <returns>Instance of worksheet that is found by specified name; otherwise return null</returns>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.Reset">
            <summary>
            Reset a workbook to initial status (clear all worksheets and create one default)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.SetSettings(unvell.ReoGrid.WorkbookSettings,System.Boolean)">
            <summary>
            Set settings for this workbook
            </summary>
            <param name="settings">settings to be set</param>
            <param name="value">set true to enable specified settings, false to disable</param>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.GetSettings">
            <summary>
            Get current settings of workbook
            </summary>
            <returns>Workbook settings set</returns>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.HasSettings(unvell.ReoGrid.WorkbookSettings)">
            <summary>
            Determine whether or not specified settings are set
            </summary>
            <param name="settings">settings to be checked</param>
            <returns>true if specified settings are set in current workbook</returns>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.NotifyExceptionHappen(unvell.ReoGrid.Worksheet,System.Exception)">
            <summary>
            Notify that there are exceptions happen on any worksheet. 
            The event ExceptionHappened of workbook will be invoked.
            </summary>
            <param name="sheet">Worksheet where the exception happened</param>
            <param name="ex">Exception to describe the details of error information</param>
        </member>
        <member name="M:unvell.ReoGrid.Workbook.SetControlStyle(unvell.ReoGrid.ReoGridControlStyle)">
            <summary>
            Set the style of grid control.
            </summary>
            <param name="controlStyle"></param>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.WorkbookLoaded">
            <summary>
            Event raised when workbook loaded from stream or file
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.WorkbookSaved">
            <summary>
            Event raised when workbook saved into stream or file
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Workbook.Worksheets">
            <summary>
            Collection of worksheets
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.WorksheetCreated">
            <summary>
            Event raised when new worksheet is created
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.WorksheetInserted">
            <summary>
            Event raised when new worksheet is inserted
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.WorksheetRemoved">
            <summary>
            Event raised when new worksheet is removed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.BeforeWorksheetNameChange">
            <summary>
            Event raised before name of worksheet changing
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.WorksheetNameChanged">
            <summary>
            Event raised when name of worksheet is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.SettingsChanged">
            <summary>
            Event raised when workbook settings is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Workbook.ExceptionHappened">
            <summary>
            Event is used to notify if there are any internal exceptions happen on worksheets
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Workbook.ControlStyle">
            <summary>
            Control Style Settings
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Workbook.Script">
            <summary>
            Script content for this control
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.WorksheetCollection">
            <summary>
            Collection of Worksheet 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.Create(System.String)">
            <summary>
            Create worksheet by specified name
            </summary>
            <param name="name">Unique name used to identify the worksheet</param>
            <returns>Instance of worksheet created by specified name</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.Add(unvell.ReoGrid.Worksheet)">
            <summary>
            Add worksheet
            </summary>
            <param name="sheet">Worksheet to be added</param>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.Insert(System.Int32,unvell.ReoGrid.Worksheet)">
            <summary>
            Insert worksheet at specified position
            </summary>
            <param name="index">Zero-based number of worksheet to insert the worksheet</param>
            <param name="sheet">Worksheet to be inserted</param>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.Clear">
            <summary>
            Clear all worksheet from this workbook
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.Contains(unvell.ReoGrid.Worksheet)">
            <summary>
            Check whether or not specified worksheet is contained in this workbook
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.Remove(unvell.ReoGrid.Worksheet)">
            <summary>
            Remove worksheet instance
            </summary>
            <param name="sheet">Instace of worksheet to be removed</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.GetEnumerator">
            <summary>
            Get enumerator of worksheet list
            </summary>
            <returns>Enumerator of worksheet list</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator of worksheet list
            </summary>
            <returns>Enumerator of worksheet list</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.IndexOf(unvell.ReoGrid.Worksheet)">
            <summary>
            Get the index position of specified worksheet
            </summary>
            <param name="sheet">Instace of worksheet</param>
            <returns>Zero-based number of worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.RemoveAt(System.Int32)">
            <summary>
            Remove worksheet from specified position
            </summary>
            <param name="index">Zero-based number of worksheet to locate the worksheet to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetCollection.CopyTo(unvell.ReoGrid.Worksheet[],System.Int32)">
            <summary>
            Copy all worksheet instances into specified array
            </summary>
            <param name="array">Array used to store worksheets</param>
            <param name="arrayIndex">Start index to copy the worksheets</param>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetCollection.Count">
            <summary>
            Get number of worksheets in this workbook
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetCollection.IsReadOnly">
            <summary>
            Check whether or not current workbook is read-only
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetCollection.Item(System.Int32)">
            <summary>
            Get or set worksheet by specified position
            </summary>
            <param name="index">Zero-based number of worksheet</param>
            <returns>Instance of worksheet found at specified position</returns>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetCollection.Item(System.String)">
            <summary>
            Get worksheet by specified name.
            </summary>
            <param name="name">Name to find worksheet</param>
            <returns>Instacne of worksheet found by specified name</returns>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.WorksheetDrawingCanvas.OnPaint(unvell.ReoGrid.Rendering.DrawingContext)">
            <summary>
            Worksheet Drawing Canvas alwayas keep transparent and doesn't draw anything from itself
            </summary>
            <param name="dc">Drawing session context</param>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.MouseEventArgs">
            <summary>
            Mouse event arguments
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.MouseEventArgs.#ctor(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons)">
            <summary>
            Create an instance of mouse event arguments
            </summary>
            <param name="location">The location of mouse event happened</param>
            <param name="buttons">The mouse button press-down status of mous event happened</param>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.MouseEventArgs.Location">
            <summary>
            Get the location of mouse event happened
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.MouseEventArgs.Buttons">
            <summary>
            Get mouse button press-down status of mouse event
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.KeyboardEventArgs">
            <summary>
            Keyboard event arguments
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.KeyboardEventArgs.#ctor(unvell.ReoGrid.Interaction.KeyCode)">
            <summary>
            Create an instance of keyboard event arguments
            </summary>
            <param name="keys">The key of user pressed down when event happening</param>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.KeyboardEventArgs.Keys">
            <summary>
            Get the merged key press-down status code
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.IDrawingObjectCollection">
            <summary>
            Represents collection of drawing object.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.IFloatingObjectCollection`1">
            <summary>
            Collection of floating object
            </summary>
            <typeparam name="T">Type inherts from <seealso>IFloattingObject</seealso></typeparam>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.IFloatingObjectCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all elements from another collection
            </summary>
            <param name="drawingObjects"></param>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.IFloatingObjectCollection`1.Item(System.Int32)">
            <summary>
            Access element from collection
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.LineStyle">
            <summary>
            Represents line styles.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.LineStyle.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.LineStyle.Dash">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.LineStyle.Dot">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.LineStyle.DashDot">
            <summary>
            Dashed dot
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.LineStyle.DashDotDot">
            <summary>
            Dashed double dot
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.LineCapStyles">
            <summary>
            Represents line cap styles.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.LineCapStyles.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.LineCapStyles.Arrow">
            <summary>
            Arrow
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.Matrix3f">
            <summary>
            Matrix for 2D graphics
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.Matrix3f.Identify">
            <summary>
            Predefined identify matrix
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Matrix3f.Translate(System.Double,System.Double)">
            <summary>
            Translate this matrix
            </summary>
            <param name="x">X-coordinate offset</param>
            <param name="y">Y-coordinate offset</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Matrix3f.Translate(unvell.ReoGrid.Graphics.Point)">
            <summary>
            Translate this matrix
            </summary>
            <param name="o">Point value on two coordinates</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Matrix3f.Rotate(System.Double)">
            <summary>
            Rotate this matrix
            </summary>
            <param name="angle">Angle to rotate</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Matrix3f.Scale(System.Single,System.Single)">
            <summary>
            Scale this matrix
            </summary>
            <param name="x">X-aspect</param>
            <param name="y">Y-aspect</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Matrix3f.TransformPoint(unvell.ReoGrid.Graphics.Point)">
            <summary>
            Transform specified point with this matrix
            </summary>
            <param name="p">Point to be transformed</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Matrix3f.TransformPoint(System.Double,System.Double)">
            <summary>
            Transform specified point with this matrix
            </summary>
            <param name="x">X-coordinate value of point to be transformed</param>
            <param name="y">Y-coordinate value of point to be transformed</param>
            <returns>Transformed point</returns>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.Point">
            <summary>
            Represents point information that includes the x-coordinate value and y-coordinate value.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Point.#ctor(System.Double,System.Double)">
            <summary>
            Create point by specified x-coordinate value and y-coordinate value.
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Point.Equals(System.Object)">
            <summary>
            Compare two points to check whether or not they are same.
            </summary>
            <param name="obj">Another object to be compared with this point.</param>
            <returns>True if two points are same; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Point.GetHashCode">
            <summary>
            Get hash code of this point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Point.ToString">
            <summary>
            Convert point into string. (Format: {x, y})
            </summary>
            <returns>String converted from this point.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Point.op_Equality(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Point)">
            <summary>
            Compare two points to check whether or not they are same.
            </summary>
            <param name="size1">First point to be compared.</param>
            <param name="size2">Second point to be compared.</param>
            <returns>True if two points are same; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Point.op_Inequality(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Point)">
            <summary>
            Compare two points to check whether or not they are not same.
            </summary>
            <param name="size1">First point to be compared.</param>
            <param name="size2">Second point to be compared.</param>
            <returns>True if two points are not same; Otherwise return false.</returns>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Point.X">
            <summary>
            Get or set the value on x-coordinate.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Point.Y">
            <summary>
            Get or set the value on y-coordinate.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.Rectangle">
            <summary>
            Represents rectangle position information.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.Rectangle.X">
            <summary>
            Get or set the x-coordinate of rectangle.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.Rectangle.Y">
            <summary>
            Get or set the y-coordinate of rectangle.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.Rectangle.Width">
            <summary>
            Get or set the width of rectangle.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Graphics.Rectangle.Height">
            <summary>
            Get or set the height of rectangle.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create rectangle with specified x, y, width and height.
            </summary>
            <param name="x">Value on x-coordinate of rectangle.</param>
            <param name="y">Value on y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.#ctor(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Size)">
            <summary>
            Create rectangle with specified position and size.
            </summary>
            <param name="position">Position of rectangle.</param>
            <param name="size">Size of rectangle.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.#ctor(unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Point)">
            <summary>
            Create rectangle from specified two positions. This method will find the 
            most left-top corner and bottom-right corner from two positions and create
            rectangle in correct position.
            </summary>
            <param name="firstPosition">First position.</param>
            <param name="secondPosition">Second position.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.Contains(unvell.ReoGrid.Graphics.Point)">
            <summary>
            Check whether or not the specified point is contained by this rectangle.
            </summary>
            <param name="p">Point to be checked.</param>
            <returns>True if the point is contained by this rectangle; Otherwise return false;</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.Contains(System.Double,System.Double)">
            <summary>
            Check whether or not the specified point (described by x and y) is contained by this rectangle.
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
            <returns>True if the point is contained by this rectangle; Otherwise return false;</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.Offset(System.Double,System.Double)">
            <summary>
            Move the rectangle by amount specified by x and y coordinates.
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.Inflate(System.Double,System.Double)">
            <summary>
            Inflate the rectangle by amount specified by x and y coordinates.
            <remarks>
            It is also possible to shrink this rectangle by specifying negative values.
            </remarks>
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.IntersectWith(unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            Determines if this rectangle intersets with rect. 
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns true if there is any intersection, otherwise false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.Intersect(unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            Creates a Rectangle that represents the intersection between this Rectangle and rect.
            </summary>
            <param name="rect">The rectangle to test.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.Intersect(unvell.ReoGrid.Graphics.Rectangle,unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            Check two rectangles and calculate the intersection of two rectangles.
            If no intersection detected, a rectangle with zero width and height is returned.
            </summary>
            <param name="a">First rectangle to be test.</param>
            <param name="b">Second rectangle to be test.</param>
            <returns>Intersected rectangle.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.Equals(System.Object)">
            <summary>
            Compare two rectangles to check whether or not they are same.
            </summary>
            <param name="obj">Another rectange compared to this rectangle.</param>
            <returns>True if two rectangles are same; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.GetHashCode">
            <summary>
            Get hash code of this rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.op_Equality(unvell.ReoGrid.Graphics.Rectangle,unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            Compare two rectangels to check whether or not they are same.
            </summary>
            <param name="r1">First rectangle to be compared.</param>
            <param name="r2">Second rectangle to be compared.</param>
            <returns>True if two rectangles are same; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.op_Inequality(unvell.ReoGrid.Graphics.Rectangle,unvell.ReoGrid.Graphics.Rectangle)">
            <summary>
            Compare two rectangles to check whether or not they are not same.
            </summary>
            <param name="r1">First rectangle to be compared.</param>
            <param name="r2">Second rectangle to be compared.</param>
            <returns>True if two rectangles are not same; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Rectangle.ToString">
            <summary>
            Convert this rectangle into string. (Format: {x, y, w, h})
            </summary>
            <returns>String converted from this rectangle object.</returns>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Rectangle.Location">
            <summary>
            Get or set the location of rectangle.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Rectangle.Size">
            <summary>
            Get or set the size of rectangle.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Rectangle.Left">
            <summary>
            Get or set the left position of rectangle.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Rectangle.Right">
            <summary>
            Get or set the right position of rectangle.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Rectangle.Top">
            <summary>
            Get or set the top position of rectangle.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Rectangle.Bottom">
            <summary>
            Get or set the bottom position of rectangle.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Rectangle.Origin">
            <summary>
            Get origin of rectangle
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.Size">
            <summary>
            Represents size information that contains width and height value.
            </summary>
            <remarks>
            Width and height properties defined as float on Windows Form platform;
            And defined as double on other platforms.
            </remarks>
            [Serializable]
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Size.#ctor(System.Double,System.Double)">
            <summary>
            Create size with specified width and height value. 
            </summary>
            <param name="width">Width of size.</param>
            <param name="height">Height of size.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Size.Equals(System.Object)">
            <summary>
            Check another object to see whether or not two objects are same.
            </summary>
            <param name="obj">Another object to be compared.</param>
            <returns>True if specified object is size, and its width and height are same with this object.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Size.GetHashCode">
            <summary>
            Get hash code of size object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Size.ToString">
            <summary>
            Convert size into string. (e.g. Size[100, 50])
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Size.op_Equality(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Graphics.Size)">
            <summary>
            Compare two size objects to check whether or not thay have same width and height.
            </summary>
            <param name="size1">First size to be compared.</param>
            <param name="size2">Second size to be compared.</param>
            <returns>True if two size have same width and height; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.Size.op_Inequality(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Graphics.Size)">
            <summary>
            Compare two size objects to check whether or not thay have same width and height.
            </summary>
            <param name="size1">First size to be compared.</param>
            <param name="size2">Second size to be compared.</param>
            <returns>False if two size have same width and height; Otherwise return true.</returns>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Size.Width">
            <summary>
            Get and set the width of size.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.Size.Height">
            <summary>
            Get or set the height of size.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Interaction.MouseButtons">
            <summary>
            Mouse button down status
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.MouseButtons.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.MouseButtons.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.MouseButtons.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.MouseButtons.Middle">
            <summary>
            Middle
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Interaction.ToggleStatus">
            <summary>
            Represent for the button status of mouse
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.ToggleStatus.Normal">
            <summary>
            The button has its normal appearance (three-dimensional).
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.ToggleStatus.Inactive">
            <summary>
            The button is inactive (grayed).
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.ToggleStatus.Pushed">
            <summary>
            The button appears pressed.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.ToggleStatus.Checked">
            <summary>
            The button has a checked or latched appearance. Use this appearance to show
            that a toggle button has been pressed.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.ToggleStatus.Flat">
            <summary>
            The button has a flat, two-dimensional appearance.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Interaction.ToggleStatus.All">
            <summary>
            All flags except Normal are set.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Print.PrintSession.Print">
            <summary>
            Start output document to printer
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSession.Worksheets">
            <summary>
            Get the enumeration of worksheet that has been added into this session to be printed.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSession.CurrentWorksheetIndex">
            <summary>
            Get or set the zero-based index of current worksheet.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSession.CurrentWorksheet">
            <summary>
            Get current worksheet instance.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSession.IsPrinting">
            <summary>
            Get whether current is in the operation of print or preview
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Print.PrintSettings">
            <summary>
            Print settings for spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Print.PrintSettings.#ctor">
            <summary>
            Construct print settings instance
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Print.PrintSettings.Clone">
            <summary>
            Create a copy of current print settings object
            </summary>
            <returns>Cloned print settings object</returns>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.PageOrder">
            <summary>
            Determine the orientation to output the print pages
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.ShowMargins">
            <summary>
            Determine whether or not to show the paper margins during preview and print
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.PageScaling">
            <summary>
            Scale factor for printing each pages (0.1f - 4f).
            This property might be changed by adjusting the break lines automatically.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.PaperSize">
            <summary>
            Get or set paper size
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.Landscape">
            <summary>
            Determine the paper orientation (landscape or portrait)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.PaperWidth">
            <summary>
            Get or set the width of the paper, in hundredths of an inch (only available when PaperSize is custom)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.PaperHeight">
            <summary>
            Get or set the height of the paper, in hundredths of an inch (only available when PaperSize is custom)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PrintSettings.Margins">
            <summary>
            Get or set the paper margins
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Print.PageMargins">
            <summary>
            Page margin values (in hundredths of an inch)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Print.PageMargins.#ctor(System.Double)">
            <summary>
            Create and set all values with same value
            </summary>
            <param name="all">Value applied to all margins</param>
        </member>
        <member name="M:unvell.ReoGrid.Print.PageMargins.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create with every specified values
            </summary>
            <param name="top">Top margin</param>
            <param name="bottom">Bottom margin</param>
            <param name="left">Left margin</param>
            <param name="right">Right margin</param>
        </member>
        <member name="F:unvell.ReoGrid.Print.PageMargins.Empty">
            <summary>
            Predefined empty margin values (All zero)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Print.PageMargins.op_Equality(unvell.ReoGrid.Print.PageMargins,unvell.ReoGrid.Print.PageMargins)">
            <summary>
            Compare two margin values whether are same
            </summary>
            <param name="p1">Margin value 1 to be compared</param>
            <param name="p2">Margin value 2 to be compared</param>
            <returns>True if two margin values are same; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Print.PageMargins.op_Inequality(unvell.ReoGrid.Print.PageMargins,unvell.ReoGrid.Print.PageMargins)">
            <summary>
            Compare two margin values whether are not same
            </summary>
            <param name="p1">Margin value 1 to be compared</param>
            <param name="p2">Margin  value 2 to be compared</param>
            <returns>True if two margin values are not same; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Print.PageMargins.Equals(System.Object)">
            <summary>
            Compare an object and check whether two margin value are same
            </summary>
            <param name="obj">Another object to be checked</param>
            <returns>True if two margin values are same; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Print.PageMargins.GetHashCode">
            <summary>
            Get hash code of this object
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:unvell.ReoGrid.Print.PageMargins.Top">
            <summary>
            Get or set top margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PageMargins.Bottom">
            <summary>
            Get or set bottom margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PageMargins.Left">
            <summary>
            Get or set left margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Print.PageMargins.Right">
            <summary>
            Get or set right margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Print.PrintHelper.PageSizeListMM">
            <summary>
            Predefined list of paper size
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Print.PaperSize">
            <summary>
            Perdefiend paper size
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Print.PaperSize.Custom">
            <summary>
            Specify to use customize pager size
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Print.PaperSize.Auto">
            <summary>
            Detect the default paper size from specified printer
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Print.PaperSize.Letter">
            <summary>
            ANSI Letter (8.5 x 11 inches, 216 mm x 279 mm)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Print.PaperSize.GovernmentLetter">
            <summary>
            Government Letter Size (203 mm x 267 mm)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.IColor">
            <summary>
            Color interface
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.IColor.ToSolidColor">
            <summary>
            Get solid color converted from this color interface.
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.IColor.IsTransparent">
            <summary>
            Determines whether or not this color is fully transparent.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.SolidColor">
            <summary>
            Solid color in ARGB format
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct color value with specified ARGB value
            </summary>
            <param name="a">Alpha value</param>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct color value with specified ARGB value
            </summary>
            <param name="a">Alpha value</param>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct color value with specified ARGB value
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct color value with specified ARGB value
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.#ctor(System.Int32,unvell.ReoGrid.Graphics.SolidColor)">
            <summary>
            Create color with specified alpha factor and another solid color.
            </summary>
            <param name="alpha">Alpha factor used to decide the transparency of this color.</param>
            <param name="rgb">Another solid color used to create this color.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.ToArgb">
            <summary>
            Convert color value to 4 bytes integer value
            </summary>
            <returns>Converted 4 bytes integer value</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create color with specified ARGB values
            </summary>
            <param name="a">Alpha value</param>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
            <returns>Converted color value</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create color with specified ARGB values
            </summary>
            <param name="a">Alpha value</param>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
            <returns>Converted color value</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create color with specified RGB values
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
            <returns>Converted color value</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.FromArgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create color with specified RGB values
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
            <returns>Converted color value</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.FromArgb(System.Int32)">
            <summary>
            Construct color value with merged ARGB int value.
            </summary>
            <param name="argb">Merged ARGB int value to create color object.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.FromRGB(System.Int32)">
            <summary>
            Construct color value with merged RGB int value.
            </summary>
            <param name="rgb">Merged RGB value to create color object.</param>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.ToString">
            <summary>
            Convert to friendly description
            </summary>
            <returns>Description of color</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.ToSolidColor">
            <summary>
            Convert to solid color (equal to self)
            </summary>
            <returns>Converted solid color</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.Randomly">
            <summary>
            Randomly generate a color
            </summary>
            <returns>New random solid color</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.op_Equality(unvell.ReoGrid.Graphics.SolidColor,unvell.ReoGrid.Graphics.SolidColor)">
            <summary>
            Compare two colors and check whether they are same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are same</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.op_Inequality(unvell.ReoGrid.Graphics.SolidColor,unvell.ReoGrid.Graphics.SolidColor)">
            <summary>
            Compare two colors and check whether they are not same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are not same</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.Equals(System.Object)">
            <summary>
            Compare specified object whether is same as this object
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>True if specified object are same as this object</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.op_Implicit(unvell.ReoGrid.Graphics.SolidColor)~System.Drawing.Color">
            <summary>
            Convert from System.Drawing.Color to ReoGrid color
            </summary>
            <param name="color">System.Drawing.Color value</param>
            <returns>Converted ReoGrid</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.op_Equality(unvell.ReoGrid.Graphics.SolidColor,System.Drawing.Color)">
            <summary>
            Compare two colors and check whether they are not same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are not same</returns>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.SolidColor.op_Inequality(unvell.ReoGrid.Graphics.SolidColor,System.Drawing.Color)">
            <summary>
            Compare two colors and check whether they are same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are same</returns>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.SolidColor.A">
            <summary>
            Get or set alpha value
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.SolidColor.R">
            <summary>
            Get or set red value
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.SolidColor.G">
            <summary>
            Get or set green value
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.SolidColor.B">
            <summary>
            Get or set blue value
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.SolidColor.IsTransparent">
            <summary>
            Check whether or not this color is transparent
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.LinearColor">
            <summary>
            Store the ARGB values of linear color
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Graphics.LinearColor.ToSolidColor">
            <summary>
            Convert linear color to a solid color
            </summary>
            <returns>Solid color converted from this linear color</returns>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.LinearColor.StartColor">
            <summary>
            Get or set the start color of linear fill region
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.LinearColor.EndColor">
            <summary>
            Get or set the end color of linear fill region
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.LinearColor.Angle">
            <summary>
            Linear angle
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Graphics.LinearColor.IsTransparent">
            <summary>
            Check whether or not this color is transparent
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.Text.TextStyle">
            <summary>
            Font style
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Drawing.Text.TextStyle.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Drawing.Text.TextStyle.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Drawing.Text.TextStyle.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Drawing.Text.TextStyle.Underline">
            <summary>
            Underline
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Drawing.Text.TextStyle.Strikethrough">
            <summary>
            Strikethrough
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.base_lib">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.cross">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.EULA_EN">
            <summary>
              Looks up a localized string similar to END-USER LICENSE AGREEMENT FOR UNVELL IMPORTANT PLEASE READ THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT CAREFULLY BEFORE CONTINUING WITH THIS PROGRAM INSTALL: UNVELL End-User License Agreement (&quot;EULA&quot;) is a legal agreement between you (either an individual or a single entity) and UNVELL. for the UNVELL software product(s) identified above which may include associated software components, media, printed materials, and &quot;online&quot; or electronic documentation (&quot;EULA&quot;). By installing, copying, or otherwise  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.full_col_select">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.full_row_select">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.grid_select">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.NewBuildDefinition_8952">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.NewBuildDefinition_8952_inactive">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.pick_range">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.seek">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Properties.Resources.theme1">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;a:theme xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; name=&quot;Office Theme&quot;&gt;
            	&lt;a:themeElements&gt;
            		&lt;a:clrScheme name=&quot;Office&quot;&gt;
            			&lt;a:dk1&gt;
            				&lt;a:sysClr val=&quot;windowText&quot; lastClr=&quot;000000&quot;/&gt;
            			&lt;/a:dk1&gt;
            			&lt;a:lt1&gt;
            				&lt;a:sysClr val=&quot;window&quot; lastClr=&quot;FFFFFF&quot;/&gt;
            			&lt;/a:lt1&gt;
            			&lt;a:dk2&gt;
            				&lt;a:srgbClr val=&quot;44546A&quot;/&gt;
            			&lt;/a:dk2&gt;
            			&lt;a:lt2&gt;
            				&lt;a:srgbClr val=&quot;E7E6E6&quot;/&gt;
            			&lt;/a:lt2&gt;
            			&lt;a:accent1&gt;
            				&lt;a:srgbClr val=&quot;5B9BD5&quot;/&gt;
            		 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:unvell.ReoGrid.Utility.StyleUtility">
            <summary>
            Range style utility
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Utility.StyleUtility.HasStyle(unvell.ReoGrid.WorksheetRangeStyle,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Check whether or not the style set contains the specified item
            </summary>
            <param name="style">style set to be checked</param>
            <param name="flag">style item to be checked</param>
            <returns>true if the style set contains the specified item</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.StyleUtility.CheckAndRemoveCellStyle(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridCell)">
            <summary>
            Remove repeated styles if it does same as default style
            This function also can be used to create a default style for specified cell
            </summary>
            <param name="grid">StyleGrid instance</param>
            <param name="cell">the cell will be check and removed</param>
            <returns>checked style, null if given cell or style of cell is null</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.StyleUtility.GetStyleItem(unvell.ReoGrid.WorksheetRangeStyle,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Get single style from style set
            </summary>
            <param name="style">style set to find specified single style</param>
            <param name="flag">single style specifeid by this flag to be get</param>
            <returns>single style as object returned from style set</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.StyleUtility.CreateFontStyle(unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Convert to merged font style value from worksheet style
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.WorkbookAction">
            <summary>
            Represents an action of workbook.
            </summary>
        </member>
        <member name="T:unvell.Common.IUndoableAction">
            <summary>
            Undoable action interface
            </summary>
        </member>
        <member name="T:unvell.Common.IAction">
            <summary>
            Action interface
            </summary>
        </member>
        <member name="M:unvell.Common.IAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.Common.IAction.GetName">
            <summary>
            Get the friendly name of this action
            </summary>
            <returns>name of action</returns>
        </member>
        <member name="M:unvell.Common.IUndoableAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorkbookAction.#ctor(unvell.ReoGrid.IWorkbook)">
            <summary>
            Create workbook action with specified workbook instance.
            </summary>
            <param name="workbook"></param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorkbookAction.Do">
            <summary>
            Do this action.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorkbookAction.Undo">
            <summary>
            Undo this action.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorkbookAction.GetName">
            <summary>
            Get the friendly name of this action.
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.WorkbookAction.Workbook">
            <summary>
            Get the workbook instance.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.InsertWorksheetAction">
            <summary>
            Action for inserting worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertWorksheetAction.#ctor(System.Int32,unvell.ReoGrid.Worksheet)">
            <summary>
            Create this action to insert worksheet
            </summary>
            <param name="index">Number of worksheet</param>
            <param name="worksheet">Worksheet instance</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertWorksheetAction.Do">
            <summary>
            Do this action to insert worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertWorksheetAction.Undo">
            <summary>
            Undo this action to remove the inserted worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertWorksheetAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.InsertWorksheetAction.Index">
            <summary>
            Number of worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.InsertWorksheetAction.Worksheet">
            <summary>
            Worksheet instance
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.RemoveWorksheetAction">
            <summary>
            Action for removing worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveWorksheetAction.#ctor(System.Int32,unvell.ReoGrid.Worksheet)">
            <summary>
            Create this action to insert worksheet
            </summary>
            <param name="index">Number of worksheet</param>
            <param name="worksheet">Worksheet instance</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveWorksheetAction.Do">
            <summary>
            Do this action to remove worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveWorksheetAction.Undo">
            <summary>
            Undo this action to restore the removed worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveWorksheetAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.RemoveWorksheetAction.Index">
            <summary>
            Number of worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.RemoveWorksheetAction.Worksheet">
            <summary>
            Worksheet instance
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.BaseWorksheetAction">
            <summary>
            Base action for all actions that are used for worksheet operations.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.BaseWorksheetAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.BaseWorksheetAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.BaseWorksheetAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.BaseWorksheetAction.Worksheet">
            <summary>
            Instance for the grid control will be setted before action performed.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.WorksheetActionGroup">
            <summary>
            The action group is one type of RGAction to support Do/Undo/Redo a series of actions.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetActionGroup.#ctor">
            <summary>
            Create instance for RGActionGroup
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetActionGroup.Do">
            <summary>
            Do all actions stored in this action group
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetActionGroup.Undo">
            <summary>
            Undo all actions stored in this action group
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetActionGroup.GetName">
            <summary>
            Get friendly name of this action group
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.WorksheetActionGroup.Actions">
            <summary>
            Actions stored in this list will be Do/Undo/Redo together
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.WorksheetReusableAction">
            <summary>
            Reusable action is one type of RGAction to support repeat operation
            to a specified range. It is good practice to make all actions with 
            a range target to inherit from this class.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetReusableAction.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Constructor of RGReusableAction 
            </summary>
            <param name="range">Range to be applied this action</param>
        </member>
        <member name="P:unvell.ReoGrid.Actions.WorksheetReusableAction.Range">
            <summary>
            Range to be appiled this action
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.WorksheetReusableActionGroup">
            <summary>
            Reusable action group is one type of RGActionGroup to support repeat 
            operation to a specified range. It is good practice to make all reusable 
            action groups to inherit from this class.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetReusableActionGroup.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Constructor of ReusableActionGroup
            </summary>
            <param name="range">Range to be appiled this action group</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetReusableActionGroup.#ctor(unvell.ReoGrid.ReoGridRange,System.Collections.Generic.List{unvell.ReoGrid.Actions.WorksheetReusableAction})">
            <summary>
            Constructor of ReusableActionGroup
            </summary>
            <param name="range">Range to be appiled this action group</param>
            <param name="actions">Action list to be performed together</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetReusableActionGroup.Do">
            <summary>
            Do all actions stored in this action group
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetReusableActionGroup.Undo">
            <summary>
            Undo all actions stored in this action group
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetReusableActionGroup.GetName">
            <summary>
            Get friendly name of this action group
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Actions.WorksheetReusableActionGroup.Clone(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create cloned reusable action group from this action group
            </summary>
            <param name="range">Specified new range to apply this action group</param>
            <returns>New reusable action group cloned from this action group</returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.WorksheetReusableActionGroup.Actions">
            <summary>
            All reusable actions stored in this list will be performed together.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetRangeStyleAction">
            <summary>
            Action for set styles to specified range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeStyleAction.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Create an action to set styles into specified range
            </summary>
            <param name="row">Zero-based number of start row</param>
            <param name="col">Zero-based number of start column</param>
            <param name="rows">Number of rows in the range</param>
            <param name="cols">Number of columns in the range</param>
            <param name="style">Styles to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeStyleAction.#ctor(System.String,unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Create an action to set styles into specified range
            </summary>
            <param name="address">Address to locate the cell or range on spreadsheet (Cannot specify named range for this method)</param>
            <param name="style">Styles to be set</param>
            <exception cref="T:unvell.ReoGrid.InvalidAddressException">Throw if specified address or name is invalid</exception>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeStyleAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Create an action that perform set styles to specified range
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="style">Style to be set to specified range</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeStyleAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeStyleAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeStyleAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeStyleAction.Clone(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create an action copy with different range from this reusable action
            </summary>
            <param name="range">Specified new range to appiled created action</param>
            <returns>Action copy created from this action</returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.SetRangeStyleAction.Style">
            <summary>
            Styles to be set
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.RemoveRangeStyleAction">
            <summary>
            Remove style from specified range action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeStyleAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Create instance for action to remove style from specified range.
            </summary>
            <param name="range">Styles from this specified range to be removed</param>
            <param name="flag">Style flag indicates what type of style should be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeStyleAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeStyleAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeStyleAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.RemoveRangeStyleAction.Flag">
            <summary>
            Style flag indicates what type of style to be handled.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.StepRangeFontSizeAction">
            <summary>
            Make font size larger or smaller action.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.StepRangeFontSizeAction.#ctor(unvell.ReoGrid.ReoGridRange,System.Boolean)">
            <summary>
            Create instance for this action with specified range and enlarge flag.
            </summary>
            <param name="range">Specified range to apply this action</param>
            <param name="enlarge">True to set text larger, false to set smaller</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.StepRangeFontSizeAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.StepRangeFontSizeAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.StepRangeFontSizeAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.StepRangeFontSizeAction.Enlarge">
            <summary>
            True if this action making font size larger.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.InsertRowsAction">
            <summary>
            Insert rows action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for InsertRowsAction
            </summary>
            <param name="row">Index of row to insert</param>
            <param name="count">Number of rows to be inserted</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertRowsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertRowsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertRowsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.InsertRowsAction.Row">
            <summary>
            Index of row to insert empty rows. Set to Control.RowCount to 
            append columns at end of rows.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.InsertRowsAction.Count">
            <summary>
            Number of empty rows to be inserted
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.InsertColumnsAction">
            <summary>
            Insert columns action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for InsertColumnsAction
            </summary>
            <param name="column">Index of column to insert</param>
            <param name="count">Number of columns to be insertted</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertColumnsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertColumnsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.InsertColumnsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.InsertColumnsAction.Column">
            <summary>
            Index of column to insert new columns. Set to Control.ColCount to
            append columns at end of columns.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.InsertColumnsAction.Count">
            <summary>
            Number of columns to be inserted
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.RemoveRowsAction">
            <summary>
            Remove rows actions
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for RemoveRowsAction
            </summary>
            <param name="row">Index of row start to remove</param>
            <param name="rows">Number of rows to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRowsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRowsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRowsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.RemoveColumnsAction">
            <summary>
            Remove columns action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for RemoveColumnsAction
            </summary>
            <param name="column">Index of column start to remove</param>
            <param name="count">Number of columns to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveColumnsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveColumnsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveColumnsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetRowsHeightAction">
            <summary>
            Set height of row action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRowsHeightAction.#ctor(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Create instance for SetRowsHeightAction
            </summary>
            <param name="row">Index of row start to set</param>
            <param name="count">Number of rows to be set</param>
            <param name="height">New height to set to specified rows</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRowsHeightAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRowsHeightAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRowsHeightAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.SetRowsHeightAction.Height">
            <summary>
            Height to be set
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetColsWidthAction">
            <summary>
            Action for adjusting columns width
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetColumnsWidthAction">
            <summary>
            Action for adjusting columns width
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetColumnsWidthAction.#ctor(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Create instance for SetColsWidthAction
            </summary>
            <param name="col">Index of column start to set</param>
            <param name="count">Number of columns to be set</param>
            <param name="width">Width of column to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetColumnsWidthAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetColumnsWidthAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetColumnsWidthAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.SetColumnsWidthAction.Width">
            <summary>
            Width to be set
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetColsWidthAction.#ctor(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Create instance for SetColsWidthAction
            </summary>
            <param name="col">Index of column start to set</param>
            <param name="count">Number of columns to be set</param>
            <param name="width">Width of column to be set</param>
        </member>
        <member name="T:unvell.ReoGrid.Actions.HideRowsAction">
            <summary>
            Hide specified rows action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to hide specified rows
            </summary>
            <param name="row"></param>
            <param name="count"></param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideRowsAction.Do">
            <summary>
            Do action to hide specified rows
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideRowsAction.Undo">
            <summary>
            Undo action to show hidden rows
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideRowsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.UnhideRowsAction">
            <summary>
            Action to unhide specified rows 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to show specified rows
            </summary>
            <param name="row">number of row to start unhidden</param>
            <param name="count">number of rows to be unhidden</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideRowsAction.Do">
            <summary>
            Do action to show specified hidden rows
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideRowsAction.Undo">
            <summary>
            Undo action to hide visible rows
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideRowsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>firendly name of this action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.HideColumnsAction">
            <summary>
            Action to hide specified columns
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to hide specified columns
            </summary>
            <param name="col">zero-based number of column to start hide columns</param>
            <param name="count">number of columns to be hidden</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideColumnsAction.Do">
            <summary>
            Perform action to hide specified columns
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideColumnsAction.Undo">
            <summary>
            Undo action to show hidden columns
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.HideColumnsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.UnhideColumnsAction">
            <summary>
            Unhide specified columns action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to show hidden columns
            </summary>
            <param name="col">Number of column start to unhide</param>
            <param name="count">Number of columns to be unhidden</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideColumnsAction.Do">
            <summary>
            Do action to show hidden columns
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideColumnsAction.Undo">
            <summary>
            Do action to hide specified visible columns
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnhideColumnsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetRangeBorderAction">
            <summary>
            Action to set borders to specified range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeBorderAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions,unvell.ReoGrid.RangeBorderStyle)">
            <summary>
            Create action that perform setting border to a range
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="pos">Position of range to set border</param>
            <param name="styles">Style of border</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeBorderAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.RangeBorderInfo[])">
            <summary>
            Create action that perform setting border to a range
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="styles">Style of border</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeBorderAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeBorderAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeBorderAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.SetRangeBorderAction.Borders">
            <summary>
            Borders to be set
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.RemoveRangeBorderAction">
            <summary>
            Action of Removing borders from specified range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeBorderAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions)">
            <summary>
            Create instance for SetRangeBorderAction with specified range and border styles.
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="pos">Position of range to set border</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeBorderAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeBorderAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeBorderAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.RemoveRangeBorderAction.BorderPos">
            <summary>
            Get or set the position of borders to be removed
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.MergeRangeAction">
            <summary>
            Merge range action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MergeRangeAction.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create instance for MergeRangeAction with specified range
            </summary>
            <param name="range">The range to be merged</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MergeRangeAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MergeRangeAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MergeRangeAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.UnmergeRangeAction">
            <summary>
            Unmerge range action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnmergeRangeAction.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create instance for UnmergeRangeAction with specified range
            </summary>
            <param name="range">The range to be unmerged</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnmergeRangeAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnmergeRangeAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.UnmergeRangeAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetCellDataAction">
            <summary>
            Set data of cell action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetCellDataAction.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Create SetCellValueAction with specified index of row and column
            </summary>
            <param name="row">index of row to set data</param>
            <param name="col">index of column to set data</param>
            <param name="data">data to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetCellDataAction.#ctor(unvell.ReoGrid.ReoGridPos,System.Object)">
            <summary>
            Create SetCellValueAction with specified index of row and column
            </summary>
            <param name="pos">position to locate the cell to be set</param>
            <param name="data">data to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetCellDataAction.#ctor(System.String,System.Object)">
            <summary>
            Create action to set cell data
            </summary>
            <param name="address">address to locate specified cell</param>
            <param name="data">data to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetCellDataAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetCellDataAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetCellDataAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.SetCellDataAction.Row">
            <summary>
            Index of row to set data
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.SetCellDataAction.Col">
            <summary>
            Index of column to set data
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.SetCellDataAction.Data">
            <summary>
            Data of cell
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetRangeDataFormatAction">
            <summary>
            Set range data format action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataFormatAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Create instance for SetRangeDataFormatAction
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="format">Format type of cell to be set</param>
            <param name="dataFormatArgs">Argument belongs to format type to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataFormatAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataFormatAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataFormatAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetRangeDataAction">
            <summary>
            Create action to set data into specified range of spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataAction.#ctor(unvell.ReoGrid.ReoGridRange,System.Object[0:,0:])">
            <summary>
            Create action to set data into specified range of spreadsheet
            </summary>
            <param name="range">range to set specified data</param>
            <param name="data">data to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataAction.Do">
            <summary>
            Do action to set data into specified range of spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataAction.Undo">
            <summary>
            Undo action to remove data which has been set into specified range of spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetRangeDataAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.RemoveRangeDataAction">
            <summary>
            Action to remove data from specified range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeDataAction.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create action to remove data from specified range
            </summary>
            <param name="range">data from cells in this range will be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeDataAction.Do">
            <summary>
            Do action to remove data from specified range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeDataAction.Undo">
            <summary>
            Undo action to restore removed data
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveRangeDataAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.MoveRangeAction">
            <summary>
            Action to move specified range from a position to another position
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MoveRangeAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Construct this action to move specified range from a position to another position
            </summary>
            <param name="fromRange">range to be moved</param>
            <param name="toPosition">position to be moved to</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MoveRangeAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MoveRangeAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.MoveRangeAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.MoveRangeAction.ContentFlags">
            <summary>
            Specifies the content to be moved: data, borders and styles.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.MoveRangeAction.FromRange">
            <summary>
            Range to be moved
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.MoveRangeAction.ToPosition">
            <summary>
            Position that range will be moved to
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.CopyRangeAction">
            <summary>
            Action to copy the specified range from a position to another position
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CopyRangeAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Construct this action to move specified range from a position to another position
            </summary>
            <param name="fromRange">range to be moved</param>
            <param name="toPosition">position to be moved to</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CopyRangeAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CopyRangeAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CopyRangeAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.CopyRangeAction.ContentFlags">
            <summary>
            Specifies the content to be moved: data, borders and styles.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.CopyRangeAction.FromRange">
            <summary>
            Range to be moved
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.CopyRangeAction.ToPosition">
            <summary>
            Position that range will be moved to
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.SetPartialGridAction">
            <summary>
            Action to set partial grid
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetPartialGridAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PartialGrid)">
            <summary>
            Create action to set partial grid
            </summary>
            <param name="range">target range to set partial grid</param>
            <param name="data">partial grid to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetPartialGridAction.Do">
            <summary>
            Do action to set partial grid
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetPartialGridAction.Undo">
            <summary>
            Undo action to restore set partial grid 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.SetPartialGridAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RGSetPartialGridAction.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.PartialGrid)">
            <summary>
            Create action to set partial grid.
            </summary>
            <param name="range">Range to set grid.</param>
            <param name="data">Data of partial grid to be set.</param>
        </member>
        <member name="T:unvell.ReoGrid.Actions.CreateAutoFilterAction">
            <summary>
            Action to create column filter
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CreateAutoFilterAction.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create action to create column filter
            </summary>
            <param name="range">filter range</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CreateAutoFilterAction.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create action to create column filter
            </summary>
            <param name="startColumn">zero-based number of column begin to create filter</param>
            <param name="endColumn">zero-based number of column end to create filter</param>
            <param name="titleRows">number of rows as title rows will not be included in filter and sort range</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CreateAutoFilterAction.Undo">
            <summary>
            Undo action to remove column filter that is created by this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CreateAutoFilterAction.Do">
            <summary>
            Do action to create column filter
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CreateAutoFilterAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.CreateAutoFilterAction.StartColumn">
            <summary>
            Zero-based number of column to start create filter
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.CreateAutoFilterAction.EndColumn">
            <summary>
            Zero-based number of column to end create filter
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.CreateAutoFilterAction.TitleRows">
            <summary>
            Indicates how many title rows exist on the spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.CreateAutoFilterAction.AutoColumnFilter">
            <summary>
            Get auto column filter instance created by this action. (Will be null before doing action)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.BaseOutlineAction">
            <summary>
            Base class for all classes of outline actions
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.BaseOutlineAction.#ctor(unvell.ReoGrid.RowOrColumn)">
            <summary>
            Create base outline action instance
            </summary>
            <param name="rowOrColumn">Flag to specify row or column</param>
        </member>
        <member name="P:unvell.ReoGrid.Actions.BaseOutlineAction.RowOrColumn">
            <summary>
            Specify row or column outline
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.OutlineAction">
            <summary>
            Base class for all classes of single outline action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.OutlineAction.#ctor(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create base outline action instance
            </summary>
            <param name="rowOrColumn">Flag to specify row or column</param>
            <param name="start">Number of line to start add outline</param>
            <param name="count">Number of lines to be added into this outline</param>
        </member>
        <member name="P:unvell.ReoGrid.Actions.OutlineAction.Start">
            <summary>
            Number of line of start position to outilne
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Actions.OutlineAction.Count">
            <summary>
            Number of lines does outline include
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.AddOutlineAction">
            <summary>
            Add outline action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.AddOutlineAction.#ctor(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create action to add outline
            </summary>
            <param name="rowOrColumn">Row or column to be added</param>
            <param name="start">Number of line to start add outline</param>
            <param name="count">Number of lines to be added into this outline</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.AddOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.AddOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.AddOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.RemoveOutlineAction">
            <summary>
            Remove outline action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveOutlineAction.#ctor(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create action instance to remove outline
            </summary>
            <param name="rowOrColumn">Row or column to find specified outline</param>
            <param name="start">Number of line of specified outline</param>
            <param name="count">Number of lines of specified outline</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.RemoveOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="P:unvell.ReoGrid.Actions.RemoveOutlineAction.RemovedOutline">
            <summary>
            Instance of removed outline if operation was successfully
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Actions.CollapseOutlineAction">
            <summary>
            Action to collapse outline
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CollapseOutlineAction.#ctor(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create action to collapse outline
            </summary>
            <param name="rowOrColumn">Row or column to find specified outline</param>
            <param name="start">Number of line of specified outline</param>
            <param name="count">Number of lines of specified outline</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CollapseOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CollapseOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.CollapseOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.ExpandOutlineAction">
            <summary>
            Action to collapse outline
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ExpandOutlineAction.#ctor(unvell.ReoGrid.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create action instance to expand outline
            </summary>
            <param name="rowOrColumn">Row or column to find specified outline</param>
            <param name="start">Number of line of specified outline</param>
            <param name="count">Number of lines of specified outline</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ExpandOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ExpandOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ExpandOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:unvell.ReoGrid.Actions.ClearOutlineAction">
            <summary>
            Action to clear all outlines
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ClearOutlineAction.#ctor(unvell.ReoGrid.RowOrColumn)">
            <summary>
            Create action to clear all outlines on specified range
            </summary>
            <param name="rowOrColumn">The range to clear outlines (row, column or both row and column)</param>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ClearOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ClearOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Actions.ClearOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:unvell.ReoGrid.CellTypes.CellTypesManager">
            <summary>
            Manage the collection of available cell types 
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.CellTypes.CellTypesManager.AvailableCellTypes">
            <summary>
            Get the available collection of cell types
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.CellTypes.ICellBody">
            <summary>
            Cell body interface
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnSetup(unvell.ReoGrid.ReoGridCell)">
            <summary>
            This method invoked when cell body set into a cell.
            </summary>
            <param name="cell">The cell instance to load this body.</param>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnBoundsChanged">
            <summary>
            This method invoked when body bounds changed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.AutoCaptureMouse">
            <summary>
            Determine whether or not to allow capture the mouse moving after mouse button pressed inside the body bounds.
            </summary>
            <returns>Return true to capture mouse after mouse down; Otherwise return false to do nothing.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnMouseDown(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse button pressed inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnMouseMove(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse has been moved inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnMouseUp(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse button released inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnMouseEnter(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse moved enter the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnMouseLeave(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse moved out from the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnMouseWheel(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse scrolled inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnKeyDown(unvell.ReoGrid.Interaction.KeyCode)">
            <summary>
            This method will be invoked when any key pressed when body being focused.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>Return true if event has been handled inside the body bounds; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnKeyUp(unvell.ReoGrid.Interaction.KeyCode)">
            <summary>
            This method will be invoked when any key released on this body
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnPaint(unvell.ReoGrid.Rendering.CellDrawingContext)">
            <summary>
            This method will be invoked when cell body is required to repaint on worksheet.
            </summary>
            <param name="dc">Drawing context used to paint the cell body.</param>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnStartEdit">
            <summary>
            This method will be invoked when the owner cell of this body begin to edit (Changing to editing mode).
            </summary>
            <returns>Return true to allow editing; Otherwise return false to abort editing operation.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnEndEdit(System.Object)">
            <summary>
            This method will be invoked when the owner cell of this body finished edit.
            </summary>
            <param name="data">The data of user inputted.</param>
            <returns>Data used to be set into the cell. If don't want to change user data, return the data from method parameter.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnGotFocus">
            <summary>
            This method invoked when cell getting focus.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnLostFocus">
            <summary>
            This method invoked when cell losing focus.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.OnSetData(System.Object)">
            <summary>
            This method invoked when cell data was updated.
            </summary>
            <param name="data">The data will be set into the cell.</param>
            <returns>Return the new data used to set into the cell.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.ICellBody.GetData">
            <summary>
            This method will be invoked when the data of owner cell required to be accessed.
            </summary>
            <returns>Return data from owner cell.</returns>
        </member>
        <member name="P:unvell.ReoGrid.CellTypes.ICellBody.Bounds">
            <summary>
            Get or set the body bounds (relative position to cell).
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.CellTypes.CellBody">
            <summary>
            Cell body
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnSetup(unvell.ReoGrid.ReoGridCell)">
            <summary>
            When the body set into a cell
            </summary>
            <param name="cell">Current owner cell</param>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnBoundsChanged">
            <summary>
            Invoked when body boundary has been changed
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.AutoCaptureMouse">
            <summary>
            Determine whether or not to allow capture the mouse when mouse down inside this body
            </summary>
            <returns>true to allow caption, false to abort capture</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnMouseDown(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse button pressed inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnMouseMove(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse has been moved inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnMouseUp(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            This method will be invoked when any key released on this body
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnMouseEnter(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            Invoked when mouse moved enter this body
            </summary>
            <param name="e">mouse event argument</param>
            <returns>true if event has been handled inside this body, otherwise false to recall built-in operations</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnMouseLeave(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            Invoked when mouse moved out from this body
            </summary>
            <param name="e">mouse event argument</param>
            <returns>true if event has been handled inside this body, otherwise false to recall built-in operations</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnMouseWheel(unvell.ReoGrid.Events.CellMouseEventArgs)">
            <summary>
            Invoked when mouse scrolled inside this body
            </summary>
            <param name="e">mouse event argument</param>
            <returns>true if event has been handled inside this body, otherwise false to recall built-in operations</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnKeyDown(unvell.ReoGrid.Interaction.KeyCode)">
            <summary>
            Invoked when any key pressed on this body
            </summary>
            <param name="e">mouse event argument</param>
            <returns>true if event has been handled inside this body, otherwise false to recall built-in operations</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnKeyUp(unvell.ReoGrid.Interaction.KeyCode)">
            <summary>
            Invoked when any key released on this body
            </summary>
            <param name="e">mouse event argument</param>
            <returns>true if event has been handled inside this body, otherwise false to recall built-in operations</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnPaint(unvell.ReoGrid.Rendering.CellDrawingContext)">
            <summary>
            Paint the content of body.
            </summary>
            <param name="dc">ReoGrid common drawing context</param>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnStartEdit">
            <summary>
            Invoked when cell of this body begin to edit (Enter edit mode)
            </summary>
            <returns>true to allow edit, otherwise false to abort edit</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnEndEdit(System.Object)">
            <summary>
            Invoked when cell of this body finish edit. 
            Return data to be set into spreadsheet instead of user inputted.
            </summary>
            <param name="data">user inputted data</param>
            <returns>new data to be into spreadsheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnGotFocus">
            <summary>
            Invoked when cell get focus
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnLostFocus">
            <summary>
            Invoked when cell lost focus
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.OnSetData(System.Object)">
            <summary>
            Invoked when cell data updating
            </summary>
            <param name="data">data to be updated</param>
            <returns>new data to replace the input date</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.CellBody.GetData">
            <summary>
            Invoked when spreadsheet requires to get data from the cell of this body
            </summary>
            <returns>data from cell</returns>
        </member>
        <member name="P:unvell.ReoGrid.CellTypes.CellBody.Cell">
            <summary>
            Owner cell contains this body
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.CellTypes.CellBody.Bounds">
            <summary>
            Boundaries in pixel of body in cell
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.CellTypes.IHeaderBody">
            <summary>
            Represent the interface of row and column header body
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.IHeaderBody.OnPaint(unvell.ReoGrid.Rendering.CellDrawingContext,unvell.ReoGrid.Graphics.Size)">
            <summary>
            Onwer drawing
            </summary>
            <param name="dc">Drawing context</param>
            <param name="headerSize">Header size</param>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.IHeaderBody.OnMouseMove(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Events.WorksheetMouseEventArgs)">
            <summary>
            Mouse move event
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.IHeaderBody.OnMouseDown(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Events.WorksheetMouseEventArgs)">
            <summary>
            Mouse down event
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.IHeaderBody.OnDataChange(System.Int32,System.Int32)">
            <summary>
            Event when data in any cells on this header is changed
            </summary>
            <param name="startRow">Zero-based number of row of changed cells</param>
            <param name="endRow">Zero-based number of column of changed cells</param>
        </member>
        <member name="T:unvell.ReoGrid.CellTypes.HeaderBody">
            <summary>
            Represent the interface of row and column header body
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.HeaderBody.OnPaint(unvell.ReoGrid.Rendering.CellDrawingContext,unvell.ReoGrid.Graphics.Size)">
            <summary>
            Onwer drawing
            </summary>
            <param name="dc">Drawing context</param>
            <param name="headerSize">Header size</param>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.HeaderBody.OnMouseMove(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Events.WorksheetMouseEventArgs)">
            <summary>
            Mouse move event
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.HeaderBody.OnMouseDown(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Events.WorksheetMouseEventArgs)">
            <summary>
            Mouse down event
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:unvell.ReoGrid.CellTypes.HeaderBody.OnDataChange(System.Int32,System.Int32)">
            <summary>
            Event when data in any cells on this header is changed
            </summary>
            <param name="startRow">Zero-based number of row of changed cells</param>
            <param name="endRow">Zero-based number of column of changed cells</param>
        </member>
        <member name="T:unvell.ReoGrid.Chart.ChartDrawingEventArgs">
            <summary>
            Event arguments for drawing context in Chart
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.DrawingEventArgs.Context">
            <summary>
            Get the platform no-associated drawing context instance.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.DrawingEventArgs.Bounds">
            <summary>
            Get the bounds of target rendering region.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Chart.ChartDrawingEventArgs.Chart">
            <summary>
            Get the instance of current chart
            </summary>
        </member>
        <member name="M:unvell.Common.ActionManager.Do(unvell.Common.IAction,System.Boolean,System.Boolean)">
            <summary>
            Do specified action
            </summary>
            <param name="action">action to be performed</param>
            <param name="perform">true to perform immediately, false to add into stack only</param>
            <param name="isCanUndo">specifies that whether the action can be undone, 
            sometimes an action might not necessary to be undone even it implements the 
            IUndoable interface.</param>
        </member>
        <member name="M:unvell.Common.ActionManager.Reset">
            <summary>
            Clear current action stack
            </summary>
        </member>
        <member name="P:unvell.Common.ActionManager.UndoStack">
            <summary>
            Get collection of undo action list
            </summary>
        </member>
        <member name="P:unvell.Common.ActionManager.RedoStack">
            <summary>
            Get collection of redo action list
            </summary>
        </member>
        <member name="T:unvell.Common.ActionEventArgs">
            <summary>
            Action event argument
            </summary>
        </member>
        <member name="M:unvell.Common.ActionEventArgs.#ctor(unvell.Common.IAction,unvell.Common.ActionBehavior)">
            <summary>
            Construct an argument with specified action and behavior flag
            </summary>
            <param name="action">action is currently performing</param>
            <param name="behavior">behavior flag of current operation</param>
        </member>
        <member name="P:unvell.Common.ActionEventArgs.Action">
            <summary>
            The action is currently performing
            </summary>
        </member>
        <member name="P:unvell.Common.ActionEventArgs.Behavior">
            <summary>
            The behavior of current action performing (one of do/undo/redo)
            </summary>
        </member>
        <member name="P:unvell.Common.ActionEventArgs.Cancel">
            <summary>
            Get or set the Cancel flag to decide whether or not to cancel this operation
            </summary>
        </member>
        <member name="T:unvell.Common.ActionBehavior">
            <summary>
            Behavior flag for argument of ActionPerformmed event
            </summary>
        </member>
        <member name="F:unvell.Common.ActionBehavior.Do">
            <summary>
            Do action (action is firstly done)
            </summary>
        </member>
        <member name="F:unvell.Common.ActionBehavior.Redo">
            <summary>
            Redo action (action is redone by ActionManager)
            </summary>
        </member>
        <member name="F:unvell.Common.ActionBehavior.Undo">
            <summary>
            Undo action (action is undone by ActionManager)
            </summary>
        </member>
        <member name="T:unvell.Common.ActionGroup">
            <summary>
            Action group is used to perform several actions together during one time operation,
            For example there is two actions:
            <ol>
            <li>expend spreadsheet action</li>
            <li>copy data action</li>
            </ol>
            Sometimes it is necessary to perform these two actions together, they are should undo 
            together, in this case, create an ActionGroup and add them into the group, then invoke
            the 'DoAction' method of 'ActionManager' by passing this action group object.
            </summary>
        </member>
        <member name="M:unvell.Common.ActionGroup.#ctor(System.String,System.Collections.Generic.List{unvell.Common.IAction})">
            <summary>
            Construct action group by specified name, and the collection of action to perform together
            </summary>
            <param name="name">friendly name of this group</param>
            <param name="actions">collection of action to be performed</param>
        </member>
        <member name="M:unvell.Common.ActionGroup.#ctor(System.String)">
            <summary>
            Construct action group by specified name, and the collection of action to perform together
            </summary>
            <param name="name">friendly name of this group</param>
        </member>
        <member name="M:unvell.Common.ActionGroup.Do">
            <summary>
            Do this action group (All actions in this group will be done)
            </summary>
        </member>
        <member name="M:unvell.Common.ActionGroup.Undo">
            <summary>
            Undo this action group (All actions in this group will be undone)
            </summary>
        </member>
        <member name="M:unvell.Common.ActionGroup.GetName">
            <summary>
            Get the friendly name of this action group
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.Common.ActionGroup.ToString">
            <summary>
            Convert this action group object into string for displaying
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.Common.ActionGroup.Actions">
            <summary>
            Action list stored in this group
            </summary>
        </member>
        <member name="T:unvell.Common.ActionException">
            <summary>
            Action exception, thrown when an error happened during do/undo/redo an action
            </summary>
        </member>
        <member name="M:unvell.Common.ActionException.#ctor(System.String)">
            <summary>
            Construct an action exception with specified message
            </summary>
            <param name="msg">message to describe this exception</param>
        </member>
        <member name="M:unvell.Common.ActionException.#ctor(unvell.Common.IAction,System.String)">
            <summary>
            Construct an action exception with specified action and message 
            </summary>
            <param name="action">action which causes this exception when do/undo/redo</param>
            <param name="msg">message to describe this exception</param>
        </member>
        <member name="T:unvell.Common.LogLevel">
            <summary>
            Log level
            </summary>
        </member>
        <member name="F:unvell.Common.LogLevel.All">
            <summary>
            All logs
            </summary>
        </member>
        <member name="F:unvell.Common.LogLevel.Trace">
            <summary>
            Trace log
            </summary>
        </member>
        <member name="F:unvell.Common.LogLevel.Debug">
            <summary>
            Debug log
            </summary>
        </member>
        <member name="F:unvell.Common.LogLevel.Info">
            <summary>
            Info log
            </summary>
        </member>
        <member name="F:unvell.Common.LogLevel.Warn">
            <summary>
            Warning log
            </summary>
        </member>
        <member name="F:unvell.Common.LogLevel.Error">
            <summary>
            Error log
            </summary>
        </member>
        <member name="F:unvell.Common.LogLevel.Fatal">
            <summary>
            Fatal error log
            </summary>
        </member>
        <member name="T:unvell.Common.ILogWritter">
            <summary>
            Log writter
            </summary>
        </member>
        <member name="M:unvell.Common.ILogWritter.Log(System.String,System.String)">
            <summary>
            Output log message
            </summary>
            <param name="cat">category name</param>
            <param name="msg">message to be output</param>
        </member>
        <member name="T:unvell.Common.Logger">
            <summary>
            Common logger component
            </summary>
        </member>
        <member name="M:unvell.Common.Logger.RegisterWritter(unvell.Common.ILogWritter)">
            <summary>
            Add an output target
            </summary>
            <param name="writter">writer to be registered</param>
        </member>
        <member name="M:unvell.Common.Logger.Off">
            <summary>
            Turn off log output
            </summary>
        </member>
        <member name="M:unvell.Common.Logger.On">
            <summary>
            Turn on log output
            </summary>
        </member>
        <member name="M:unvell.Common.Logger.Log(System.String,System.String,System.Object[])">
            <summary>
            Output message to log writters
            </summary>
            <param name="cat">category name</param>
            <param name="format">format of log message</param>
            <param name="args">arguments for format</param>
        </member>
        <member name="M:unvell.Common.Logger.Log(System.String,System.String)">
            <summary>
            Output message to log writters
            </summary>
            <param name="cat">category name</param>
            <param name="msg">log message to be output</param>
        </member>
        <member name="M:unvell.Common.Logger.WriteLog(System.String,System.String)">
            <summary>
            Output message to log writters
            </summary>
            <param name="cat">category name</param>
            <param name="msg">log message to be output</param>
        </member>
        <member name="M:unvell.Common.TextFormatHelper.EncodeBool(System.Boolean,System.Boolean)">
            <summary>
            Encode a boolean value into string and compare to the default value, 
            if the value is the same as default value then return null (noting output to xml).
            </summary>
            <param name="p">boolean value to be encoded</param>
            <param name="def">default boolean value used to compare whether the value is same as default</param>
            <returns>encoded string of boolean value</returns>
        </member>
        <member name="T:unvell.Common.Toolkit">
            <summary>
            Common Toolkit
            </summary>
        </member>
        <member name="M:unvell.Common.Toolkit.IsKeyDown(unvell.Common.Win32Lib.Win32.VKey)">
            <summary>
            Check whether or not the specified key is pressed
            </summary>
            <param name="vkey">Windows virtual key</param>
            <returns>true if pressed, otherwise false if not pressed</returns>
        </member>
        <member name="F:unvell.Common.Toolkit.FontSizeList">
            <summary>
            Default font size list
            </summary>
        </member>
        <member name="M:unvell.Common.Win32Lib.Win32.GetParent(System.IntPtr)">
            <summary>
            Retrieves a handle to the specified window's parent or owner.
            To retrieve a handle to a specified ancestor, use the GetAncestor function.
            </summary>
            <param name="hwnd">A handle to the window whose parent window handle is to be retrieved.</param>
            <returns>If the window is a child window, the return value is a handle to the parent window. 
            If the window is a top-level window with the WS_POPUP style, the return value is a handle to the owner window.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            This function typically fails for one of the following reasons:
            <ul><li>The window is a top-level window that is unowned or does not have the WS_POPUP style.</li>
            <li>The owner window has WS_POPUP style.</li></ul></returns>
            <seealso cref="M:unvell.Common.Win32Lib.Win32.GetAncestor(System.IntPtr,System.UInt32)"/>
        </member>
        <member name="M:unvell.Common.Win32Lib.Win32.GetAncestor(System.IntPtr,System.UInt32)">
            <summary>
            Retrieves the handle to the ancestor of the specified window.
            </summary>
            <param name="hwnd">A handle to the window whose ancestor is to be retrieved. 
            If this parameter is the desktop window, the function returns NULL.</param>
            <param name="gaFlags">The ancestor to be retrieved. This parameter can be one of the GAFlag enum.</param>
            <returns></returns>
        </member>
        <member name="M:unvell.Common.Win32Lib.Win32.GetWindow(System.IntPtr,System.UInt32)">
            <summary>
            Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
            </summary>
            <param name="hwnd">A handle to a window.
            The window handle retrieved is relative to this window, based on the value of the uCmd parameter.</param>
            <param name="wCMD">The relationship between the specified window and the window whose handle is to be retrieved.
            This parameter can be one of the following values.</param>
            <returns></returns>
        </member>
        <member name="M:unvell.Common.Win32Lib.Win32.GetWindowPlacement(System.IntPtr,unvell.Common.Win32Lib.Win32.WindowPlacement@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpwndpl">A pointer to the WINDOWPLACEMENT structure that receives the show state and position information. 
            Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT).
            GetWindowPlacement fails if lpwndpl-> length is not set correctly.</param>
            <returns>If the function succeeds, the return value is true.
            If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:unvell.Common.Win32Lib.Win32.GetWindowRgn(System.IntPtr,System.Drawing.Region@)">
            <summary>
            The GetWindowRgn function obtains a copy of the window region of a window.
            The window region of a window is set by calling the SetWindowRgn function. 
            The window region determines the area within the window where the system
            permits drawing. The system does not display any portion of a window that
            lies outside of the window region
            </summary>
            <param name="hWnd">Handle to the window whose window region is to be obtained.</param>
            <param name="hRgn">Handle to the region which will be modified to represent the window region.</param>
            <returns>The return value specifies the type of the region that the function obtains. It can be one of the following values.
            NULLREGION - The region is empty.
            SIMPLEREGION - The region is a single rectangle.
            COMPLEXREGION - The region is more than one rectangle.
            ERROR - The specified window does not have a region, 
            				or an error occurred while attempting to return the region.</returns>
        </member>
        <member name="M:unvell.Common.Win32Lib.Win32.DwmGetWindowAttribute(System.IntPtr,System.Int32,System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Retrieves the current value of a specified attribute applied to a window.
            </summary>
            <param name="hwnd"></param>
            <param name="dwAttribute"></param>
            <param name="pvAttribute"></param>
            <param name="cbAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.Common.Win32Lib.Win32.GetVersionEx(unvell.Common.Win32Lib.Win32.OSVersionInfo@)">
            <summary>
            Retrieves information about the current operating system.
            </summary>
            <param name="lpVersionInfo">version info</param>
            <returns>true if execution is successful</returns>
        </member>
        <member name="T:unvell.Common.Win32Lib.Win32.WMessages">
            <summary>
            Virtual Messages
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the z-order.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window.
            This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position.
            This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position.
            This value is similar to SW_SHOWNORMAL, except the window is not activated.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.ShowWindowCmd.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, 
            the system restores it to its original size and position. 
            An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="T:unvell.Common.Win32Lib.Win32.WindowPlacement">
            <summary>
            Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.WindowPlacement.length">
            <summary>
            The length of the structure, in bytes. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT).
            GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.WindowPlacement.flags">
            <summary>
            The flags that control the position of the minimized window and the method by which the window is restored. This member can be one or more of the following values.
            Value	Meaning 
            WPF_ASYNCWINDOWPLACEMENT	0x0004	If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            WPF_RESTORETOMAXIMIZED		0x0002	The restored window will be maximized, regardless of whether it was maximized before it was minimized. This setting is only valid the next time the window is restored. It does not change the default restoration behavior.
            																	This flag is only valid when the SW_SHOWMINIMIZED value is specified for the showCmd member.
            WPF_SETMINPOSITION				0x0001	The coordinates of the minimized window may be specified.
            																	This flag must be specified if the coordinates are set in the ptMinPosition member.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.WindowPlacement.showCmd">
            <summary>
            The current show state of the window. This member can be one of the following values.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.WindowPlacement.ptMinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.WindowPlacement.ptMaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.WindowPlacement.rcNormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.GAFlag.GA_PARENT">
            <summary>
            Retrieves the parent window. This does not include the owner, as it does with the GetParent function.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.GAFlag.GA_ROOT">
            <summary>
            Retrieves the root window by walking the chain of parent windows.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.GAFlag.GA_ROOTOWNER">
            <summary>
            Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.
            </summary>
        </member>
        <member name="T:unvell.Common.Win32Lib.Win32.DwmWindowAttribute">
            <summary>
            Flags used by the DwmGetWindowAttribute and DwmSetWindowAttribute
            functions to specify window attributes for non-client rendering.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_NCRENDERING_ENABLED">
            <summary>
            Use with DwmGetWindowAttribute. Discovers whether non-client rendering is enabled. 
            The retrieved value is of type BOOL. TRUE if non-client rendering is enabled; 
            otherwise, FALSE.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_NCRENDERING_POLICY">
            <summary>
            Use with DwmSetWindowAttribute. Sets the non-client rendering policy. 
            The pvAttribute parameter points to a value from the DWMNCRENDERINGPOLICY enumeration.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_TRANSITIONS_FORCEDISABLED">
            <summary>
            Use with DwmSetWindowAttribute. Enables or forcibly disables DWM transitions. 
            The pvAttribute parameter points to a value of TRUE to disable transitions or FALSE to enable transitions.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_ALLOW_NCPAINT">
            <summary>
            Use with DwmSetWindowAttribute. Enables content rendered in the non-client area to be visible on the frame drawn by DWM. 
            The pvAttribute parameter points to a value of TRUE to enable content rendered in the non-client area to be visible on the frame; otherwise, it points to FALSE.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_CAPTION_BUTTON_BOUNDS">
            <summary>
            Use with DwmGetWindowAttribute. Retrieves the bounds of the caption button area in the window-relative space. 
            The retrieved value is of type RECT.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_NONCLIENT_RTL_LAYOUT">
            <summary>
            Use with DwmSetWindowAttribute. Specifies whether non-client content is right-to-left (RTL) mirrored. 
            The pvAttribute parameter points to a value of TRUE if the non-client content is right-to-left (RTL) mirrored; otherwise, it points to FALSE.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_FORCE_ICONIC_REPRESENTATION">
            <summary>
            Use with DwmSetWindowAttribute. Forces the window to display an iconic thumbnail or 
            peek representation (a static bitmap), even if a live or snapshot representation of the window is available. 
            This value normally is set during a window's creation and not changed throughout the window's lifetime. 
            Some scenarios, however, might require the value to change over time. 
            The pvAttribute parameter points to a value of TRUE to require a iconic thumbnail or peek representation; 
            otherwise, it points to FALSE.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_FLIP3D_POLICY">
            <summary>
            Use with DwmSetWindowAttribute. Sets how Flip3D treats the window. 
            The pvAttribute parameter points to a value from the DWMFLIP3DWINDOWPOLICY enumeration.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_EXTENDED_FRAME_BOUNDS">
            <summary>
            Use with DwmGetWindowAttribute. Retrieves the extended frame bounds rectangle in screen space. 
            The retrieved value is of type RECT.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_HAS_ICONIC_BITMAP">
            <summary>
            Use with DwmSetWindowAttribute. The window will provide a bitmap for use by DWM as an iconic thumbnail or 
            peek representation (a static bitmap) for the window. DWMWA_HAS_ICONIC_BITMAP can be specified 
            with DWMWA_FORCE_ICONIC_REPRESENTATION. DWMWA_HAS_ICONIC_BITMAP normally is set during a window's 
            creation and not changed throughout the window's lifetime. Some scenarios, however, might require 
            the value to change over time. The pvAttribute parameter points to a value of TRUE to inform DWM that 
            the window will provide an iconic thumbnail or peek representation; otherwise, it points to FALSE.
            Windows Vista and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_DISALLOW_PEEK">
            <summary>
            Use with DwmSetWindowAttribute. Do not show peek preview for the window. The peek view shows a 
            full-sized preview of the window when the mouse hovers over the window's thumbnail in the taskbar. 
            If this attribute is set, hovering the mouse pointer over the window's thumbnail 
            dismisses peek (in case another window in the group has a peek preview showing). 
            The pvAttribute parameter points to a value of TRUE to prevent peek functionality or FALSE to allow it.
            Windows Vista and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_EXCLUDED_FROM_PEEK">
            <summary>
            Use with DwmSetWindowAttribute. Prevents a window from fading to a glass sheet when peek is invoked. 
            The pvAttribute parameter points to a value of TRUE to prevent the window from fading during another
            window's peek or FALSE for normal behavior.
            Windows Vista and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_CLOAK">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_CLOAKED">
            <summary>
            Use with DwmGetWindowAttribute. If the window is cloaked, provides one of the following values 
            explaining why:
            Name									Value			Meaning
            DWM_CLOAKED_APP				0x0000001	The window was cloaked by its owner application.
            DWM_CLOAKED_SHELL			0x0000002	The window was cloaked by the Shell.
            DWM_CLOAKED_INHERITED	0x0000004	The cloak value was inherited from its owner window.
            Windows 7 and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_FREEZE_REPRESENTATION">
            <summary>
            Use with DwmSetWindowAttribute. Freeze the window's thumbnail image with its current visuals. 
            Do no further live updates on the thumbnail image to match the window's contents.
            Windows 7 and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.DwmWindowAttribute.DWMWA_LAST">
            <summary>
            The maximum recognized DWMWINDOWATTRIBUTE value, used for validation purposes.
            </summary>
        </member>
        <member name="T:unvell.Common.Win32Lib.Win32.OSVersionInfo">
            <summary>
            Contains operating system version information.
            The information includes major and minor version numbers, 
            a build number, a platform identifier, and descriptive text about the 
            operating system. This structure is used with the GetVersionEx function.
            To obtain additional version information, use the OSVERSIONINFOEX 
            structure with GetVersionEx instead.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.OSVersionInfo.dwOSVersionInfoSize">
            <summary>
            The size of this data structure, in bytes. 
            Set this member to sizeof(OSVERSIONINFO).
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.OSVersionInfo.dwMajorVersion">
            <summary>
            The major version number of the operating system. 
            For more information, see Remarks.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.OSVersionInfo.dwMinorVersion">
            <summary>
            The minor version number of the operating system. 
            For more information, see Remarks.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.OSVersionInfo.dwBuildNumber">
            <summary>
            The build number of the operating system.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.OSVersionInfo.dwPlatformId">
            <summary>
            The operating system platform. This member can be the following value.
            VER_PLATFORM_WIN32_NT = 2 : The operating system is Windows 7,
            Windows Server 2008, Windows Vista, Windows Server 2003, Windows XP,
            or Windows 2000.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.OSVersionInfo.szCSDVersion">
            <summary>
            A null-terminated string, such as "Service Pack 3", that indicates
            the latest Service Pack installed on the system. 
            If no Service Pack has been installed, the string is empty.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.Modifiers.MOD_ALT">
            <summary>
            Either ALT key must be held down.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.Modifiers.MOD_CONTROL">
            <summary>
            Either CTRL key must be held down.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.Modifiers.MOD_SHIFT">
            <summary>
            Either SHIFT key must be held down.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.Modifiers.MOD_WIN">
            <summary>
            Either WINDOWS key was held down. These keys are labeled with the Windows logo. 
            Keyboard shortcuts that involve the WINDOWS key are reserved for use by the operating system.
            </summary>
        </member>
        <member name="F:unvell.Common.Win32Lib.Win32.Modifiers.MOD_NOREPEAT">
            <summary>
            Changes the hotkey behavior so that the keyboard auto-repeat does not yield multiple hotkey notifications.
            </summary>
            
            <remarks>Windows Vista and Windows XP/2000:  This flag is not supported.</remarks>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridControl">
            <summary>
            ReoGrid Spreadsheet Control
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.CreateMemoryWorkbook">
            <summary>
            Create an instance of ReoGrid workbook in memory.
            The memory workbook is the non-GUI version of ReoGrid screen control, 
            it can do almost all of operations to a real screen control, 
            such as changing data, formulas, styles and borders, loading and saving workbook and worksheets.
            </summary>
            <returns>Instance of memory workbook</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Save(System.String)">
            <summary>
            Save workbook into file
            </summary>
            <param name="path">Full file path to save workbook</param>
            <param name="fileFormat">Specified file format used to save workbook</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Save(System.String,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Save workbook into file
            </summary>
            <param name="path">Full file path to save workbook</param>
            <param name="fileFormat">Specified file format used to save workbook</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Save(System.String,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Save workbook into file
            </summary>
            <param name="path">Full file path to save workbook</param>
            <param name="fileFormat">Specified file format used to save workbook</param>
            <param name="encoding">Encoding used to read plain-text from resource. (Optional)</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Save(System.IO.Stream,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Save workbook into stream with specified format
            </summary>
            <param name="stream">Stream to output data of workbook</param>
            <param name="fileFormat">Specified file format used to save workbook</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Save(System.IO.Stream,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Save workbook into stream with specified format
            </summary>
            <param name="stream">Stream to output data of workbook</param>
            <param name="fileFormat">Specified file format used to save workbook</param>
            <param name="encoding">Encoding used to read plain-text from resource. (Optional)</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Load(System.String)">
            <summary>
            Load workbook from file by specified path.
            </summary>
            <param name="path">Path to open file and read data.</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Load(System.String,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Load workbook from file by specified path.
            </summary>
            <param name="path">Path to open file and read data.</param>
            <param name="fileFormat">Flag used to determine what format should be used to read data from file.</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Load(System.String,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Load workbook from file with specified format
            </summary>
            <param name="path">Path to open file and read data.</param>
            <param name="fileFormat">Flag used to determine what format should be used to read data from file.</param>
            <param name="encoding">Encoding used to read plain-text from resource. (Optional)</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Load(System.IO.Stream,unvell.ReoGrid.IO.FileFormat)">
            <summary>
            Load workbook from stream with specified format.
            </summary>
            <param name="stream">Stream to read data of workbook.</param>
            <param name="fileFormat">Flag used to determine what format should be used to read data from file.</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Load(System.IO.Stream,unvell.ReoGrid.IO.FileFormat,System.Text.Encoding)">
            <summary>
            Load workbook from stream with specified format.
            </summary>
            <param name="stream">Stream to read data of workbook.</param>
            <param name="fileFormat">Flag used to determine what format should be used to read data from file.</param>
            <param name="encoding">Encoding used to read plain-text data from specified stream.</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.CreateWorksheet">
            <summary>
            Create new instance of worksheet with default available name (e.g. Sheet1, Sheet2 ...)
            </summary>
            <returns>Instance of worksheet to be created</returns>
            <remarks>This method creates a new worksheet, but doesn't add it into the collection of worksheet.
            Worksheet will only be available until adding into a workbook, by using these methods:
            <code>InsertWorksheet</code>, <code>Worksheets.Add</code> or <code>Worksheets.Insert</code>
            </remarks>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.CreateWorksheet(System.String)">
            <summary>
            Create new instance of worksheet
            </summary>
            <param name="name">name of new worksheet to be created. 
            If name is null, ReoGrid will find an available name automatically. e.g. 'Sheet1', 'Sheet2'...</param>
            <returns>instance of worksheet to be created</returns>
            <remarks>This method creates a new worksheet, but doesn't add it into the collection of worksheet.
            Worksheet will only be available until adding into a workbook, by using these methods:
            <code>InsertWorksheet</code>, <code>Worksheets.Add</code> or <code>Worksheets.Insert</code>
            </remarks>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.AddWorksheet(unvell.ReoGrid.Worksheet)">
            <summary>
            Add specified worksheet into this workbook
            </summary>
            <param name="sheet">worksheet to be added</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.InsertWorksheet(System.Int32,unvell.ReoGrid.Worksheet)">
            <summary>
            Insert specified worksheet into this workbook
            </summary>
            <param name="index">position of zero-based number of worksheet used to insert specified worksheet</param>
            <param name="sheet">worksheet to be inserted</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.RemoveWorksheet(System.Int32)">
            <summary>
            Remove worksheet from this workbook by specified index
            </summary>
            <param name="index">zero-based number of worksheet to be removed</param>
            <returns>true if specified worksheet can be found and removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.RemoveWorksheet(unvell.ReoGrid.Worksheet)">
            <summary>
            Remove worksheet from this workbook
            </summary>
            <param name="sheet">worksheet to be removed</param>
            <returns>true if specified worksheet can be found and removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.CopyWorksheet(System.Int32,System.Int32,System.String)">
            <summary>
            Create a cloned worksheet and put into specified position
            </summary>
            <param name="index">Index of source worksheet to be copied</param>
            <param name="newIndex">Target index used to insert the copied worksheet</param>
            <param name="newName">Name for new worksheet, set as null to use a default worksheet name e.g. Sheet1, Sheet2...</param>
            <returns>New instance of copid worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.CopyWorksheet(unvell.ReoGrid.Worksheet,System.Int32,System.String)">
            <summary>
            Create a cloned worksheet and put into specified position
            </summary>
            <param name="sheet">Source worksheet to be copied, the worksheet must be already added into this workbook</param>
            <param name="newIndex">Target index used to insert the copied worksheet</param>
            <param name="newName">Name for new worksheet, set as null to use a default worksheet name e.g. Sheet1, Sheet2...</param>
            <returns>New instance of copid worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.MoveWorksheet(System.Int32,System.Int32)">
            <summary>
            Move worksheet from a position to another position
            </summary>
            <param name="index">Worksheet in this position to be moved</param>
            <param name="newIndex">Target position moved to</param>
            <returns>Instance of moved worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.MoveWorksheet(unvell.ReoGrid.Worksheet,System.Int32)">
            <summary>
            Create a cloned worksheet and put into specified position
            </summary>
            <param name="sheet">Instance of worksheet to be moved, the worksheet must be already added into this workbook</param>
            <param name="newIndex">Target position moved to</param>
            <returns>Instance of moved worksheet</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.GetWorksheetIndex(unvell.ReoGrid.Worksheet)">
            <summary>
            Get index of specified worksheet from the collection in this workbook
            </summary>
            <param name="sheet">worksheet to be get</param>
            <returns>zero-based number of worksheet in this workbook's collection</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.GetWorksheetByName(System.String)">
            <summary>
            Find worksheet by specified name
            </summary>
            <param name="name">Name to find worksheet</param>
            <returns>Instance of worksheet that is found by specified name; otherwise return null</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Reset">
            <summary>
            Reset control and workbook (remove all worksheets and put one new)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.DoAction(unvell.ReoGrid.Worksheet,unvell.ReoGrid.Actions.BaseWorksheetAction)">
            <summary>Do specified action. 
            
            An action does the operation as well as undoes for worksheet.
            Actions performed by this method will be appended to action history stack 
            in order to undo, redo and repeat.
            
            There are built-in actions available for many base operations, such as:
              <code>SetCellDataAction</code> - set cell data
              <code>SetRangeDataAction</code> - set data into range
              <code>SetRangeBorderAction</code> - set border to specified range
              <code>SetRangeStyleAction</code> - set styles to specified range
              ...
              
            It is possible to make custom action by inherting BaseWorksheetAction.
            </summary>
            <example>
            ReoGrid uses ActionManager, unvell lightweight undo framework, 
            to implement the Do/Undo/Redo/Repeat method.
            
            To do action:
            <code>
              var action = new SetCellDataAction("B1", 10);
              workbook.DoAction(targetSheet, action);
            </code>
            
            To undo action:
            <code>
              workbook.Undo();
            </code>
            
            To redo action:
            <code>
            	workbook.Redo();
            </code>
            
            To repeat last action:
            <code>
            	workbook.RepeatLastAction(targetSheet, new ReoGridRange("B1:C3"));
            </code>
            
            It is possible to do multiple actions at same time:
            <code>
              var action1 = new SetRangeDataAction(...);
              var action2 = new SetRangeBorderAction(...);
              var action3 = new SetRangeStyleAction(...);
              
            	var actionGroup = new WorksheetActionGroup();
            	actionGroup.Actions.Add(action1);
            	actionGroup.Actions.Add(action2);
            	actionGroup.Actions.Add(action3);
            	
            	workbook.DoAction(targetSheet, actionGroup);
            </code>
            
            Actions added into action group will be performed by one time,
            they will be also undone by one time.
            </example>
            <seealso cref="T:unvell.Common.ActionGroup"/>
            <seealso cref="T:unvell.ReoGrid.Actions.BaseWorksheetAction"/>
            <seealso cref="T:unvell.ReoGrid.Actions.WorksheetActionGroup"/>
            <param name="sheet">worksheet of the target container to perform specified action</param>
            <param name="action">action to be performed</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Undo">
            <summary>
            Undo the last action.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.Redo">
            <summary>
            Redo the last action.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.RepeatLastAction(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Repeat to do last action and apply to another specified range.
            </summary>
            <param name="range">The new range to be applied for the last action.</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.RepeatLastAction(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Repeat to do last action and apply to another specified range and worksheet.
            </summary>
            <param name="worksheet">The target worksheet to perform the action.</param>
            <param name="range">The new range to be applied for the last action.</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.CanUndo">
            <summary>
            Determine whether there is any actions can be undone.
            </summary>
            <returns>True if any actions can be undone</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.CanRedo">
            <summary>
            Determine whether there is any actions can be redid.
            </summary>
            <returns>True if any actions can be redid</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.ClearActionHistory">
            <summary>
            Clear all undo/redo actions from workbook action history.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.ClearActionHistoryForWorksheet(unvell.ReoGrid.Worksheet)">
            <summary>
            Delete all actions that belongs to specified worksheet.
            </summary>
            <param name="sheet">Actions belongs to this worksheet will be deleted from workbook action histroy.</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.SetSettings(unvell.ReoGrid.WorkbookSettings,System.Boolean)">
            <summary>
            Set specified workbook settings
            </summary>
            <param name="settings">Settings to be set</param>
            <param name="value">True to enable the settings, false to disable the settings</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.GetSettings">
            <summary>
            Get current settings of workbook
            </summary>
            <returns>Workbook settings set</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.HasSettings(unvell.ReoGrid.WorkbookSettings)">
            <summary>
            Determine whether or not the specified workbook settings has been set
            </summary>
            <param name="settings">Settings to be checked</param>
            <returns>True if specified settings has been set</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.NotifyExceptionHappen(unvell.ReoGrid.Worksheet,System.Exception)">
            <summary>
            Notify that there are exceptions happen on any worksheet. 
            The event ExceptionHappened of workbook will be invoked.
            </summary>
            <param name="sheet">Worksheet where the exception happened</param>
            <param name="ex">Exception to describe the details of error information</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.PickRange(System.Func{unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridRange,System.Boolean})">
            <summary>
            Start to pick a range on spreadsheet
            </summary>
            <param name="onPicked">callback function invoked after range is picked</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.PickRange(System.Func{unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridRange,System.Boolean},System.Windows.Input.Cursor)">
            <summary>
            Start to pick a range on spreadsheet
            </summary>
            <param name="onPicked">callback function invoked after range is picked</param>
            <param name="pickerCursor">cursor displayed during picking</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.StartPickRangeAndCopyStyle">
            <summary>
            Start to pick ranges and copy the styles to the picked range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.EndPickRange">
            <summary>
            End pick range operation
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.#ctor">
            <summary>
            Create ReoGrid spreadsheet control
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Handle event on render size changed
            </summary>
            <param name="sizeInfo">size information</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Handle event on rendering
            </summary>
            <param name="dc">drawing context</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handle event when key down
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControl.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handle event when text inputted
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.CurrentWorksheet">
            <summary>
            Get or set the current worksheet
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.WorkbookLoaded">
            <summary>
            Event raised when workbook loaded from stream or file
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.WorkbookSaved">
            <summary>
            Event raised when workbook saved into stream or file
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.Worksheets">
            <summary>
            Collection of worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.Readonly">
            <summary>
            Determine whether or not this workbook is read-only (Reserved v0.8.8)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.IsWorkbookEmpty">
            <summary>
            Check whether or not current workbook is empty (all worksheets don't have any cells)
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.CurrentWorksheetChanged">
            <summary>
            Event raised when current worksheet is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.WorksheetCreated">
            <summary>
            Event raised when worksheet is created
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.WorksheetInserted">
            <summary>
            Event raised when worksheet is inserted into this workbook
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.WorksheetRemoved">
            <summary>
            Event raised when worksheet is removed from this workbook
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.WorksheetNameChanged">
            <summary>
            Event raised when the name of worksheet managed by this workbook is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.BeforeActionPerform">
            <summary>
            Event fired before action perform.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.ActionPerformed">
            <summary>
            Event fired when any action performed.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.Undid">
            <summary>
            Event fired when Undo operation performed by user.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.Redid">
            <summary>
            Event fired when Reod operation performed by user.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.SettingsChanged">
            <summary>
            Event raised when settings is changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.Script">
            <summary>
            Get or set script content
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.ReoGridControl.ExceptionHappened">
            <summary>
            Event raised when exception has been happened during internal operations.
            Usually the internal operations are raised by hot-keys pressed by end-user.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.CellsSelectionCursor">
            <summary>
            Get or set the mouse cursor on cells selection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.FullRowSelectionCursor">
            <summary>
            Cursor symbol displayed when moving mouse over on row headers
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.FullColumnSelectionCursor">
            <summary>
            Cursor symbol displayed when moving mouse over on column headers
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.EntireSheetSelectionCursor">
            <summary>
            Get or set the mouse cursor of lead header part
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.ControlInstance">
            <summary>
            Retrieve control instance of workbook
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.ControlStyle">
            <summary>
            Control Style Settings
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.CellsContextMenu">
            <summary>
            Get or set the cells context menu
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.RowHeaderContextMenu">
            <summary>
            Get or set the row header context menu
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.ColumnHeaderContextMenu">
            <summary>
            Get or set the column header context menu
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.LeadHeaderContextMenu">
            <summary>
            Get or set the lead header context menu
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControl.LoadFromFile">
            <summary>
            Get or set filepath of startup template file
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.BorderPositions">
            <summary>
            Position of borders for a range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.None">
            <summary>
            No border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.Top">
            <summary>
            Top border inside range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.Bottom">
            <summary>
            Bottom border inside range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.Left">
            <summary>
            Left side border inside range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.Right">
            <summary>
            Right side border inside range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.InsideHorizontal">
            <summary>
            Horizontal borders inside range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.InsideVertical">
            <summary>
            Vertical borders inside range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.Slash">
            <summary>
            Slash lines inside cell (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.Backslash">
            <summary>
            Backslash lines inside cell (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.LeftRight">
            <summary>
            Borders in left and right side in range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.TopBottom">
            <summary>
            Borders in top and bottom in range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.Outside">
            <summary>
            Borders around range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.InsideAll">
            <summary>
            Horizontal and vertical borders inside range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.All">
            <summary>
            All borders belong to range or cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderPositions.X">
            <summary>
            Cross line in single cell (Both Slash and Backslash, Reserved)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.BorderLineStyle">
            <summary>
            Line style of border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.None">
            <summary>
            None border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.Solid">
            <summary>
            Solid border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.Dotted">
            <summary>
            Dotted border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.Dashed">
            <summary>
            Dashed border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.DoubleLine">
            <summary>
            Double line border (not supported in WPF version)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.Dashed2">
            <summary>
            Dashed (style 2) border (not supported in WPF version)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.DashDot">
            <summary>
            Dashed (style 3) border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.DashDotDot">
            <summary>
            Dashed (style 4) border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.BoldDashDot">
            <summary>
            Bold dashed (style 2) border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.BoldDashDotDot">
            <summary>
            Bold dashed (style 3) border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.BoldDashed">
            <summary>
            Bold dashed border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.BoldDotted">
            <summary>
            Bold dotted border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.BoldSolid">
            <summary>
            Bold solid border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.BorderLineStyle.BoldSolidStrong">
            <summary>
            Strong solid border (Bold x2)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.RangeBorderStyle">
            <summary>
            Border style of range
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.RangeBorderStyle.Empty">
            <summary>
            No border
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderStyle.Equals(System.Object)">
            <summary>
            Compare two border styles check whether they are same
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>True if two object are same; otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderStyle.op_Equality(unvell.ReoGrid.RangeBorderStyle,System.Object)">
            <summary>
            Compare two styles and check whether or not they are same.
            </summary>
            <param name="s1">First style to be compared.</param>
            <param name="s2">Second style to be compared.</param>
            <returns>Return true if two styles are same; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderStyle.op_Inequality(unvell.ReoGrid.RangeBorderStyle,System.Object)">
            <summary>
            Compare two styles and check whether or not they are not same.
            </summary>
            <param name="s1">First style to be compared.</param>
            <param name="s2">Second style to be compared.</param>
            <returns>Return true if two styles are same; Otherwise return false.</returns>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderStyle.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns>Hashcode calculated from this object.</returns>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderStyle.ToString">
            <summary>
            Convert style object into friendly description string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderStyle.#ctor(unvell.ReoGrid.Graphics.SolidColor,unvell.ReoGrid.BorderLineStyle)">
            <summary>
            Create range border style object with specified color and style.
            </summary>
            <param name="color">Color to display borders on worksheet.</param>
            <param name="style">Style to display borders on worksheet.</param>
        </member>
        <member name="F:unvell.ReoGrid.RangeBorderStyle.BlackSolid">
            <summary>
            Predefined border style of solid black border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.RangeBorderStyle.GraySolid">
            <summary>
            Predefined border style of solid gray border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.RangeBorderStyle.BlackDotted">
            <summary>
            Predefined border style of dotted black border
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.RangeBorderStyle.GrayDotted">
            <summary>
            Predefined border style of dotted gray border
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderStyle.Style">
            <summary>
            The border style
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderStyle.Color">
            <summary>
            Color of border
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderStyle.IsEmpty">
            <summary>
            Determines whether this style is empty
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.RangeBorderInfo">
            <summary>
            This class contains the position and style information of a segment of border for a range.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderInfo.#ctor(unvell.ReoGrid.BorderPositions,unvell.ReoGrid.RangeBorderStyle)">
            <summary>
            Create border information instance with specified position and style.
            </summary>
            <param name="pos">The position of border in a range.</param>
            <param name="style">The style of border in a range.</param>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfo.Pos">
            <summary>
            Get or set the position of this border in a range.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfo.Style">
            <summary>
            Get or set the style of border in a range.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.RangeBorderInfoSet">
            <summary>
            This class contains the information of all borders in specified range. 
            This class only be used as return value form <see cref="!:GetRangeBorders">GetRangeBorders</see> method.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.RangeBorderInfoSet.IsNonUniform(unvell.ReoGrid.BorderPositions)">
            <summary>
            Indicates whether the borders to each cells in a specified range are not same 
            </summary>
            <param name="pos">border position in range</param>
            <returns>true if borders at position are not same</returns>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.NonUniformPos">
            <summary>
            Borders at the positions are not same
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.Top">
            <summary>
            Border style at top of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.Right">
            <summary>
            Border style at right of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.Bottom">
            <summary>
            Border style at bottom of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.Left">
            <summary>
            Border  style at left of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.InsideHorizontal">
            <summary>
            Horizontal border style inside range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.InsideVertical">
            <summary>
            Vertical border style inside range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.Slash">
            <summary>
            Slash style inside range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RangeBorderInfoSet.Backslash">
            <summary>
            Backslash style inside range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridCell">
            <summary>
            Cell object for ReoGrid control
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridCell.worksheet">
            <summary>
            Instance of worksheet that the cell belongs to
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.#ctor(unvell.ReoGrid.Worksheet)">
            <summary>
            Construct cell instance with specified owner grid instance.
            Cell instance managed by ReoGrid core, it cannot be created by user-code.
            </summary>
            <param name="worksheet">Owner grid control for this cell</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.GetColspan">
            <summary>
            Get number of colspan
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.GetRowspan">
            <summary>
            Get number of rowspan
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.GetData``1">
            <summary>
            Get and convert data into specified type
            </summary>
            <typeparam name="T">Type try to convert</typeparam>
            <returns>Converted data in specified type</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.StartEdit">
            <summary>
            Start edit this cell
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.EndEdit">
            <summary>
            Finish edit this cell
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.ExpandRowHeight">
            <summary>
            Expand or shrink row height to fit the display text in this cell.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.ExpandColumnWidth">
            <summary>
            Expand or shrink column width to fit the display text in this cell.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridCell.renderTextBounds">
            <summary>
            text boundary for display
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCell.Clone">
            <summary>
            Clone this cell instance by copying its all of properties
            </summary>
            <returns>new cell instance copied from this cell</returns>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Worksheet">
            <summary>
            Get the worksheet that is the owner of this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Row">
            <summary>
            Get zero-based row index of this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Column">
            <summary>
            Get zero-based column index of this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Position">
            <summary>
            Get position of this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Address">
            <summary>
            Get address string of this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.DataFormat">
            <summary>
            Get or set the data format type
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.DataFormatArgs">
            <summary>
            Get or set the argument of data format type
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.InnerData">
            <summary>
            cell data
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Data">
            <summary>
            Get or set cell data
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.InnerFormula">
            <summary>
            cell formula
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.FormulaStatus">
            <summary>
            Determine the status of formula calculation
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.InnerDisplay">
            <summary>
            cell display text
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.DisplayText">
            <summary>
            Get the cell display text
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.IsReadOnly">
            <summary>
            Determine whether or not allow to change data of this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Formula">
            <summary>
            Get or set the cell formula
            </summary>
            <returns>Formula of cell in string</returns>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.HasFormula">
            <summary>
            Identify whether or not this cell contains the formula and the value has been evaluated
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.IsMergedCell">
            <summary>
            Check whether this cell is merged cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.IsValidCell">
            <summary>
            Check whether or not this cell is an valid cell, only valid cells can be set data and styles.
            Cells merged by another cell will become invalid.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.InsideMergedRange">
            <summary>
            Check whether or not this cell is inside a merged range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Style">
            <summary>
            Get or set instance of style for this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.RenderFont">
            <summary>
            Render font is the final font used to render text inside cell.
            Render font is scaled according to worksheet's scaling.
            Render font could be set to null, then it will be updated when cell was required to be rendered.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.RenderHorAlign">
            <summary>
            Horizontal alignement for display
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.RenderTextColumnSpan">
            <summary>
            Column span if text larger than the cell it inside
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.RenderColor">
            <summary>
            Get the render color of cell text. Render color is the final color of text that will be displayed on the worksheet.
            Negative numbers may be displayed red even no text color style specified.
            This property cannot be changed. 
            To change the text color use the SetRangeStyle method to apply styles into a range, 
            or change the TextColor of Style property of this class.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.IsHidden">
            <summary>
            Determine whether or not this cell is visible (cells on the hidden rows or columns will become invisibility)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Tag">
            <summary>
            Get or set the user data attaching to this cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.Body">
            <summary>
            Get or set the cell body
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.TraceFormulaPrecedents">
            <summary>
            Show or hide trace formula percendents on spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCell.TraceFormulaDependents">
            <summary>
            Show or hide trace formula dependents on spreadsheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridPos">
            <summary>
            Zero-based two-dimensional coordinates on spreadsheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Core.ISheetAddress">
            <summary>
            Absolute address interface reference to a cell or range on spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Core.ISheetAddress.ToAddress">
            <summary>
            Convert into address identifier
            </summary>
            <returns>address identifier in string</returns>
        </member>
        <member name="M:unvell.ReoGrid.Core.ISheetAddress.ToAbsoluteAddress">
            <summary>
            Convert into absolute address identifier
            </summary>
            <returns>address identifier in string</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.#ctor(System.Int32,System.Int32)">
            <summary>
            Create position with specified number of row and number of column
            </summary>
            <param name="row">zero-based number of row</param>
            <param name="col">zero-based number of column</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.#ctor(System.String)">
            <summary>
            Create instance with alphabet code of position (e.g. new ReoGridPos("A10"))
            </summary>
            <param name="address">an address string to locate the cell in spreadsheet (like 'A10')</param>
            <exception cref="T:System.ArgumentException">if address is not in correct format</exception>
            <example>var pos = new ReoGridPos("A10");</example>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.Offset(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Offset by specified value from another position.
            </summary>
            <param name="pos">Position indicates how many rows and columns to be moved</param>
            <returns>Offsetted position</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.Offset(System.Int32,System.Int32)">
            <summary>
            Offset by specified rows and columns.
            </summary>
            <param name="row">Rows to move</param>
            <param name="col">Columns to move</param>
            <returns>this position instance</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.ToString">
            <summary>
            Convert position to string
            </summary>
            <returns>string of this position</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.ToAddress">
            <summary>
            Convert position into address string (format: A1)
            </summary>
            <returns>Related address as string</returns>
            <seealso cref="M:unvell.ReoGrid.ReoGridPos.ToAbsoluteAddress"/>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.ToAbsoluteAddress">
            <summary>
            Convert position into absolute address string (format: $A$1)
            </summary>
            <returns>Absolute address as string</returns>
            <seealso cref="M:unvell.ReoGrid.ReoGridPos.ToAddress"/>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.Equals(System.Object)">
            <summary>
            Compare this position to another object
            </summary>
            <param name="obj">object to be compared</param>
            <returns>true if this position is same as the specified object, otherwise false</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.Equals(System.Int32,System.Int32)">
            <summary>
            Compare this position to specified number of row and number of column
            </summary>
            <param name="row">number of row to be compared</param>
            <param name="col">number of column to be compared</param>
            <returns>true if position is same to specified number of row and number of column</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.Equals(System.String)">
            <summary>
            Compare position to specified address descriptor 
            </summary>
            <param name="address">address descriptor to be compared</param>
            <returns>true if position is same as the specified address descriptor, otherwise false if not</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.op_Equality(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Compare this position to another position, return true if two positions are same.
            </summary>
            <param name="r1">this position to be compared</param>
            <param name="r2">another position to be compared</param>
            <returns>true if two positions are same, otherwise false if not</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.op_Inequality(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Compare this position to another position, return true if two positions are different.
            </summary>
            <param name="r1">this position to be compared</param>
            <param name="r2">another position to be compared</param>
            <returns>true if two positions are different, otherwise false if not</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.GetHashCode">
            <summary>
            Get hash code of this position
            </summary>
            <returns>generated hash code</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.Equals(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Compare two position
            </summary>
            <param name="pos1">first position to be compared</param>
            <param name="pos2">second position to be compared</param>
            <returns>true if two positions are same, otherwise false if two positions are different</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.Equals(unvell.ReoGrid.ReoGridPos,System.Int32,System.Int32)">
            <summary>
            Compare a position to specified number of row and number of column
            </summary>
            <param name="pos">position to be compared</param>
            <param name="row">number of row of another position to be compared</param>
            <param name="col">number of column of another position to be compared</param>
            <returns>true if the position is same as specified number of row and number of column</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPos.IsValidAddress(System.String)">
            <summary>
            Check whether or not the specified string is valid address descriptor
            </summary>
            <param name="address">address descriptor as string to be checked</param>
            <returns>true if specified address is valid, otherwise returning false</returns>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridPos.Row">
            <summary>
            Zero-based number of row to locate the cell on worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridPos.Col">
            <summary>
            Zero-based number of column to locate the cell on worksheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.CellElementFlag">
            <summary>
            Element flags in cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.CellElementFlag.All">
            <summary>
            All elements
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.CellElementFlag.Data">
            <summary>
            Cell value
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.CellElementFlag.Formula">
            <summary>
            Cell formuals
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.CellElementFlag.Body">
            <summary>
            Cell body
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.CellElementFlag.DataFormat">
            <summary>
            Data format setting
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.CellElementFlag.Style">
            <summary>
            Styles
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.CellElementFlag.Border">
            <summary>
            Border around the cell
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Utility.CellUtility">
            <summary>
            Common utility functions for cell.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Utility.CellUtility.CopyCell(unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.ReoGridCell)">
            <summary>
            Clone new cell instance from another cell.
            </summary>
            <param name="toCell">target cell to be copied into</param>
            <param name="fromCell">original cell to be copied from</param>
            <returns>instance of cell cloned</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.CellUtility.CopyCellContent(unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.ReoGridCell)">
            <summary>
            Copy all content from a cell to another cell
            </summary>
            <param name="toCell">target cell to be copied into</param>
            <param name="fromCell">original cell to be copied from</param>
        </member>
        <member name="M:unvell.ReoGrid.Utility.CellUtility.IsNumberData(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Check specified data from a cell is whether or not a number
            </summary>
            <param name="cell">cell instance of data</param>
            <returns>true if data from the cell is number</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.CellUtility.IsNumberData(System.Object)">
            <summary>
            Check specified data is whether or not a number
            </summary>
            <param name="data">data to be check</param>
            <returns>true if data is number</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.CellUtility.TryGetNumberData(System.Object,System.Double@)">
            <summary>
            Try get a double value from specified object
            </summary>
            <param name="data">data to be check and converted</param>
            <param name="value">the output value converted from data</param>
            <returns>true if convert is succesful</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.CellUtility.ConvertData``1(System.Object)">
            <summary>
            Convert cell data into another type if possible
            </summary>
            <param name="data">cell data to be converted</param>
            <returns>output object after convert</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.CellUtility.ConvertData``1(System.Object,``0@)">
            <summary>
            Convert cell data into another type if possible
            </summary>
            <typeparam name="T">type after convert</typeparam>
            <param name="data">cell data to be converted</param>
            <param name="value">output object after convert</param>
            <returns>true if convert is successful</returns>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.CellDataFormatFlag">
            <summary>
            Cell data format type
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.CellDataFormatFlag.General">
            <summary>
            Auto format type (compliant with Text and Number)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.CellDataFormatFlag.Number">
            <summary>
            Number Type
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.CellDataFormatFlag.DateTime">
            <summary>
            Date and Time Type
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.CellDataFormatFlag.Percent">
            <summary>
            Percent Type
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.CellDataFormatFlag.Currency">
            <summary>
            Currency Type
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.CellDataFormatFlag.Text">
            <summary>
            String
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.CellDataFormatFlag.Custom">
            <summary>
            User custom data formatter
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.DataFormatterManager">
            <summary>
            Data Formatter Manager
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.DataFormatterManager.Instance">
            <summary>
            Instance for this class
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.DataFormatterManager.DataFormatters">
            <summary>
            Built-in data formatters
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.IDataFormatter">
            <summary>
            Data format provider interface
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.IDataFormatter.FormatCell(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Format data stored in specified cell.
            </summary>
            <param name="cell">Instance of cell to be formatted.</param>
            <returns>Return non-empty string if formatting was performed successfully; Otherwise return null.</returns>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.IDataFormatter.PerformTestFormat">
            <summary>
            Indicate that whether or not to check the data type before format.
            </summary>
            <returns>True to perform test; Otherwise return false.</returns>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.GeneralDataFormatter">
            <summary>
            GeneralDataFormatter supports both Text and Numeric format.
            And format type can be switched after data changed by user inputing.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.NumberDataFormatter">
            <summary>
            Number Formatter used to format data as numeric format.
            Available also to format data with different negative styles.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.NumberDataFormatter.FormatCell(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Format given cell
            </summary>
            <param name="cell">Instance of cell to be formatted</param>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.NumberDataFormatter.TwoDecimalDigitsArgument">
            <summary>
            Predefined format argument with using separator and two decimal digits (e.g. 1,234.56)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.NumberDataFormatter.NoDecimalDigitsArgument">
            <summary>
            Predefined format argument with using separator but without decimal digits (e.g. 1,234)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberFormatArgs.Equals(System.Object)">
            <summary>
            Compare to another instance of NumberFormatArgs
            </summary>
            <param name="obj">Another instance to be compared</param>
            <returns>true if two argument object are same</returns>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberFormatArgs.GetHashCode">
            <summary>
            Calculate the hash code for this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberFormatArgs.DecimalPlaces">
            <summary>
            Number of decimal places
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberFormatArgs.NegativeStyle">
            <summary>
            Determine the negative number style (Minus, Red and Brackets display)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberFormatArgs.UseSeparator">
            <summary>
            Determine whether to use a separator to split number every 3 digits.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle">
             <summary>
             System negative number display support (currently unused)
            
             NumberFormat.NumberNegativePattern
            
             Default         :       (1,234.00)
             Pattern 0       :       (1,234.00)
             Pattern 1       :       -1,234.00
             Pattern 2       :       - 1,234.00
             Pattern 3       :       1,234.00-
             Pattern 4       :       1,234.00 -
             Pattern 5				:				△ 1,234.00   (Japanese Edition Only)
            
             NumberFormatInfo.NumberNegativePattern.ToString("N", NumberFormatInfo) 
             </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle.Minus">
            <summary>
            Regular negative style. e.g. -1234.56
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle.Brackets">
            <summary>
            Negative number surrounded with brackets. e.g. (1234.56)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle.Red">
            <summary>
            Negative number with red color display. e.g. <span style='color:red;'>1234.56</span>
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle.Symbol_Sankaku">
            <summary>
            Negative number with Sankaku symbol prefix. (Japanese negative number style e.g. △ 1,234.00)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle.RedMinus">
            <summary>
            Regular negative number with red color display.
            (Minus | Red) e.g. <span style='color:red;'>-1234.56</span>
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle.RedBrackets">
            <summary>
            Negative number surrounded with brackets and red color display.
            (Brackets | Red) e.g. <span style='color:red;'>(1234.56)</span>
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.DateTimeDataFormatter">
            <summary>
            Datetime data formatter
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.DateTimeDataFormatter.FormatCell(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Format cell
            </summary>
            <param name="cell">cell to be formatted</param>
            <returns>Formatted text used to display as cell content</returns>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.DateTimeDataFormatter.BaseStartDate">
            <summary>
            Base start time used to calculcate the date from a number value
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.PercentDataFormatter">
            <summary>
            Percent data formatter
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.PercentDataFormatter.PerformTestFormat">
            <summary>
            Perform a format check
            </summary>
            <returns>true if the data is in this format</returns>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.CurrencyDataFormatter">
            <summary>
            Currency data formatter
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.FormatCell(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Format specified cell
            </summary>
            <param name="cell">cell instance</param>
            <returns>true if cell has been formatted</returns>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.PerformTestFormat">
            <summary>
            Determine whether or not to perform format test
            </summary>
            <returns>True to perform test; False to abort</returns>
        </member>
        <member name="T:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs">
            <summary>
            Represents arguments of currency data format.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.Equals(System.Object)">
            <summary>
            Check whether or not two objects are same
            </summary>
            <param name="obj">Another object to be compared</param>
            <returns>True if two objects are same; Otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.Symbol">
            <summary>
            Currency symbol to format cell value
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.DecimalPlaces">
            <summary>
            Number of decimal places to format cell value
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.CultureEnglishName">
            <summary>
            Standard culture name in English
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.NegativeStyle">
            <summary>
            Nagative style to format cell value
            <seealso cref="T:unvell.ReoGrid.DataFormat.NumberDataFormatter.NumberNegativeStyle"/>
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Formula.FormulaEvalutionException">
            <summary>
            Exception will be thrown when errors happened during formula evalution
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridException">
            <summary>
            Common exception of ReoGrid component
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridException.#ctor(System.String)">
            <summary>
            Create common exception with specified exception message
            </summary>
            <param name="msg">message used to describe the exception</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridException.#ctor(System.String,System.Exception)">
            <summary>
            Create common exception with specified message and inner exception
            </summary>
            <param name="msg">message used to describe the exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaEvalutionException.#ctor(unvell.ReoGrid.ReoGridCell,System.Exception,System.String)">
            <summary>
            Create exception instance
            </summary>
            <param name="cell">Cell instance that may include the formula.</param>
            <param name="innerException">Original exception instance</param>
            <param name="message">Addtional message to describe this exception</param>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaEvalutionException.#ctor(unvell.ReoGrid.ReoGridCell,System.String)">
            <summary>
            Create exception instance.
            </summary>
            <param name="cell">Cell instance that may include the formula.</param>
            <param name="message">Addtional message to describe this exception</param>
        </member>
        <member name="P:unvell.ReoGrid.Formula.FormulaEvalutionException.Cell">
            <summary>
            Cell of exception happened.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridHeader">
            <summary>
            Header instance of spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridHeader.IsHidden">
            <summary>
            Get or set whether or not to make the header on spreadsheet visible
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridHeader.Index">
            <summary>
            Zero-bsed number to locate the header on spreadsheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridColumnHeader">
            <summary>
            Column header of spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridColumnHeader.FitColumnToCells(System.Boolean)">
            <summary>
            Auto fit column width to largest cell on this column
            </summary>
            <param name="byAction">Determine whether or not this operation 
            should be done by performing action. Action provides the ability
            to undone a operation.</param>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.Left">
            <summary>
            Get the left position of this column header (in pixel)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.Width">
            <summary>
            Get or set the width of this column header (in pixel)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.Index">
            <summary>
            Get the number of column (index cannot be changed, it managed by grid control)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.Text">
            <summary>
            Get or set the text of column header
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.Right">
            <summary>
            Get the right position of column header (in pixel)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.Style">
            <summary>
            Get style set of column header, modify any style in this set will affect all cells on this column.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.IsAutoWidth">
            <summary>
            Get or set whether or not to auto adjust the width of this column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.IsHidden">
            <summary>
            Get or set whether or not to hide this column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.DefaultCellBody">
            <summary>
            Default cell body type for all cells on this column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.TextColor">
            <summary>
            Get or set color for display the header text on spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridColumnHeader.Body">
            <summary>
            Header body
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridRowHeader">
            <summary>
            Row header of spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRowHeader.FitHeightToCells(System.Boolean)">
            <summary>
            Auto fit column width to largest cell on this column
            </summary>
            <param name="byAction">Determine whether or not this operation 
            should be done by performing action. Action provides the ability
            to undone a operation.</param>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.Top">
            <summary>
            Get the top position of header (in pixel)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.Height">
            <summary>
            Get or set height of row (in pixel)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.Bottom">
            <summary>
            Get the bottom position of header (in pixel)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.Index">
            <summary>
            Get the number of row (index cannot be changed, it managed by grid control)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.Text">
            <summary>
            Get or set display text for the row header
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.TextColor">
            <summary>
            Get or set the color that is used to display the header text
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.Style">
            <summary>
            Get style set of row header, modify any style in this set will affect all cells on this row.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.IsAutoHeight">
            <summary>
            Get or set whether or not to auto adjust the height of this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRowHeader.IsHidden">
            <summary>
            Get or set whether or not to hide this row
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.RowOrColumn">
            <summary>
            Flag to decide which orientation will be handled
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.RowOrColumn.Row">
            <summary>
            Row orientation
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.RowOrColumn.Column">
            <summary>
            Column orientation
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.RowOrColumn.Both">
            <summary>
            Both row and column (some approaches do not work with 'Both')
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.OutlineCollection`1">
            <summary>
            Outline Collection for both Row and Column Outline
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollection`1.#ctor">
            <summary>
            Only allowed to create instance by ReoGridControl
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollection`1.Reset">
            <summary>
            Clear all outlines, reset to default status
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollection`1.IterateOutlines(System.Func{`0,System.Boolean})">
            <summary>
            Iterate over the all outlines
            </summary>
            <param name="iterator">iterator callback function</param>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollection`1.IterateReverseOutlines(System.Func{`0,System.Boolean})">
            <summary>
            Reverse iterate over the all outlines
            </summary>
            <param name="iterator"></param>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollection`1.HasSame(unvell.ReoGrid.Outline.IReoGridOutline,System.Collections.Generic.IList{unvell.ReoGrid.Outline.IReoGridOutline})">
            <summary>
            Check whether there is same outline exist
            </summary>
            <param name="target">Outline used to find</param>
            <param name="exclusions">Outline in this list will not be compare</param>
            <returns>true if there is another same as target</returns>
        </member>
        <member name="P:unvell.ReoGrid.Outline.OutlineCollection`1.HasOutlines">
            <summary>
            Determine whether any outlines existed in this collection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.OutlineCollection`1.OutlineCount">
            <summary>
            Get number of outlines
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.IReoGridOutline">
            <summary>
            Outline define
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.IReoGridOutline.Collapse">
            <summary>
            Collapse this outline (Hide all the cells which are contained by this outline)
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.IReoGridOutline.Expand">
            <summary>
            Expand this outline (Show all the cells which are contained by this outline)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.IReoGridOutline.Start">
            <summary>
            Start position of outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.IReoGridOutline.Count">
            <summary>
            Number of rows or columns in this outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.IReoGridOutline.End">
            <summary>
            End position of outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.IReoGridOutline.Collapsed">
            <summary>
            Determine whether current outline is collapsed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.IReoGridOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.IReoGridOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.IReoGridOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.IReoGridOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.OutlineGroup`1">
            <summary>
            Outline group for both Row and Column Outline
            </summary>
            <typeparam name="T">Outline define type, must be IReoGridOutline</typeparam>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineGroup`1.#ctor">
            <summary>
            Only allowed to create instance by ReoGridControl
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineGroup`1.CollapseAll">
            <summary>
            Collapse all outlines inside this group
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineGroup`1.ExpandAll">
            <summary>
            Expand all outlines inside this group
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.OutlineGroup`1.NumberButtonBounds">
            <summary>
            Number Button Rectangle
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.ReoGridOutline">
            <summary>
            Outline instance for both Row and Column Outline
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ReoGridOutline.Contains(unvell.ReoGrid.Outline.ReoGridOutline)">
            <summary>
            Determine whether specified outline is contained entirely by this outline
            </summary>
            <param name="outline">outline to be tested</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ReoGridOutline.Contains(System.Int32)">
            <summary>
            Determine whether specified index is contained by this outline
            </summary>
            <param name="index">index to be tested</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ReoGridOutline.IntersectWith(unvell.ReoGrid.Outline.ReoGridOutline)">
            <summary>
            Determine whether specified outline is intersected with this outline
            </summary>
            <param name="outline">Outline to be tested</param>
            <returns>True if the specified outline is intersected with this outline</returns>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ReoGridOutline.IntersectWith(System.Int32,System.Int32)">
            <summary>
            Determine whether specified range is intersected with this outline
            </summary>
            <param name="start">Start index (either number of row or number of column)</param>
            <param name="count">Number of count (either number of rows or number of columns)</param>
            <returns>True if the specified outline is intersected with this outline</returns>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ReoGridOutline.Collapse">
            <summary>
            Collapse outline
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ReoGridOutline.Expand">
            <summary>
            Expand outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ReoGridOutline.sheet">
            <summary>
            instance of ReoGridControl
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ReoGridOutline.Start">
            <summary>
            Outline start index (either number of row or number of column)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ReoGridOutline.Count">
            <summary>
            Outline number of count (either number of rows or number of columns)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ReoGridOutline.End">
            <summary>
            Outline end index (either number of row or number of column)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ReoGridOutline.InternalCollapsed">
            <summary>
            Internal flag to determine whether this outline is collapsed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ReoGridOutline.Collapsed">
            <summary>
            Check whether current outline is collapsed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ReoGridOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ReoGridOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ReoGridOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ReoGridOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.OutlineCollectionProperty`1">
            <summary>
            Outline collection property
            </summary>
            <typeparam name="T">Row or column outline instance type</typeparam>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollectionProperty`1.AddOutline(System.Int32,System.Int32)">
            <summary>
            Add outline on worksheet
            </summary>
            <param name="start">Zero-based start position to add outline</param>
            <param name="count">Number of rows or columns to be added into outline</param>
            <returns>Instance of new outline</returns>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollectionProperty`1.RemoveOutline(System.Int32,System.Int32)">
            <summary>
            Remove outline from worksheet
            </summary>
            <param name="start">Zero-based start position to add outline</param>
            <param name="count">Number of rows or columns exist in the outline</param>
            <returns>Instance of removed outline</returns>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollectionProperty`1.GetEnumerator">
            <summary>
            Get enumerator of outline collection
            </summary>
            <returns>Enumerator of outline collection</returns>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineCollectionProperty`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator of outline collection
            </summary>
            <returns>Enumerator of outline collection</returns>
        </member>
        <member name="P:unvell.ReoGrid.Outline.OutlineCollectionProperty`1.Item(System.Int32,System.Int32)">
            <summary>
            Get outline by specified position (start and count)
            </summary>
            <param name="start">Zero-based start position to find outline</param>
            <param name="count">Number of rows or columns that is contained in target outline</param>
            <returns>Instance of outline</returns>
        </member>
        <member name="T:unvell.ReoGrid.Outline.RowOutlineCollection">
            <summary>
            Row outline collection
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.ColumnOutlineCollection">
            <summary>
            Column outline collection
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.RowOutline">
            <summary>
            Rows outline
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Core.IRowRange">
            <summary>
            Interface that represents a range of row on worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Core.IRowRange.Row">
            <summary>
            Get or set the number of row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Core.IRowRange.Rows">
            <summary>
            Get or set the number of rows in this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Core.IRowRange.EndRow">
            <summary>
            Get the number of last row in this range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.RowOutline.Collapse">
            <summary>
            Collapse outline
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.RowOutline.Expand">
            <summary>
            Expand outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.RowOutline.Row">
            <summary>
            Get or set the number of row (Same as Start property)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.RowOutline.Rows">
            <summary>
            Get or set the number of rows (Same as Count property)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.RowOutline.EndRow">
            <summary>
            Get the number of end row (Same as End property - 1)
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.RowOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.RowOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.RowOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.RowOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.ColumnOutline">
            <summary>
            Column outline
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Core.IColumnRange">
            <summary>
            Interface to represents a range of column on worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Core.IColumnRange.Col">
            <summary>
            Get or set the number of col
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Core.IColumnRange.Cols">
            <summary>
            Get or set the number of rows in this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Core.IColumnRange.EndCol">
            <summary>
            Get the number of last column in this range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ColumnOutline.Collapse">
            <summary>
            Collapse outline
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.ColumnOutline.Expand">
            <summary>
            Expand outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ColumnOutline.Col">
            <summary>
            Get or set the number of column (Same as Start property)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ColumnOutline.Cols">
            <summary>
            Get or set the number of columns (Same as Count property)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Outline.ColumnOutline.EndCol">
            <summary>
            Get the number of end column (Same as End property)
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ColumnOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ColumnOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ColumnOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Outline.ColumnOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.OutlineEventArgs">
            <summary>
            Common outline event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineEventArgs.#ctor(unvell.ReoGrid.Outline.IReoGridOutline)">
            <summary>
            Create outline event argument with specified outline instance
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="P:unvell.ReoGrid.Outline.OutlineEventArgs.Outline">
            <summary>
            Outline instance for both row and column outline
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.OutlineAddedEventArgs">
            <summary>
            Event raised when outline has been added into spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineAddedEventArgs.#ctor(unvell.ReoGrid.Outline.ReoGridOutline)">
            <summary>
            Create outline event argument with specified outline instance
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="T:unvell.ReoGrid.Outline.OutlineRemovedEventArgs">
            <summary>
            Event raised when outline has been removed into spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.OutlineRemovedEventArgs.#ctor(unvell.ReoGrid.Outline.IReoGridOutline)">
            <summary>
            Create outline event argument with specified outline instance
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="T:unvell.ReoGrid.Outline.BeforeOutlineCollapseEventArgs">
            <summary>
            Event raised before outline collapsing
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.BeforeOutlineCollapseEventArgs.#ctor(unvell.ReoGrid.Outline.ReoGridOutline)">
            <summary>
            Create outline event argument with specified outline instance
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="P:unvell.ReoGrid.Outline.BeforeOutlineCollapseEventArgs.IsCancelled">
            <summary>
            Get or set whether or not to abort current operation
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.BeforeOutlineExpandingEventArgs">
            <summary>
            Event raised before outline expanding
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.BeforeOutlineExpandingEventArgs.#ctor(unvell.ReoGrid.Outline.ReoGridOutline)">
            <summary>
            Create event arguments instance.
            </summary>
            <param name="outline"></param>
        </member>
        <member name="P:unvell.ReoGrid.Outline.BeforeOutlineExpandingEventArgs.IsCancelled">
            <summary>
            Get or set whether or not to abort current operation
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Outline.AfterOutlineCollapseEventArgs">
            <summary>
            Event raised after outline collapsing
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.AfterOutlineCollapseEventArgs.#ctor(unvell.ReoGrid.Outline.ReoGridOutline)">
            <summary>
            Create event arguments instance.
            </summary>
            <param name="outline">Outline that has been collapsed.</param>
        </member>
        <member name="T:unvell.ReoGrid.Outline.AfterOutlineExpandingEventArgs">
            <summary>
            Event raised after outline expanding
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Outline.AfterOutlineExpandingEventArgs.#ctor(unvell.ReoGrid.Outline.ReoGridOutline)">
            <summary>
            Create event arguments instance.
            </summary>
            <param name="outline"></param>
        </member>
        <member name="T:unvell.ReoGrid.PartialGridCopyFlag">
            <summary>
            Partial spreadsheet copy operation flag
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PartialGridCopyFlag.All">
            <summary>
            All content will be processed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PartialGridCopyFlag.CellAll">
            <summary>
            Cell value and cell styles will be processed (CellData | CellStyle)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PartialGridCopyFlag.CellData">
            <summary>
            Only cell value will be processed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PartialGridCopyFlag.CellStyle">
            <summary>
            Only cell styles will be processed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PartialGridCopyFlag.BorderAll">
            <summary>
            All borders will be processed (HBorder | VBorder)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PartialGridCopyFlag.HBorder">
            <summary>
            Only horizontal borders will be processed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PartialGridCopyFlag.VBorder">
            <summary>
            Only vertical borders will be processed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ExPartialGridCopyFlag.BorderOutsideOwner">
            <summary>
            Copy all borders that around the cells (ignores border's owner property)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.PartialGrid">
            <summary>
            Partial grid contains the cells and borders, including the data and styles from 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.PartialGrid.#ctor">
            <summary>
            Create an empty partial grid without and data, borders and styles
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.PartialGrid.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an empty partial grid with specified capacity
            </summary>
            <param name="initRows">capacity of rows</param>
            <param name="initCols">capacity of cols</param>
        </member>
        <member name="M:unvell.ReoGrid.PartialGrid.#ctor(System.Object[0:,0:])">
            <summary>
            Create grid with specified data
            </summary>
            <param name="data">data to fill this partial grid</param>
        </member>
        <member name="M:unvell.ReoGrid.PartialGrid.Equals(System.Object)">
            <summary>
            Compare this partial grid to another object
            </summary>
            <param name="obj">object to be compared</param>
            <returns>true if the object is same as this partial grid, otherwise false</returns>
        </member>
        <member name="M:unvell.ReoGrid.PartialGrid.Equals(unvell.ReoGrid.PartialGrid,unvell.ReoGrid.PartialGridCopyFlag)">
            <summary>
            Compare this partial grid to another grid with specified comparison flag
            </summary>
            <param name="anotherPartialGrid">another partial grid to be compared</param>
            <param name="flag">comparison flag</param>
            <returns>true if two partial grid are same, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.PartialGrid.GetHashCode">
            <summary>
            Get hash code of this prtail grid object
            </summary>
            <returns>generated hash code</returns>
        </member>
        <member name="P:unvell.ReoGrid.PartialGrid.Rows">
            <summary>
            Number of rows in this partial grid
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.PartialGrid.Columns">
            <summary>
            Number of columns in this partial grid
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Print.PrintPageOrder">
            <summary>
            Paging order decide print each pages in what order
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Print.PrintPageOrder.DownThenOver">
            <summary>
            First down, then over (Vertical Paging) (Default)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Print.PrintPageOrder.OverThenDown">
            <summary>
            First over, then down (Horizontal Paging)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Core.IRange">
            <summary>
            Interface that represents a range location on worksheet (Combine from IRowRange and IColumnRange)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridRange">
            <summary>
            Define a range on spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.#ctor(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Create range position by specify the left-top and bottom-right cell position.
            </summary>
            <param name="startPos">left-top cell position of range to be created</param>
            <param name="endPos">right-bottom position of range to be created</param>
            <exception cref="T:System.ArgumentException">throw when specified address is invalid</exception>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.#ctor(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Create range position which contains only one cell (or merged cell)
            </summary>
            <param name="singlePos">cell position used to create range position</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create range position by specify the range position and size
            </summary>
            <param name="row">zero-based number of row of range to be created</param>
            <param name="col">zero-based number of column of range to be created</param>
            <param name="rows">number of rows inside the range to be created (at least one row)</param>
            <param name="cols">number of columns inside the range to be created (at least one column)</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.#ctor(System.String,System.String)">
            <summary>
            Create range position by specify two cell address (left-top and bottom-right) 
            </summary>
            <param name="startCell">address of left-top cell</param>
            <param name="endCell">address of right-bottom cell</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.#ctor(System.String)">
            <summary>
            Create range position by specify only one cell address (range contains only one cell, or merged cell)
            </summary>
            <param name="address">address to locate the cell contained in the range</param>
            <exception cref="T:System.ArgumentException">throw when specified address is invalid</exception>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.Offset(System.Int32,System.Int32)">
            <summary>
            Offset range by specified number of rows and cols
            </summary>
            <param name="rows">rows to be offseted</param>
            <param name="cols">cols to be offseted</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.Equals(System.Object)">
            <summary>
            Check for whether or not specified object is same as this range
            </summary>
            <param name="obj">target range to be checked</param>
            <returns>true if two ranges are same, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.op_Equality(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Compare whether or not specified two ranges are same
            </summary>
            <param name="r1">first range to be compared</param>
            <param name="r2">second range to be compared</param>
            <returns>true if two ranges are same, false if ranges are not same</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.op_Inequality(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Compare whether or not specified two ranges are same
            </summary>
            <param name="r1">first range to be compared</param>
            <param name="r2">second range to be compared</param>
            <returns>true if two ranges are not same, false if ranges are same</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.GetHashCode">
            <summary>
            Calculate hash code for this range
            </summary>
            <returns>hash code calculated for this range</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.Contains(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check whether the position is contained by this range
            </summary>
            <param name="pos">Position to be checked</param>
            <returns>true if the position is contained by this range</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.Contains(System.Int32,System.Int32)">
            <summary>
            Check whether the position specified by row and col is contained by this range
            </summary>
            <param name="row">row of position</param>
            <param name="col">col of position</param>
            <returns>true if position is contained by this range</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.Contains(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Copmpare another range and check whether or not the range is contained by this range
            </summary>
            <param name="range">Another range to be checked</param>
            <returns>True if the specified range is contained by this range; otherwise false</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.ContainsRow(System.Int32)">
            <summary>
            Check whether the spcified row is contained by this range
            </summary>
            <param name="row">zero-based index of row to be checked</param>
            <returns>true if specified row is contained by this range; otherwise false</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.ContainsColumn(System.Int32)">
            <summary>
            Check whether the specified column is contained by this range
            </summary>
            <param name="col">zero-based index of column to be checked</param>
            <returns>true if specified column is contained by this range; otherwise false</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.IntersectWith(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Check whether or not specified range is intersected with current range
            </summary>
            <param name="range">another range to be checked</param>
            <returns>true if specified range is intersected with current range; otherwise false</returns>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridRange.Empty">
            <summary>
            Empty range constant define
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridRange.EntireRange">
            <summary>
            Entire range constant define
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.ToString">
            <summary>
            Convert range to string
            </summary>
            <returns>string of this range</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.ToAddress">
            <summary>
            Convert range into address in A1:B1 style
            </summary>
            <returns>converted address from this range position</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.ToAbsoluteAddress">
            <summary>
            Convert into absolute address
            </summary>
            <returns>absolute address identifier</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.ToStringSpans">
            <summary>
            Convert range into string in span style (4R x 3C)
            </summary>
            <returns>converted string of span style</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.IsValidAddress(System.String)">
            <summary>
            Check whether the string is a valid address in current spreadsheet
            </summary>
            <param name="address">address to be checked</param>
            <returns>true if address is valid</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.FromCellPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create range position instance from specified four coordinates. 
            This method finds and uses the minimum and maximum row and column automatically.
            </summary>
            <param name="startRow">Number of row</param>
            <param name="startColumn">Number of column</param>
            <param name="endRow">Number of end row</param>
            <param name="endColumn">Number of end column</param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridRange.Union(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Union two range positions and return a new merged range.
            </summary>
            <param name="range1">The first range to be combined.</param>
            <param name="range2">The secondary range to be combined.</param>
            <returns>Return the new range combined from specified two range positions.</returns>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.Row">
            <summary>
            The start row of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.Col">
            <summary>
            The start column of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.Rows">
            <summary>
            Rows of range. (minimum is 1)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.Cols">
            <summary>
            Columns of range. (minimum is 1)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.EndRow">
            <summary>
            Then end row of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.EndCol">
            <summary>
            The end column of range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.StartPos">
            <summary>
            The start location of range.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.EndPos">
            <summary>
            The end location of range.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.IsEmpty">
            <summary>
            Return whether current range is empty
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridRange.IsSingleCell">
            <summary>
            Identify whether this range only contains one single cell
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReferenceRange">
            <summary>
            Represents a range object refer to spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.Contains(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Check whether or not the specified position is contained by this range
            </summary>
            <param name="pos">position to be checked</param>
            <returns>true if specified position is contained by this range</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.Merge">
            <summary>
            Merge this range into single cell
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.Unmerge">
            <summary>
            Unmerge this range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.GroupRows">
            <summary>
            Group all rows in this range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.GroupColumns">
            <summary>
            Group all columns in this range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.UngroupRows">
            <summary>
            Ungroup all rows in this range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.UngroupColumns">
            <summary>
            Ungroup all columns in this range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRange.op_Implicit(unvell.ReoGrid.ReferenceRange)~unvell.ReoGrid.ReoGridRange">
            <summary>
            Convert to ReoGridRange struct
            </summary>
            <param name="refRange">the object to be converted</param>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Worksheet">
            <summary>
            Get or set the worksheet which contains this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Range">
            <summary>
            Get or set range position
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.StartPos">
            <summary>
            Get or set start position
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.EndPos">
            <summary>
            Get or set end position
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Row">
            <summary>
            Zero-based number of row to locate the start position of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Column">
            <summary>
            Zero-based number of column to locate the start position of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Col">
            <summary>
            Zero-based number of column to locate the start position of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Rows">
            <summary>
            Get or set number of rows
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Cols">
            <summary>
            Get or set number of columns
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.EndRow">
            <summary>
            Get or set end number of row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.EndColumn">
            <summary>
            Get or set end number of column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.EndCol">
            <summary>
            Get or set end number of column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Hover">
            <summary>
            Decide whether this range is hover
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.IsMergedCell">
            <summary>
            Determine whether or not this range contains only one merged cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Data">
            <summary>
            Get or set data of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Style">
            <summary>
            Get the style set of this range, modify the style of this range will affect all cells inside this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderLeft">
            <summary>
            Get or set left border style of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderTop">
            <summary>
            Get or set top border style of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderRight">
            <summary>
            Get or set right border style of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderBottom">
            <summary>
            Get or set bottom border style of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderInsideAll">
            <summary>
            Get or set all inside borders style in this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderInsideHorizontal">
            <summary>
            Get or set all horizontal borders style in this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderInsideVertical">
            <summary>
            Get or set all vertical borders inside this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderOutline">
            <summary>
            Get or set outline border style of this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.BorderAll">
            <summary>
            Get or set all inside borders style in this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.IsReadonly">
            <summary>
            Set or get readonly property to all cells inside this range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRange.Cells">
            <summary>
            Get the collection of all cell instances in this range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.NamedRange">
            <summary>
            Named range reference to spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NamedRange.#ctor(unvell.ReoGrid.Worksheet,System.String,System.String)">
            <summary>
            Create named range from specified worksheet and address
            </summary>
            <param name="worksheet">worksheet to hold this named range</param>
            <param name="name">name to identify this range on spreadsheet</param>
            <param name="address">address identifier to locate a range on spreadsheet</param>
        </member>
        <member name="M:unvell.ReoGrid.NamedRange.#ctor(unvell.ReoGrid.Worksheet,System.String,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create named range from specified worksheet and address
            </summary>
            <param name="worksheet">worksheet to hold this named range</param>
            <param name="name">name to identify this range on spreadsheet</param>
            <param name="range">address identifier to locate a range on spreadsheet</param>
        </member>
        <member name="M:unvell.ReoGrid.NamedRange.#ctor(unvell.ReoGrid.Worksheet,System.String,unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Create named range from specified worksheet and address
            </summary>
            <param name="worksheet">worksheet to hold this named range</param>
            <param name="name">name to identify this range on spreadsheet</param>
            <param name="startPos">start position to locate range start on spreadsheet</param>
            <param name="endPos">start position to locate range end on spreadsheet</param>
        </member>
        <member name="M:unvell.ReoGrid.NamedRange.IsValidName(System.String)">
            <summary>
            Check whether or not the specified name is valid name
            </summary>
            <param name="name">Name to be checked</param>
            <returns>True if specified name is valid; otherwise return false</returns>
        </member>
        <member name="P:unvell.ReoGrid.NamedRange.Name">
            <summary>
            Name to the range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.NamedRange.Comment">
            <summary>
            Comment for describing this range
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.NamedRange.NameChanged">
            <summary>
            Event raised when name is changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.NamedRange.Scope">
            <summary>
            Get or set the scope of named range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.NamedRangeScope">
            <summary>
            Scope flags for named range
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.NamedRangeScope.Workbook">
            <summary>
            Named range is valid inside whole workbook (available for all worksheets)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.NamedRangeScope.Worksheet">
            <summary>
            Named range is valid inside specified worksheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.NamedRangeCollection">
            <summary>
            Collection of named range in workbook
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeCollection.Add(unvell.ReoGrid.NamedRange)">
            <summary>
            Add named range instance
            </summary>
            <param name="item">range to be added</param>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeCollection.Clear">
            <summary>
            Clear all named range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeCollection.Contains(unvell.ReoGrid.NamedRange)">
            <summary>
            Check whether or not specified range exists already
            </summary>
            <param name="range">Range to be checked</param>
            <returns>Return true if specified range exists; Otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeCollection.CopyTo(unvell.ReoGrid.NamedRange[],System.Int32)">
            <summary>
            Copy named ranges into specified array
            </summary>
            <param name="array">Array to store named range</param>
            <param name="arrayIndex">Index to start copy ranges</param>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeCollection.Remove(unvell.ReoGrid.NamedRange)">
            <summary>
            Remove specified range from named range list
            </summary>
            <param name="range">Range to be removed</param>
            <returns>Return true if specified range can be found, and removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeCollection.GetEnumerator">
            <summary>
            Get enumerator of this collection
            </summary>
            <returns>Enumerator used to iterate over this collection</returns>
        </member>
        <member name="P:unvell.ReoGrid.NamedRangeCollection.Count">
            <summary>
            Get number of named ranges
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.NamedRangeCollection.IsReadOnly">
            <summary>
            Check whether or not to allow modify named range collection in this workbook
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.HighlightRange">
            <summary>
            Highlight range reference to spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.HighlightRange.HighlightColor">
            <summary>
            Highlight color to display range on spreadsheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Core.ReoGridRenderHorAlign">
            <summary>
            Cell horizontal alignment for render (cell-auto-format)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridHorAlign">
            <summary>
            Cell horizontal alignment (default: General)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridHorAlign.General">
            <summary>
            General horizontal alignment (Spreadsheet decides the alignment automatically)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridHorAlign.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridHorAlign.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridHorAlign.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridHorAlign.DistributedIndent">
            <summary>
            Distributed to fill the space of cell
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridVerAlign">
            <summary>
            Cell vertical alignment (default: Middle)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridVerAlign.General">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridVerAlign.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridVerAlign.Middle">
            <summary>
            Middle
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridVerAlign.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.PlainStyleFlag">
            <summary>
            Key of cell style item
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.None">
            <summary>
            None style will be added or removed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontName">
            <summary>
            Font name
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontSize">
            <summary>
            Font size
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontStyleBold">
            <summary>
            Font bold
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontStyleItalic">
            <summary>
            Font italic
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontStyleStrikethrough">
            <summary>
            Font strikethrough
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontStyleUnderline">
            <summary>
            Font underline
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.TextColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.BackColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.LineColor">
            <summary>
            Line color (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.LineStyle">
            <summary>
            Line style (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.LineWeight">
            <summary>
            Line weight (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.LineStartCap">
            <summary>
            Line start cap (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.LineEndCap">
            <summary>
            Line end cap (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.HorizontalAlign">
            <summary>
            Horizontal alignements
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.VerticalAlign">
            <summary>
            Vertical alignement
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FillPatternColor">
            <summary>
            Background pattern color (not supported in WPF version)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FillPatternStyle">
            <summary>
            Background pattern style (not supported in WPF version)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.TextWrap">
            <summary>
            Text wrap (word-break mode)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.Indent">
            <summary>
            Padding
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.Padding">
            <summary>
            Padding
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.RotateAngle">
            <summary>
            Rotation angle for cell text (0.8.8 Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontStyleAll">
            <summary>
            [Union flag] All flags of font style
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FontAll">
            <summary>
            [Union flag] All font styles (name, size and style)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.LineAll">
            <summary>
            [Union flag] All line styles (color, style, weight and caps)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.LayoutAll">
            <summary>
            [Union flag] All layout styles (Text-wrap, padding and angle)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.AlignAll">
            <summary>
            [Union flag] Both horizontal and vertical alignments
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.FillPattern">
            <summary>
            [Union flag] Background pattern (color and style)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.BackAll">
            <summary>
            [Union flag] All background style (color and pattern)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.PlainStyleFlag.All">
            <summary>
            [Union flag] All style items
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.TextWrapMode">
            <summary>
            Text-wrap mode of cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.TextWrapMode.NoWrap">
            <summary>
            No break (default)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.TextWrapMode.WordBreak">
            <summary>
            Normal word break
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.TextWrapMode.BreakAll">
            <summary>
            Break enabled for all characters
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.PaddingValue">
            <summary>
            Padding value struct
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.PaddingValue.#ctor(System.Double)">
            <summary>
            Create padding and set all values with same specified value
            </summary>
            <param name="all">Value applied to all padding</param>
        </member>
        <member name="M:unvell.ReoGrid.PaddingValue.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create padding with every values
            </summary>
            <param name="top">Top padding</param>
            <param name="bottom">Bottom padding</param>
            <param name="left">Left padding</param>
            <param name="right">Right padding</param>
        </member>
        <member name="F:unvell.ReoGrid.PaddingValue.Empty">
            <summary>
            Predefined empty padding value
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.PaddingValue.op_Equality(unvell.ReoGrid.PaddingValue,unvell.ReoGrid.PaddingValue)">
            <summary>
            Compare two padding values whether are same
            </summary>
            <param name="p1">Padding value 1 to be compared</param>
            <param name="p2">Padding value 2 to be compared</param>
            <returns>True if two padding values are same; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.PaddingValue.op_Inequality(unvell.ReoGrid.PaddingValue,unvell.ReoGrid.PaddingValue)">
            <summary>
            Compare two padding values whether are not same
            </summary>
            <param name="p1">Padding value 1 to be compared</param>
            <param name="p2">Padding value 2 to be compared</param>
            <returns>True if two padding values are not same; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.PaddingValue.Equals(System.Object)">
            <summary>
            Compare an object and check whether two padding value are same
            </summary>
            <param name="obj">Another object to be checked</param>
            <returns>True if two padding values are same; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.PaddingValue.GetHashCode">
            <summary>
            Get hash code of this object
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:unvell.ReoGrid.PaddingValue.Top">
            <summary>
            Get or set top padding
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.PaddingValue.Bottom">
            <summary>
            Get or set bottom padding
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.PaddingValue.Left">
            <summary>
            Get or set left padding
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.PaddingValue.Right">
            <summary>
            Get or set right padding
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.WorksheetRangeStyle">
            <summary>
            Styles of range or cells. By specifying PlainStyleFlag to determine 
            what styles should be used in this set.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.#ctor">
            <summary>
            Construct an empty style set
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.#ctor(unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Construct style set by copying from another one
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.Clone(unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Create a duplication style from specified style
            </summary>
            <param name="source">the style to be copied</param>
            <returns>new duplicated style</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.CopyFrom(unvell.ReoGrid.WorksheetRangeStyle)">
            <summary>
            Copy styles from another one
            </summary>
            <param name="s">style to be copied</param>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetRangeStyle.Empty">
            <summary>
            Predefined empty style set
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.Equals(System.Object)">
            <summary>
            Compare two styles whether or not the same
            </summary>
            <param name="obj">another style object compared to this object</param>
            <returns>true if thay are same; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.GetHashCode">
            <summary>
            Get hash code of this object
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.HasStyle(unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Check whether this set of style contains specified style item
            </summary>
            <param name="flag">style item to be checked</param>
            <returns>ture if this set contains specified style item</returns>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetRangeStyle.HasAny(unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Check whether this set of style contains any of one of specified style items
            </summary>
            <param name="flag">style items to be checked</param>
            <returns>true if this set contains any one of specified items</returns>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.Flag">
            <summary>
            Get or set the styles flag that indicates what styles are contained in this style set
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.BackColor">
            <summary>
            Get or set background color 
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.FillPatternColor">
            <summary>
            Get or set backgrond pattern color.
            When set pattern color or pattern style, the background color should also be set.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.FillPatternStyle">
            <summary>
            Get or set background pattern style.
            When set pattern color or pattern style, the background color should also be set.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.TextColor">
            <summary>
            Get or set text color
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.FontName">
            <summary>
            Get or set font name
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.FontSize">
            <summary>
            Get or set font size
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.Bold">
            <summary>
            Get or set bold style
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.Italic">
            <summary>
            Get or set italic style
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.Strikethrough">
            <summary>
            Get or set strikethrough style
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.Underline">
            <summary>
            Get or set underline style
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.HAlign">
            <summary>
            Get or set horizontal alignment
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.VAlign">
            <summary>
            Get or set vertical alignment
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.TextWrapMode">
            <summary>
            Get or set text-wrap mode
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.Indent">
            <summary>
            Get or set text indent (0-65535)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.Padding">
            <summary>
            Get or set padding
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetRangeStyle.RotateAngle">
            <summary>
            Get or set rotate angle
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridRangeStyle">
            <summary>
            Obsoleted range style object, changed to ReoGridStyleObject
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReferenceStyle">
            <summary>
            Referenced style instance to cell of range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceStyle.op_Implicit(unvell.ReoGrid.ReferenceStyle)~unvell.ReoGrid.WorksheetRangeStyle">
            <summary>
            Convert style reference to style object
            </summary>
            <param name="refStyle">style reference to be converted</param>
            <returns>style object converted from style reference</returns>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceStyle.Worksheet">
            <summary>
            Get worksheet instance
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReferenceRangeStyle">
            <summary>
            Range reference to spreadsheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.BackColor">
            <summary>
            Get or set the background color to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.TextColor">
            <summary>
            Get or set the text color to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.FontName">
            <summary>
            Get or set the font name to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.FontSize">
            <summary>
            Get or set the font size to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.Bold">
            <summary>
            Get or set bold font style to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.Italic">
            <summary>
            Get or set italic font style to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.Underline">
            <summary>
            Get or set underline font style to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.Strikethrough">
            <summary>
            Get or set the strikethrough to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.HorizontalAlign">
            <summary>
            Get or set the horizontal alignment to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.VerticalAlign">
            <summary>
            Get or set the vertical alignment to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.Padding">
            <summary>
            Get or set the padding to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.TextWrap">
            <summary>
            Get or set the text-wrap style to entire range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceRangeStyle.Indent">
            <summary>
            Get or set the cell indent
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ColumnHeaderStyle">
            <summary>
            Referenced style for column header
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ColumnHeaderStyle.columnHeader">
            <summary>
            Column header instance
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.Bold">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.Italic">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.Strikethrough">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.Underline">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.HorizontalAlign">
            <summary>
            Get or set horizontal alignment for all cells on this column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.VerticalAlign">
            <summary>
            Get or set horizontal alignment for all cells on this column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.Padding">
            <summary>
            Get or set padding for all cells on this column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.BackColor">
            <summary>
            Get or set background color for all cells on this column
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ColumnHeaderStyle.TextColor">
            <summary>
            Get or set background color for all cells on this column
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.RowHeaderStyle">
            <summary>
            Refereced style for row header
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.Bold">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.Italic">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.Strikethrough">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.Underline">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.HorizontalAlign">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.VerticalAlign">
            <summary>
            Get or set horizontal alignment for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.Padding">
            <summary>
            Get or set padding for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.BackColor">
            <summary>
            Get or set background color for all cells on this row
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.RowHeaderStyle.TextColor">
            <summary>
            Get or set background color for all cells on this row
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReferenceCellStyle">
            <summary>
            Referenced cell style
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceCellStyle.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create referenced cell style
            </summary>
            <param name="sheet"></param>
            <param name="cell"></param>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.Cell">
            <summary>
            Referenced cell instance
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.BackColor">
            <summary>
            Get or set cell background color
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.HAlign">
            <summary>
            Get or set the horizontal alignment for the cell content
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.VAlign">
            <summary>
            Get or set the vertical alignment for the cell content
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.TextColor">
            <summary>
            Get or set text color of cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.FontName">
            <summary>
            Get or set font name of cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.FontSize">
            <summary>
            Get or set font name of cell
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.Bold">
            <summary>
            Determine whether or not the font style is bold
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.Italic">
            <summary>
            Determine whether or not the font style is italic
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.Strikethrough">
            <summary>
            Determine whether or not the font style has strikethrough
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.Underline">
            <summary>
            Determine whether or not the font style has underline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.TextWrap">
            <summary>
            Get or set the cell text-wrap mode
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.Indent">
            <summary>
            Get or set cell indent
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.Padding">
            <summary>
            Get or set padding of cell layout
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReferenceCellStyle.RotateAngle">
            <summary>
            Get or set text rotation angle
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.EndEditReason">
            <summary>
            Reason for ending of cell edit
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.EndEditReason.NormalFinish">
            <summary>
            User edit has done normally
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.EndEditReason.Cancel">
            <summary>
            User has cancelled edit operation
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.WorksheetSelectionMode">
            <summary>
            Selection Mode for Control
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionMode.None">
            <summary>
            Do not allow to select anything
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionMode.Cell">
            <summary>
            Only allow to select aingle cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionMode.Range">
            <summary>
            Allow to select single cell or ranges. (Default)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionMode.Row">
            <summary>
            Always to select entire rows
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionMode.Column">
            <summary>
            Always to select entire columns
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionMode.SingleRow">
            <summary>
            Allow select only one row (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionMode.SingleColumn">
            <summary>
            Allow select only one column (Reserved)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.WorksheetSelectionStyle">
            <summary>
            Selection Style for Control
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionStyle.None">
            <summary>
            No selection will be drawn
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionStyle.Default">
            <summary>
            Default selection style
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSelectionStyle.FocusRect">
            <summary>
            Windows classic focus rectangle style
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.SelectionForwardDirection">
            <summary>
            Selection Forward Direction for Control. When user finished cell edit,
            the focus-selection moves into the next position to 'right' or 'down'
            of current range according this enum.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.SelectionForwardDirection.Right">
            <summary>
            Move into next position of right of current range
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.SelectionForwardDirection.Down">
            <summary>
            Move into next position of down of current range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.FocusPosStyle">
            <summary>
            Determine the style to show focus cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FocusPosStyle.Default">
            <summary>
            Default style (cell with no background filled)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FocusPosStyle.None">
            <summary>
            Nothing specical on focus cell
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.OperationStatus">
            <summary>
            Behavior for spreadsheet operations
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.OperationStatus.Default">
            <summary>
            Change Selection Range, Edit cell, Move focus cell by keyboard and etc.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.OperationStatus.RangeSelect">
            <summary>
            Selecting focus range by dragging mouse
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.OperationStatus.AdjustRowHeight">
            <summary>
            Adjust row height or column width
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.OperationStatus.DragSelectionFillSerial">
            <summary>
            Allow drag selection to fill serial data
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.OperationStatus.SelectionRangeMove">
            <summary>
            Move a selection range by dragging mouse on border of selection
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.OperationStatus.RangePicker">
            <summary>
            Picking a range during formula inputting
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.FreezePosition">
            <summary>
            Positions to dock freezing cells
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.None">
            <summary>
            Do not freeze to any positions
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.Left">
            <summary>
            Freeze to left 
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.Top">
            <summary>
            Freeze to top
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.Right">
            <summary>
            Freeze to right
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.Bottom">
            <summary>
            Freeze to bottom
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.LeftTop">
            <summary>
            Freeze to left and top
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.LeftBottom">
            <summary>
            Freeze to left and bottom
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.RightTop">
            <summary>
            Freeze to right and top
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.FreezePosition.RightBottom">
            <summary>
            Freeze to right and bottom
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridViewMode">
            <summary>
            View mode of current worksheet
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridViewMode.Normal">
            <summary>
            Normal view
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridViewMode.PageView">
            <summary>
            Page view
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.ReoGridViewMode.Custom">
            <summary>
            Custom view (Reserved)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.WorksheetSettings">
            <summary>
            Worksheet Settings
            </summary>
            <remarks>Refer to: http://reogrid.net/document/settings </remarks>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Default">
            <summary>
            Default settings set
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_Default">
            <summary>
            Allows AutoFormatCell, FriendlyPercentInput, AutoAdjustRowHeight
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_Readonly">
            <summary>
            Indicates that Control works in readonly mode. Any changes are not allowed
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_AutoFormatCell">
            <summary>
            Allow data format after text editing by user
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_FriendlyPercentInput">
            <summary>
            Allow putting '%' symbol at end of text when percent inputing
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_AutoAdjustRowHeight">
            <summary>
            Allow adjusting the height of row when user enlarges font of cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_AllowAdjustRowHeight">
            <summary>
            Allows user to adjust height of row by mouse
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_AllowAdjustColumnWidth">
            <summary>
            Allows user to adjust column of width by mouse
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_DragSelectionToMoveCells">
            <summary>
            Allows that user drag-drops selection to move content
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Edit_DragSelectionToFillSerial">
            <summary>
            Allows that user drag-drops selection to fill serial or clear data
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_Default">
            <summary>
            All settings of behaivor setting
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:unvell.ReoGrid.WorksheetSettings.Behavior_DoubleClickToResizeHeight" -->
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_DoubleClickToFitRowHeight">
            <summary>
            Allow double click to make the row height fit to maximum text height of cells
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_DoubleClickToFitColumnWidth">
            <summary>
            Allow double click to make the column width fit to maximum column width of cells
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_MouseWheelToScroll">
            <summary>
            Allow to scroll spreadsheet by mouse wheeling
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_MouseWheelToZoom">
            <summary>
            Allow user to zoom the spreadsheet by wheeling mouse
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_ShortcutKeyToZoom">
            <summary>
            Allow user to zoom the spreadsheet by hotkeys (ctrl + plus/minus)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_AllowUserChangingPageBreaks">
            <summary>
            Allow user to insert or adjust the page breaks by mouse 
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_DragToMoveCells">
            <summary>
            Allow user to move selected cells by dragging mouse
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Behavior_ScrollToFocusCell">
            <summary>
            Allow that always scroll the view in order to show the focus cell entirely
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_Default">
            <summary>
            Default view settings (View_ShowHeaders | View_ShowGridLine | View_AllowShowOutlines)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowColumnHeader">
            <summary>
            Show Column Header
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowRowHeader">
            <summary>
            Show Row Indexer
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowHeaders">
            <summary>
            Show Column Header and Row Indexer
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowHorizontalRuler">
            <summary>
            Show Horizontal Ruler (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowVerticalRuler">
            <summary>
            Show Vertical Ruler (Reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowRulers">
            <summary>
            Show rulers in horizontal and vertical direction
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowGridLine">
            <summary>
            Show Grid Line
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_AllowShowRowOutlines">
            <summary>
            Allow to show outlines for rows 
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_AllowShowColumnOutlines">
            <summary>
            Allow to show outlines for columns
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_AllowShowOutlines">
            <summary>
            Allow to show outlines on both row and column
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowHiddenCellLine">
            <summary>
            Allow cell text be displayed overflow the boundary of cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_AllowCellTextOverflow">
            <summary>
            Allow cell text be displayed overflow the boundary of cell
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_ShowPageBreaks">
            <summary>
            Enable to show pages boundaries for printing areas
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.View_AntialiasDrawing">
            <summary>
            Enable anti-alias drawing
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Formula_Default">
            <summary>
            Default formula settings
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Formula_AutoUpdateReferenceCell">
            <summary>
            Allow to update formula reference cells automatically
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Formula_AutoPickingCellAddress">
            <summary>
            Allow to pick an address from selected cell during formula editing (0.8.8 reserved)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorksheetSettings.Formula_AutoRebuild">
            <summary>
            Allow to correct or rebuild formula automatically (0.8.8 reserved)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Data.AutoColumnFilter">
            <summary>
            Built-in auto column filter
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.Apply">
            <summary>
            Apply filter to update spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.Attach(unvell.ReoGrid.Worksheet,unvell.ReoGrid.Data.AutoColumnFilterUI)">
            <summary>
            Attach filter to specified worksheet
            </summary>
            <param name="worksheet">instance of worksheet to be attached</param>
            <param name="uiFlag">Flags to decide which styles of GUI to be dispalyed (default is DropdownButtonAndPanel style)</param>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.Detach">
            <summary>
            Detach filter from specified worksheet
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.Worksheet">
            <summary>
            Worksheet instance
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.Columns">
            <summary>
            Get the columns of this filter.
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Data.AutoColumnFilter.FilterButtonPressed">
            <summary>
            Event raised when column filter button has been clicked
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Data.AutoColumnFilter.FilterColumnCollection">
            <summary>
            Collection of column filters
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.FilterColumnCollection.GetEnumerator">
            <summary>
            Get all column filter header body from this filter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.FilterColumnCollection.Item(System.Int32)">
            <summary>
            Get the column filter by specified index
            </summary>
            <param name="index">number of column to get column filter</param>
            <returns>instance of column filter, which contains the candidates list and selected items by user</returns>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.FilterColumnCollection.Item(System.String)">
            <summary>
            Get the column filter by specified address code of column (A, TZ, etc.)
            </summary>
            <param name="columnCode">the alphabet of address code used to locate a column in spreadsheet</param>
            <returns>instance of column filter, which contains the candidates list and selected items by user</returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.OnPaint(unvell.ReoGrid.Rendering.CellDrawingContext,unvell.ReoGrid.Graphics.Size)">
            <summary>
            Repaint filter header body
            </summary>
            <param name="dc">ReoGrid drawing context</param>
            <param name="headerSize">Header size</param>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.OnMouseDown(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Events.WorksheetMouseEventArgs)">
            <summary>
            Handling mouse-down process
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Argument of mouse-down event</param>
            <returns>True if event has been handled; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.OnMouseMove(unvell.ReoGrid.Graphics.Size,unvell.ReoGrid.Events.WorksheetMouseEventArgs)">
            <summary>
            Handling mouse-move process
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Argument of mouse-move event</param>
            <returns>True if event has been handled, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.GetDistinctItems">
            <summary>
            Get distinct items from spreadsheet on current column
            </summary>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.OnDataChange(System.Int32,System.Int32)">
            <summary>
            Invoked when spreadsheet data changed on this column
            </summary>
            <param name="startRow">zero-based number of first row that data has been changed</param>
            <param name="endRow">zero-based number of last row that data has been changed</param>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.ColumnHeader">
            <summary>
            Column header instance
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.IsSelectAll">
            <summary>
            Get or set whether or not this column is marked as SelectAll.
            The column is marked as SelectAll will be ignored during filter.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.SelectedTextItems">
            <summary>
            Collection of selected items
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection">
            <summary>
            Collection of selected items for column filter
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.GetEnumerator">
            <summary>
            Get the enumeration of items from this filter.
            </summary>
            <returns>Enumeration of items from this filter.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Add(System.String)">
            <summary>
            Add selected item
            </summary>
            <param name="item">item to be added</param>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Clear">
            <summary>
            Clear all selected items
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Contains(System.String)">
            <summary>
            Check whether the specified item is contained in selected items
            </summary>
            <param name="item">item to be checked</param>
            <returns>true if specified item has been contained in selected items, otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copy all selected items into specified array
            </summary>
            <param name="array">array to be filled</param>
            <param name="arrayIndex">number of element start to copy</param>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Remove(System.String)">
            <summary>
            Remove specified item from selected items
            </summary>
            <param name="item">item to be removed</param>
            <returns>true if item exist and has been removed successfully</returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add entire specified array or enumerable list into selected items
            </summary>
            <param name="items">list, array or other enumerable collection to be added</param>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Count">
            <summary>
            Get number of selected items
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.IsReadOnly">
            <summary>
            Check whether or not the collection of selection items is read-only
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Data.AutoColumnFilterUI">
            <summary>
            Flag to create UI of column filter
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Data.AutoColumnFilterUI.NoGUI">
            <summary>
            Do not create any GUI 
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Data.AutoColumnFilterUI.DropdownButton">
            <summary>
            Only create a dropdown button on header
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Data.AutoColumnFilterUI.DropdownButtonAndPanel">
            <summary>
            Create both dropdown button and built-in panel
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Data.FilterButtonPressedEventArgs">
            <summary>
            Event raised when auto filter button was pressed by user
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.FilterButtonPressedEventArgs.#ctor(unvell.ReoGrid.ReoGridColumnHeader)">
            <summary>
            Create filter button pressed event arguments with instance of column header
            </summary>
            <param name="columnHeader"></param>
        </member>
        <member name="P:unvell.ReoGrid.Data.FilterButtonPressedEventArgs.ColumnHeader">
            <summary>
            Get the instance of column header
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Data.FilterButtonPressedEventArgs.IsCancelled">
            <summary>
            Set this flag to prevent open the built-in popup menu
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Data.DictionaryRegularArray`1">
            <summary>
            Implementation of integer-indexed two-dimensional dictionary array.
            (up to 1048576 x 1048576 elements)
            </summary>
            <typeparam name="T">Any type as element in array</typeparam>
        </member>
        <member name="T:unvell.ReoGrid.Data.RegularTreeArray`1">
            <summary>
            Implementation of page-indexed two-dimensional regular array.
            (up to 1048576 x 32768 elements)
            </summary>
            <typeparam name="T">Any type as element in array</typeparam>
        </member>
        <member name="T:unvell.ReoGrid.Data.TreeArray`1">
            <summary>
            Implementation of page-indexed one-dimensional array.
            (up to 1048576 elements @ 16^5)
            </summary>
            <typeparam name="T">Any type as element in array</typeparam>
        </member>
        <member name="T:unvell.ReoGrid.Data.ArrayHelper">
            <summary>
            Generic Array Utility
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Data.ArrayHelper.QuickFind(System.Int32,System.Int32,System.Func{System.Int32,System.Int32})">
            <summary>
            Binary search for an element from an ordered array
            </summary>
            <param name="start">start position of range to be searched</param>
            <param name="end">end position of range to be searched</param>
            <param name="compare">delegate method is used to test whether an element is target</param>
            <returns>element as result will be returned</returns>
        </member>
        <member name="M:unvell.ReoGrid.Data.ArrayHelper.QuickFind(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32})">
            <summary>
            Binary search for an element from an ordered array
            </summary>
            <param name="split">first element as splitter to be tested</param>
            <param name="start">start position of range to be searched</param>
            <param name="end">end position of range to be searched</param>
            <param name="compare">delegate method is used to test whether an element is target</param>
            <returns>element as result will be returned</returns>
        </member>
        <member name="T:unvell.ReoGrid.Drawing.Shapes.ShapeObject">
            <summary>
            Abstract shape object
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.Shapes.ShapeObject.OnPaint(unvell.ReoGrid.Rendering.DrawingContext)">
            <summary>
            Paint this shape.
            </summary>
            <param name="dc">Instance of cross-platform draiwng context.</param>
        </member>
        <member name="M:unvell.ReoGrid.Drawing.Shapes.ShapeObject.OnPaintText(unvell.ReoGrid.Rendering.DrawingContext)">
            <summary>
            Paint text inside this shape.
            </summary>
            <param name="dc">Instance of cross-platform drawing context.</param>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.Shapes.ShapeObject.Text">
            <summary>
            Get or set the text displayed inside this shape.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Drawing.Shapes.ShapeObject.TextBounds">
            <summary>
            Get the text bounds for display text inside this shape.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaValue.ToString">
            <summary>
            Convert this value into string
            </summary>
            <returns>Return the value in string type</returns>
        </member>
        <member name="T:unvell.ReoGrid.Formula.FormulaStatus">
            <summary>
            Flag to identify the status of formula parsing and calculation
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Formula.FormulaStatus.Normal">
            <summary>
            Normal status (No errors happen)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Formula.FormulaStatus.ParseError">
            <summary>
            Formula has syntax errors and cannot be parsed correctly
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Formula.FormulaStatus.CircularReference">
            <summary>
            Represents that circular reference problem was detected in formula.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Formula.FormulaStatus.InvalidValue">
            <summary>
            A number value was required in formula calculation, but no valid number found. (Like "#VALUE!" in Excel)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Formula.FormulaStatus.NameNotFound">
            <summary>
            A name was referenced in formula, but no valid range was found by this name. (Like "#NAME!" in Excel)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Formula.FormulaStatus.MismatchedParameter">
            <summary>
            Attempt to call a function with mismatched parameter type or amount.
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Formula.FormulaStatus.UnspecifiedError">
            <summary>
            Some unspecified errors happened during formula parsing and calculation.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Formula.FormulaTypeMismatchException">
            <summary>
            This exception will be throw if formula attempts to use a number value during calculation, 
            but the cell data cannot be converted into number value.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaTypeMismatchException.#ctor(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create the exception instance
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Formula.FormulaNoNameException">
            <summary>
            This exception will be thrown if formula attempts to reference a named range, 
            but the name cannot be found or referenced correctly. 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaNoNameException.#ctor(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create the exception instance
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Formula.FormulaParameterMismatchException">
            <summary>
            This exception will be thrown if formula attempts to 
            call a function with mismatched parameters type or amount.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaParameterMismatchException.#ctor(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create the exception instance
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaParameterMismatchException.#ctor(unvell.ReoGrid.ReoGridCell,System.String)">
            <summary>
            Create the exception instance with additional message
            </summary>
            <param name="cell">Cell instance where the exception happened</param>
            <param name="message">Additional message to describe this exception</param>
        </member>
        <member name="T:unvell.ReoGrid.Formula.FormulaExtension">
            <summary>
            Represents the interface of external formula extension
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Formula.FormulaExtension.CustomFunctions">
            <summary>
            Get collection of custom functions
            </summary>
            <example>
            // Example function to make latters uppercase
            unvell.ReoGrid.Formula.FormulaExtension.CustomFunctions["upper"] =
              (args) => {
              
                if (args.Length == 0) 
                {
                  // this function need at least one arguments
            		  return null;
            	  }
            	  
                return Convert.ToString(args[0]).ToUpper();
              };
            </example>
        </member>
        <member name="P:unvell.ReoGrid.Formula.FormulaExtension.NameReferenceProvider">
            <summary>
            Custom provider for named reference parsing
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Formula.FormulaExtension.EmptyCellReferenceProvider">
            <summary>
            Custom provider for empty cell reference returning
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Formula.Parser">
            <summary>
            Excel-compatible formula syntax parser
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.Parser.Parse(unvell.ReoGrid.IWorkbook,unvell.ReoGrid.ReoGridCell,System.String)">
            <summary>
            Convert formula to syntax tree
            </summary>
            <param name="workbook">Workbook instance.</param>
            <param name="cell">Cell instance.</param>
            <param name="input">Formula to be converted.</param>
            <returns>syntax tree constructed from specified formula.</returns>
        </member>
        <member name="M:unvell.ReoGrid.Formula.Parser.DumpTree(unvell.ReoGrid.Formula.STNode,System.String)">
            <summary>
            Recursive to iterate a syntax tree and dump its all of nodes
            </summary>
            <param name="node">root node of syntax tree to be outputted</param>
            <param name="originalInput">Origional input sentence in string</param>
            <returns>output string including the information of each nodes from a syntax tree</returns>
        </member>
        <member name="M:unvell.ReoGrid.Formula.Parser.GenerateFormula(unvell.ReoGrid.Formula.STNode)">
            <summary>
            Generate formula from a syntax tree in memory
            </summary>
            <param name="node">root node of syntax tree used to generate formula</param>
            <returns>formula generated from a syntax tree</returns>
        </member>
        <member name="M:unvell.ReoGrid.Formula.Parser.GenerateFormula(unvell.ReoGrid.Formula.STNode,unvell.ReoGrid.Formula.FormulaFormatFlag)">
            <summary>
            Generate formula form a syntax tree in memory by specified format styles
            </summary>
            <param name="node">root node of syntax tree used to generate formula</param>
            <param name="flag">generating format style flags</param>
            <returns>formula generated from a syntax tree</returns>
        </member>
        <member name="T:unvell.ReoGrid.Formula.STNode">
            <summary>
            ST node
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.STNode.#ctor(System.String,unvell.ReoGrid.Formula.STNodeType,System.Int32,System.Int32)">
            <summary>
            Construct STNode by specified arguments
            </summary>
            <param name="input">Input string to be parsed</param>
            <param name="type">Type of node</param>
            <param name="start">Start index from an input string</param>
            <param name="len">Length of value in an input string</param>
        </member>
        <member name="M:unvell.ReoGrid.Formula.STNode.#ctor(System.String,unvell.ReoGrid.Formula.STNodeType,System.Int32,System.Int32,System.Collections.Generic.List{unvell.ReoGrid.Formula.STNode})">
            <summary>
            Construct STNode by specified arguments
            </summary>
            <param name="input">Input string to be parsed</param>
            <param name="type">Type of node</param>
            <param name="start">Start index from an input string</param>
            <param name="len">Length of value in an input string</param>
            <param name="children">Children nodes of tree from this node</param>
        </member>
        <member name="M:unvell.ReoGrid.Formula.STNode.DumpTree(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Dump tree into string
            </summary>
            <param name="sb">Memory buffer to store the result string</param>
            <param name="originalInput">Original input string</param>
            <param name="indents">Number of spaces used to indent at beginning of a line</param>
        </member>
        <member name="P:unvell.ReoGrid.Formula.STNode.Children">
            <summary>
            Children nodes
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Formula.STNode.Type">
            <summary>
            Type of node
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Formula.STNode.Start">
            <summary>
            Start index from an input string
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Formula.STNode.Length">
            <summary>
            Length of value in an input string
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Formula.STNode.Item(System.Int32)">
            <summary>
            Get child node from specified position
            </summary>
            <param name="index">zero-based number of child to be get</param>
            <returns>child node from specified position</returns>
        </member>
        <member name="T:unvell.ReoGrid.Formula.STNodeType">
            <summary>
            Determine the kind of type for node in a tree
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Formula.FormulaParseException">
            <summary>
            Exception thrown when any errors happen during formula parsing and evaluation.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Formula.FormulaParseException.#ctor(System.String,System.Int32)">
            <summary>
            Create exception with specified message and the position in formula where error happens.
            </summary>
            <param name="message">additional message to describe the error</param>
            <param name="index">zero-based number of character of the position error happened</param>
        </member>
        <member name="P:unvell.ReoGrid.Formula.FormulaParseException.Index">
            <summary>
            Zero-based number of character of the position error happened
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.IO.IFileFormatProvider">
            <summary>
            Interface of file format provider
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.IO.IFileFormatProvider.IsValidFormat(System.String)">
            <summary>
            Check whether specified filepath is valid file format to be processed.
            </summary>
            <param name="file">file path</param>
            <returns>true if specified file is valid format</returns>
        </member>
        <member name="M:unvell.ReoGrid.IO.IFileFormatProvider.Load(unvell.ReoGrid.IWorkbook,System.IO.Stream,System.Text.Encoding,System.Object)">
            <summary>
            Load spreadsheet from specified stream
            </summary>
            <param name="workbook">ReoGrid workbook to be loaded</param>
            <param name="stream">Stream to input serialized data of workbook</param>
            <param name="encoding">Encoding used to read plain-text file format</param>
            <param name="arg">Arguments of format provider</param>
        </member>
        <member name="M:unvell.ReoGrid.IO.IFileFormatProvider.Save(unvell.ReoGrid.IWorkbook,System.IO.Stream,System.Text.Encoding,System.Object)">
            <summary>
            Save spreadsheet to specified stream
            </summary>
            <param name="workbook">ReoGrid workbook to be saved</param>
            <param name="stream">Stream to output serialized data of workbook</param>
            <param name="encoding">Encoding used to write plain-text file format</param>
            <param name="arg">Arguments of format provider</param>
        </member>
        <member name="T:unvell.ReoGrid.IO.CSVFormatArgument">
            <summary>
            Arguments for loading and saving CSV format.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.IO.CSVFormatArgument.#ctor">
            <summary>
            Create the argument object instance.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.IO.CSVFormatArgument.AutoSpread">
            <summary>
            Determines whether or not allow to expand worksheet to load more data from CSV file. (Default is True)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.IO.CSVFormatArgument.BufferLines">
            <summary>
            Determines how many rows read from CSV file one time. (Default is CSVFormat.DEFAULT_READ_BUFFER_LINES = 512)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.IO.CSVFormatArgument.SheetName">
            <summary>
            Determines the default worksheet name if CSV file loaded into a new workbook. (Default is "Sheet1")
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.RGHatchStyle">
            <summary>
            Specifies the different patterns available for System.Drawing.Drawing2D.HatchBrush
            objects. (Equal to System.Drawing.Drawing2D.HatchStyle.Percent50)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Graphics.IGraphics">
            <summary>
            Represents abstract platform-nonassociated drawing context
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Utility.ColorUtility.RgbToHLS(unvell.ReoGrid.Graphics.SolidColor)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="rgbColor"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.ColorUtility.HLSToRgb(unvell.ReoGrid.Utility.HLSColor)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="hlsColor"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.ColorUtility.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.ColorUtility.CalculateFinalLumValue(System.Single,System.Single)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="tint"></param>
            <param name="lum"></param>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Views.SheetTabMouseEventArgs">
            <summary>
            Mouse event arguments for sheet tab control
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.SheetTabMouseEventArgs.MouseButtons">
            <summary>
            Mouse button flags (Left, Right or Middle)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.SheetTabMouseEventArgs.Location">
            <summary>
            Mouse location related to sheet tab control
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.SheetTabMouseEventArgs.Index">
            <summary>
            Number of tab specified by this index to be moved
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.SheetTabMouseEventArgs.Handled">
            <summary>
            Get or set whether the user-code handled this event. 
            Built-in operations will be cancelled if this property is set to true.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Views.SheetTabMovedEventArgs">
            <summary>
            Sheet moved event arguments
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.SheetTabMovedEventArgs.Index">
            <summary>
            Number of tab specified by this index to be moved
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.SheetTabMovedEventArgs.TargetIndex">
            <summary>
            Number of tab as position moved to 
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Views.SheetTabBorderStyle">
            <summary>
            Tab item border style
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.SheetTabBorderStyle.RectShadow">
            <summary>
            Sharp Rectangle
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.SheetTabBorderStyle.SplitRouned">
            <summary>
            Separated Rounded Rectangle
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.SheetTabBorderStyle.NoBorder">
            <summary>
            No Borders (Windows 8 Style)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Views.SheetTabControlPosition">
            <summary>
            Position of tab control will be located
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.SheetTabControlPosition.Top">
            <summary>
            Put at top to other controls
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.SheetTabControlPosition.Bottom">
            <summary>
            Put at bottom to other controls
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Views.ISheetTabControl">
            <summary>
            Representes the sheet tab control interface
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.TranslateScrollPoint(System.Int32)">
            <summary>
            Convert the absolute point on this sheet tab control to scrolled view point
            </summary>
            <param name="p">point to be converted</param>
            <returns>converted view point</returns>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.GetItemBounds(System.Int32)">
            <summary>
            Get rectangle of specified tab item
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.MoveItem(System.Int32,System.Int32)">
            <summary>
            Move item to specified position
            </summary>
            <param name="index">number of tab to be moved</param>
            <param name="targetIndex">position of moved to</param>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.ScrollToItem(System.Int32)">
            <summary>
            Scroll view to show tab item by specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.AddTab(System.String)">
            <summary>
            Add tab
            </summary>
            <param name="title">Title of tab</param>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.InsertTab(System.Int32,System.String)">
            <summary>
            Insert tab
            </summary>
            <param name="index">Zero-based number of tab</param>
            <param name="title">Title of tab</param>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.UpdateTab(System.Int32,System.String)">
            <summary>
            Update tab title
            </summary>
            <param name="index">Zero-based number of tab</param>
            <param name="title">Title of tab</param>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.RemoveTab(System.Int32)">
            <summary>
            Remove specified tab
            </summary>
            <param name="index">Zero-based number of tab</param>
        </member>
        <member name="M:unvell.ReoGrid.Views.ISheetTabControl.ClearTabs">
            <summary>
            Clear all tabs
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.ISheetTabControl.BorderColor">
            <summary>
            Get or set the border color
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.ISheetTabControl.SelectedBackColor">
            <summary>
            Get or set the background color for selected tab
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.ISheetTabControl.SelectedTextColor">
            <summary>
            Get or set the text color for selected tab
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.ISheetTabControl.SelectedIndex">
            <summary>
            Get or set the current tab index
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Views.ISheetTabControl.TabMoved">
            <summary>
            Event raised when tab item is moved
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Views.ISheetTabControl.SelectedIndexChanged">
            <summary>
            Event raised when selected tab is changed
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Views.ISheetTabControl.SplitterMoving">
            <summary>
            Event raised when splitter is moved
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Views.ISheetTabControl.SheetListClick">
            <summary>
            Event raised when sheet list button is clicked
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Views.ISheetTabControl.NewSheetClick">
            <summary>
            Event raised when new sheet butotn is clicked
            </summary>
        </member>
        <member name="E:unvell.ReoGrid.Views.ISheetTabControl.TabMouseDown">
            <summary>
            Event raised when mouse is pressed down on tab items
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.ISheetTabControl.ControlWidth">
            <summary>
            Get or set the width of sheet tab control
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.ISheetTabControl.TabCount">
            <summary>
            Get current number of tabs
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.ISheetTabControl.AllowDragToMove">
            <summary>
            Determine whether or not allow to move tab by dragging mouse
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Views.CellsViewport.TryGetCellPositionToControl(unvell.ReoGrid.Views.IView,unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.Graphics.Point@)">
            <summary>
            Transform position of specified cell into the position on control
            </summary>
            <param name="view">Source view of the specified cell position.</param>
            <param name="pos">Cell position to be converted.</param>
            <param name="p">Output point of the cell position related to grid control.</param>
            <returns>True if conversion is successful; Otherwise return false.</returns>
        </member>
        <member name="T:unvell.ReoGrid.Views.NormalViewportController">
            <summary>
            Standard view controller for normal scene of control
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Views.IFreezableViewportController">
            <summary>
            Interface for freezable ViewportController
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Views.IFreezableViewportController.Freeze(System.Int32,System.Int32)">
            <summary>
            Freeze to specified cell
            </summary>
            <param name="row">Number of row of cell position</param>
            <param name="col">Number of column of cell position</param>
        </member>
        <member name="M:unvell.ReoGrid.Views.IFreezableViewportController.Freeze(System.Int32,System.Int32,unvell.ReoGrid.FreezePosition)">
            <summary>
            Freeze to specified cell and position
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="position"></param>
        </member>
        <member name="P:unvell.ReoGrid.Views.IFreezableViewportController.FreezePosition">
            <summary>
            Get or set position of freezing viewport
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Views.IFreezableViewportController.FreezePos">
            <summary>
            Get current frozen position
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Views.NormalViewportController.GetVisibleRegion(unvell.ReoGrid.Worksheet,unvell.ReoGrid.Views.Viewport)">
            <summary>
            Update visible region for viewport. Visible region decides how many rows and columns 
            of cells (from...to) will be displayed.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetEventArgs">
            <summary>
            Common worksheet event arguments 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetEventArgs.#ctor(unvell.ReoGrid.Worksheet)">
            <summary>
            Create common worksheet event arguments with specified instance of worksheet
            </summary>
            <param name="sheet">instance of worksheet related to the event</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetEventArgs.Worksheet">
            <summary>
            Instance of worksheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorkbookActionEventArgs">
            <summary>
            Arguments of event which will be fired when action is performed by worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorkbookActionEventArgs.#ctor(unvell.Common.IAction)">
            <summary>
            Create this event argument with specified action
            </summary>
            <param name="action">instance of action</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorkbookActionEventArgs.Action">
            <summary>
            Action is performed
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.BeforeActionPerformEventArgs">
            <summary>
            Event argument for before action perform
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.BeforeActionPerformEventArgs.#ctor(unvell.Common.IAction)">
            <summary>
            Create event argument with specified action
            </summary>
            <param name="action">Action to be performed</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeActionPerformEventArgs.IsCancelled">
            <summary>
            Determine whehter to abort perform current action
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetCreatedEventArgs">
            <summary>
            Worksheet creating event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetCreatedEventArgs.#ctor(unvell.ReoGrid.Worksheet)">
            <summary>
            Create this event argument with specified instance of worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetInsertedEventArgs">
            <summary>
            Worksheet inserting event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetInsertedEventArgs.#ctor(unvell.ReoGrid.Worksheet)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetInsertedEventArgs.Index">
            <summary>
            Zero-based number of sheet is inserted
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetRemovedEventArgs">
            <summary>
            Worksheet removing event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetRemovedEventArgs.#ctor(unvell.ReoGrid.Worksheet)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetRemovedEventArgs.Index">
            <summary>
            Index of worksheet in workbook before removing
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetNameChangingEventArgs">
            <summary>
            Worksheet's name changing event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetNameChangingEventArgs.#ctor(unvell.ReoGrid.Worksheet,System.String)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
            <param name="name">new name of worksheet</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetNameChangingEventArgs.NewName">
            <summary>
            Get or set the new name used to instead of the old name of worksheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CurrentWorksheetChangedEventArgs">
            <summary>
            Worksheet changing event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CurrentWorksheetChangedEventArgs.#ctor(unvell.ReoGrid.Worksheet)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CurrentWorksheetChangedEventArgs.Index">
            <summary>
            Zero-based number of sheet has changed
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellPosEventArgs">
            <summary>
            Position event argument on spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellPosEventArgs.#ctor(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Construc this position event argument with specfieid position
            </summary>
            <param name="pos">zero-based two-dimensional coordinates on spreadsheet</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellPosEventArgs.Position">
            <summary>
            Zero-based two-dimensional coordinates to locate a cell on spreadsheet
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellEventArgs">
            <summary>
            Event raised on action was performed for any cells
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellEventArgs.#ctor(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create instance for CellEventArgs with specified cell
            </summary>
            <param name="cell">Cell of action performed</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellEventArgs.Cell">
            <summary>
            Cell of action performed
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetMouseEventArgs">
            <summary>
            ReoGrid common mouse event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetMouseEventArgs.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons,System.Int32)">
            <summary>
            Construct mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="relativePosition">mouse relative position to current event owner</param>
            <param name="absolutePosition">mouse absolute position to spreadsheet control</param>
            <param name="buttons">pressed button flags</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.Worksheet">
            <summary>
            Worksheet instance
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.Buttons">
            <summary>
            Pressed mouse buttons
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.RelativePosition">
            <summary>
            Event source associated mouse position
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.CursorPosition">
            <summary>
            Event source associated mouse position
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.AbsolutePosition">
            <summary>
            Event source unassociated mouse position (Position to control)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.Clicks">
            <summary>
            Number of clicks
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.Delta">
            <summary>
            Delta value (only used in mouse wheel event)
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.Capture">
            <summary>
            Get or set whether to capture mouse from current event
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetMouseEventArgs.CursorStyle">
            <summary>
            Get or set the cursor style during mouse over
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellMouseEventArgs">
            <summary>
            ReoGrid cell mouse event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellMouseEventArgs.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cellPosition">cell position</param>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellMouseEventArgs.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons,System.Int32)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cellPosition">cell position</param>
            <param name="relativePosition">relative mouse position (position in cell)</param>
            <param name="absolutePosition">absolute mouse position (position in spreadsheet)</param>
            <param name="buttons">pressed buttons</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellMouseEventArgs.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cell">cell instance</param>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellMouseEventArgs.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons,System.Int32)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cell">cell instance</param>
            <param name="relativePosition">relative mouse position (position in cell)</param>
            <param name="absolutePosition">absolute mouse position (position in spreadsheet)</param>
            <param name="buttons">pressed buttons</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellMouseEventArgs.#ctor(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridCell,unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Graphics.Point,unvell.ReoGrid.Interaction.MouseButtons,System.Int32)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cell">cell instance</param>
            <param name="cellPosition">cell position</param>
            <param name="relativePosition">relative mouse position (position in cell)</param>
            <param name="absolutePosition">absolute mouse position (position in spreadsheet)</param>
            <param name="buttons">pressed buttons</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellMouseEventArgs.Cell">
            <summary>
            Event source instance of cell. Note: this property may be null if cell has no data and style attached. 
            Check this property and create cell instance by CellPosition property.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellMouseEventArgs.CellPosition">
            <summary>
            Zero-based cell position
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetKeyEventArgs">
            <summary>
            Common key event argument
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellKeyDownEventArgs">
            <summary>
            Common key event argument for cells
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellKeyDownEventArgs.Cell">
            <summary>
            Cell of event source
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellKeyDownEventArgs.CellPosition">
            <summary>
            Position of cell of event source
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.BeforeCellKeyDownEventArgs">
            <summary>
            Event raised when user presses any key inside spreadsheet before built-in operations
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeCellKeyDownEventArgs.IsCancelled">
            <summary>
            Determines whether or not should to cancel the following operations of this event.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.AfterCellKeyDownEventArgs">
            <summary>
            Event raised when user presses any key inside spreadsheet after built-in operations
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.RangeEventArgs">
            <summary>
            Event raised on action was performed for range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.RangeEventArgs.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create instance for RangeEventArgs with specified range.
            </summary>
            <param name="range">Range of action performed</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.RangeEventArgs.Range">
            <summary>
            Range of action performed
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellAfterEditEventArgs">
            <summary>
            Event raised after cell editing. Set 'NewData' property to a
            new value to change the data instead of edited value.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellAfterEditEventArgs.#ctor(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create instance for CellAfterEditEventArgs
            </summary>
            <param name="cell">Cell edited by user</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellAfterEditEventArgs.NewData">
            <summary>
            Set the data to new value instead of edited value.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellAfterEditEventArgs.EndReason">
            <summary>
            Reason of edit operation ending. Set this property to restore 
            the data to the value of before editing.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellAfterEditEventArgs.DataFormat">
            <summary>
            When new data has been inputed, ReoGrid choose one formatter to 
            try to format the data. Set this property to force change the 
            formatter for the new data.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellBeforeEditEventArgs">
            <summary>
            Event raised before cell editing. Set 'IsCancelled' property to
            force stop current edit operation.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellBeforeEditEventArgs.#ctor(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create instance for CellBeforeEditEventArgs with specified cell.
            </summary>
            <param name="cell">Cell edited by user</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellBeforeEditEventArgs.IsCancelled">
            <summary>
            Edit operation whether should be aborted.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellBeforeEditEventArgs.EditText">
            <summary>
            Text will display in the input field, this text could be changed.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellBeforeEditEventArgs.CandidateItems">
            <summary>
            Candidate string list. This list will be displayed on popuped
            window that allows user to choose item instead of inputing.
            (Reserved)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellEditTextChangingEventArgs">
            <summary>
            Cell edit text
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CellEditTextChangingEventArgs.#ctor(unvell.ReoGrid.ReoGridCell)">
            <summary>
            Create event argument with specified cell
            </summary>
            <param name="cell">instance of cell</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellEditTextChangingEventArgs.Text">
            <summary>
            Get or set the inputting text. Set new text to replace the text of user inputted.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CellEditCharInputEventArgs">
            <summary>
            Event raised when char was inputted during cell editing, replace the <code>InputChar</code>
            property to alter the input character.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellEditCharInputEventArgs.InputChar">
            <summary>
            Get or set the input character
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellEditCharInputEventArgs.CaretPositionInLine">
            <summary>
            Get position of current editing text
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CellEditCharInputEventArgs.LineIndex">
            <summary>
            Get line index of current editing text
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetRowEventArgs">
            <summary>
            Event raised on action performed on row indexer.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetRowEventArgs.#ctor(System.Int32)">
            <summary>
            Create instance for RowEventArgs with specified row index number.
            </summary>
            <param name="row">Row index number</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetRowEventArgs.Row">
            <summary>
            Row index number
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.RowDeletedEventArgs">
            <summary>
            Event raised when rows deleted from spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.RowDeletedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for RowEventArgs with specified row index number.
            </summary>
            <param name="row">zero-based number of row start to delete</param>
            <param name="count">number of rows to be deleted</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.RowDeletedEventArgs.RowIndex">
            <summary>
            Zero-based number of row start to delete
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.RowDeletedEventArgs.Count">
            <summary>
            Number of rows to be deleted
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.WorksheetColumnsEventArgs">
            <summary>
            Event raised when an action of column header was performed.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.WorksheetColumnsEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instead for ColumnEventArgs with specified column header number.
            </summary>
            <param name="index">Column index number.</param>
            <param name="count">Column count.</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetColumnsEventArgs.Index">
            <summary>
            Zero-based number to insert columns
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.WorksheetColumnsEventArgs.Count">
            <summary>
            Indicates that how many columns has been inserted or appended
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.ColumnsInsertedEventArgs">
            <summary>
            Event raised when new column was inserted into a spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.ColumnsInsertedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create column inserted event argument
            </summary>
            <param name="index">Zero-based number of column start to insert</param>
            <param name="count">Number of columns to be inserted.</param>
        </member>
        <member name="T:unvell.ReoGrid.Events.ColumnDeletedEventArgs">
            <summary>
            Event raised when columns deleted from spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.ColumnDeletedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create column deleted event argument
            </summary>
            <param name="index">number of column start to delete</param>
            <param name="count">number of columns to be deleted</param>
        </member>
        <member name="T:unvell.ReoGrid.Events.BorderAddedEventArgs">
            <summary>
            Event raised on border added to a range.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.BorderAddedEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions,unvell.ReoGrid.RangeBorderStyle)">
            <summary>
            Create instance for BorderAddedEventArgs with specified range, 
            position of border and style of border.
            </summary>
            <param name="range"></param>
            <param name="pos"></param>
            <param name="style"></param>
        </member>
        <member name="P:unvell.ReoGrid.Events.BorderAddedEventArgs.Pos">
            <summary>
            Position of border added.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.BorderAddedEventArgs.Style">
            <summary>
            Style of border added.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.BorderRemovedEventArgs">
            <summary>
            Event raised on border removed from a range.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.BorderRemovedEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.BorderPositions)">
            <summary>
            Create instance for BorderRemovedEventArgs with specified range and
            position of border.
            </summary>
            <param name="range"></param>
            <param name="pos"></param>
        </member>
        <member name="P:unvell.ReoGrid.Events.BorderRemovedEventArgs.Pos">
            <summary>
            Position of border removed
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.FileLoadedEventArgs">
            <summary>
            Event raised on grid loaded from a stream.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.FileLoadedEventArgs.#ctor(System.String)">
            <summary>
            Create instance for FileSavedEventArgs with specified file path.
            </summary>
            <param name="filename">Full path of file</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.FileLoadedEventArgs.Filename">
            <summary>
            Full path of file. Available only grid was loaded from a file stream.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.FileSavedEventArgs">
            <summary>
            Event raised on grid saved to a stream.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.FileSavedEventArgs.#ctor(System.String)">
            <summary>
            Create instance for FileSavedEventArgs with specified file path.
            </summary>
            <param name="filename">Full path of file</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.FileSavedEventArgs.Filename">
            <summary>
            Full path of file. Available only grid be saved into a file stream.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.ExceptionHappenEventArgs">
            <summary>
            Event raised when any exceptions happen during built-in operations of worksheet.
            Such as Range copy/cut/move via built-in hotkeys.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.ExceptionHappenEventArgs.#ctor(unvell.ReoGrid.Worksheet,System.Exception)">
            <summary>
            Create exception instance.
            </summary>
            <param name="sheet">Worksheet instance.</param>
            <param name="exception">Exception instance.</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.ExceptionHappenEventArgs.Exception">
            <summary>
            Get or set the exception instance.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.SelectionMoveForwardEventArgs">
            <summary>
            Event raised when selection will move to another position. 
            ReoGrid automatically move the selection to 'Right' or 'Down' according
            to 'SelectionForwardDirection' property of control. 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.SelectionMoveForwardEventArgs.#ctor">
            <summary>
            Create instance for SelectionMoveForwardEventArgs with specified 
            position.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.SelectionMoveForwardEventArgs.IsCancelled">
            <summary>
            Decide whether to cancel current operation
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs">
            <summary>
            Argument class for event of BeforeSelectionChange
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs.#ctor(unvell.ReoGrid.ReoGridPos,unvell.ReoGrid.ReoGridPos)">
            <summary>
            Create this argument by specified selection start and end position
            </summary>
            <param name="selectionStart">The start position of selection</param>
            <param name="selectionEnd">The end position of selection</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs.SelectionStart">
            <summary>
            Get or set selection start position
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs.SelectionEnd">
            <summary>
            Get or set selection end position
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs.StartRow">
            <summary>
            Get or set the start row of selection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs.StartCol">
            <summary>
            Get or set this start column of selection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs.EndRow">
            <summary>
            Get or set the end row of selection
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeSelectionChangeEventArgs.EndCol">
            <summary>
            Get or set the end column of selection
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.BeforeRangeOperationEventArgs">
            <summary>
            Event raised when operation to be performed to range, this class has
            the property 'IsCancelled' it used to notify grid control to abort
            current operation.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.BeforeRangeOperationEventArgs.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create instance of this class with specified range position
            </summary>
            <param name="range">Target range where performs the operation of this event</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeRangeOperationEventArgs.IsCancelled">
            <summary>
            Get or set the flag that be used to notify the grid 
            whether to abort current operation
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.CopyOrMoveRangeEventArgs">
            <summary>
            Event argument for copying or moving range by dragging mouse
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.CopyOrMoveRangeEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create event argument instance
            </summary>
            <param name="fromRange">Source range</param>
            <param name="toRange">Target range</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.CopyOrMoveRangeEventArgs.FromRange">
            <summary>
            Source range
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.CopyOrMoveRangeEventArgs.ToRange">
            <summary>
            Target range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.BeforeCopyOrMoveRangeEventArgs">
            <summary>
            Event argument before copying or moving range by dragging mouse
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.BeforeCopyOrMoveRangeEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create event argument instance
            </summary>
            <param name="fromRange">Source range</param>
            <param name="toRange">Target range</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.BeforeCopyOrMoveRangeEventArgs.IsCancelled">
            <summary>
            Cancelled flag used to notify control that abort the copy or move operation
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.RangeOperationErrorEventArgs">
            <summary>
            Event raised when any errors happened during range operation
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.RangeOperationErrorEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,System.Exception)">
            <summary>
            Construct instance with specified range
            </summary>
            <param name="range">Target range</param>
            <param name="ex">Additional exception associated to the range</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.RangeOperationErrorEventArgs.Exception">
            <summary>
            The exception if happened during range operation
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.SettingsChangedEventArgs">
            <summary>
            Event raised when control's settings has been changed
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.SettingsChangedEventArgs.AddedSettings">
            <summary>
            The setting flags what have been added
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Events.SettingsChangedEventArgs.RemovedSettings">
            <summary>
            The setting flags what have been removed
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.NamedRangeEventArgs">
            <summary>
            Common named range event argument
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.NamedRangeEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,System.String)">
            <summary>
            Create named range event argument with specified parameters
            </summary>
            <param name="range">range as operation target</param>
            <param name="name">name of range</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.NamedRangeEventArgs.Name">
            <summary>
            Name of range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.NamedRangeAddedEventArgs">
            <summary>
            Event raised when named range has been added into spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.NamedRangeAddedEventArgs.#ctor(unvell.ReoGrid.NamedRange)">
            <summary>
            Create event argument instance with named range instance
            </summary>
            <param name="namedRange">named range instance</param>
        </member>
        <member name="M:unvell.ReoGrid.Events.NamedRangeAddedEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,System.String)">
            <summary>
            Create event argument instance with specified parameters
            </summary>
            <param name="range">spreadsheet range definition</param>
            <param name="name">the name of added range</param>
        </member>
        <member name="P:unvell.ReoGrid.Events.NamedRangeAddedEventArgs.NamedRange">
            <summary>
            Named range instance
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Events.NamedRangeUndefinedEventArgs">
            <summary>
            Event raised when named range has been deleted from spreadsheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Events.NamedRangeUndefinedEventArgs.#ctor(unvell.ReoGrid.ReoGridRange,System.String)">
            <summary>
            Construct event argument with specified parameters
            </summary>
            <param name="range">spreadsheet range definition</param>
            <param name="name">the name of deleted range</param>
        </member>
        <member name="T:unvell.ReoGrid.WorkbookLoadException">
            <summary>
            Exception is thrown when any errors happened during loading spreadsheet from a stream.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorkbookLoadException.#ctor(System.String)">
            <summary>
            Create exception instance
            </summary>
            <param name="msg">Additional message to describe the exception</param>
        </member>
        <member name="M:unvell.ReoGrid.WorkbookLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception instance
            </summary>
            <param name="msg">Addtional message to describe the exception</param>
            <param name="ex">Addtional original exception</param>
        </member>
        <member name="T:unvell.ReoGrid.WorkbookException">
            <summary>
            Common workbook exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorkbookException.#ctor(System.String)">
            <summary>
            Create common workbook exception with specified message
            </summary>
            <param name="msg">message to describe this exception</param>
        </member>
        <member name="M:unvell.ReoGrid.WorkbookException.#ctor(System.String,System.Exception)">
            <summary>
            Create common workbook exception with specified message
            </summary>
            <param name="msg">message to describe this exception</param>
            <param name="ex">inner exception</param>
        </member>
        <member name="T:unvell.ReoGrid.WorksheetException">
            <summary>
            Common worksheet exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetException.#ctor(System.String)">
            <summary>
            Create this exception with specified message
            </summary>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetException.#ctor(unvell.ReoGrid.Worksheet,System.String)">
            <summary>
            Create this exception with specified worksheet and message
            </summary>
            <param name="Worksheet">worksheet where exception happened</param>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="P:unvell.ReoGrid.WorksheetException.Worksheet">
            <summary>
            worksheet of exception
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.FreezeUnsupportedException">
            <summary>
            Exception is thrown when current viewport controller does not support the freeze functionality.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.InvalidAddressException">
            <summary>
            Excepiton is thrown when an address is passed into a method which is described in the incorrect format, 
            or the address is out of valid range of spreadsheet.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.InvalidReferenceException">
            <summary>
            Exception is thrown when an reference as string neither is an valid address nor a registered name to locate a range.
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReferenceObjectNotAssociatedException">
            <summary>
            Exception will be thrown when a reference object lost its owner object.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceObjectNotAssociatedException.#ctor(System.String)">
            <summary>
            Construct this exception with specified message
            </summary>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="T:unvell.ReoGrid.InvalidWorksheetNameException">
            <summary>
            Exception thrown when an invalid name specified for worksheet
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.InvalidWorksheetNameException.#ctor(unvell.ReoGrid.Worksheet,System.String)">
            <summary>
            Create this exception with specified worksheet and message
            </summary>
            <param name="worksheet">worksheet where exception happened</param>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="T:unvell.ReoGrid.WorksheetNotFoundException">
            <summary>
            Exception caused when specified worksheet cannot be found
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.WorksheetNotFoundException.#ctor(System.String)">
            <summary>
            Create exception with additional message.
            </summary>
            <param name="msg">Additional message to describe this exception.</param>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridCellException">
            <summary>
            Cell operations exception 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridCellException.#ctor(unvell.ReoGrid.ReoGridPos)">
            <summary>
            Create cell operations exception with specified cell position information
            </summary>
            <param name="pos">cell position information</param>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridCellException.Pos">
            <summary>
            Position of the cell where the exception happens
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.RangeException">
            <summary>
            Common range exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.RangeException.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create this exception by given range that is caused this exception happen
            </summary>
            <param name="range">Target range</param>
        </member>
        <member name="M:unvell.ReoGrid.RangeException.#ctor(System.String,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create this exception by given range and additional message
            </summary>
            <param name="msg">Additional message used to describe this exception</param>
            <param name="range">The range is caused this exception happen</param>
        </member>
        <member name="P:unvell.ReoGrid.RangeException.Range">
            <summary>
            Get or set the range that is caused this exception
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.RangeIntersectionException">
            <summary>
            The range to be processed intersected with another merged cell will
            cause this exception happen. Often caused when attempt to merged/move/change
            a range that contains any cells belonging to some merged cell.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.RangeIntersectionException.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create instance of this exception with given range
            </summary>
            <param name="range">Intersected another range</param>
        </member>
        <member name="T:unvell.ReoGrid.InvalidRangeException">
            <summary>
            Event thrown when range is invalid to do specified operations
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.InvalidRangeException.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create instance of this exception with given range
            </summary>
            <param name="range">Target range to do specified operations</param>
        </member>
        <member name="T:unvell.ReoGrid.RangeTooSmallException">
            <summary>
            Event thrown when range is too small to do specified operations
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.RangeTooSmallException.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create instance of this exception with given range
            </summary>
            <param name="range">Target range to do specified operations</param>
        </member>
        <member name="T:unvell.ReoGrid.ReferenceRangeNotAssociatedException">
            <summary>
            This exception will be thrown when a reference range lost its reference 
            to the instance of grid control.
            
            ReferenceRange should be always created from grid control.
            If the grid control it associated has been disposed, the ReferenceRanges 
            should be also disposed and created again from the grid.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReferenceRangeNotAssociatedException.#ctor(unvell.ReoGrid.ReoGridRange)">
            <summary>
            Create exception instance with specified worksheet range.
            </summary>
            <param name="range">Range information.</param>
        </member>
        <member name="T:unvell.ReoGrid.NamedRangeNotFoundException">
            <summary>
            Event thrown when attempt to reference a non-existed named range
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeNotFoundException.#ctor(System.String)">
            <summary>
            Create instance of this exception with additional message
            </summary>
            <param name="msg">Additional message used to describe this exception</param>
        </member>
        <member name="P:unvell.ReoGrid.NamedRangeNotFoundException.Name">
            <summary>
            Get or set the name of range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.NamedRangeAlreadyDefinedException">
            <summary>
            Event thrown when attempt to define a named range with existed name 
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeAlreadyDefinedException.#ctor">
            <summary>
            Create instance of this exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NamedRangeAlreadyDefinedException.#ctor(System.String)">
            <summary>
            Create instance of this exception with additional message
            </summary>
            <param name="name">Name for range</param>
        </member>
        <member name="T:unvell.ReoGrid.InvalidNamedRangeException">
            <summary>
            Event thrown when attempt to define named range with an invalid name
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.InvalidNamedRangeException.#ctor(System.String)">
            <summary>
            Create this exception with given invalid name
            </summary>
            <param name="name">The name used to define named range</param>
        </member>
        <member name="P:unvell.ReoGrid.InvalidNamedRangeException.Name">
            <summary>
            Get or set the name of range
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.CircularReferenceException">
            <summary>
            This exception caused when a formula has a reference that causes a circular reference problem
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.CircularReferenceException.#ctor">
            <summary>
            Create the instance of this exception
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.OutlineException">
            <summary>
            Exception raised when any exception happen during outline operations
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.OutlineException.#ctor(System.String)">
            <summary>
            Create the instance of exception by additional message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
        </member>
        <member name="P:unvell.ReoGrid.OutlineException.Start">
            <summary>
            Zero-based start position of row or column in the outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.OutlineException.Count">
            <summary>
            Number of rows or columns in the outline
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.OutlineException.End">
            <summary>
            Zero-based end position of row or column in the outline
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.OutlineIntersectedException">
            <summary>
            Exception thrown when attempt to create an outline that is intersected with other existed outlines. 
            The outlines cannot be intersected each other, they can only be either contained by each other, 
            or be added at different positions.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.OutlineIntersectedException.#ctor">
            <summary>
            Create the instance of exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.OutlineAlreadyDefinedException.#ctor">
            <summary>
            Create the instance of exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.OutlineNotFoundException.#ctor(System.Int32,System.String)">
            <summary>
            Create the instance of exception
            </summary>
            <param name="start"></param>
            <param name="msg"></param>
        </member>
        <member name="T:unvell.ReoGrid.OutlineTooMuchException">
            <summary>
            This exception is thrown when there is already maximum available outlines added into
            grid control. ReoGrid supports maximum 9 outlines in either row or column direction.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.OutlineTooMuchException.#ctor">
            <summary>
            Create the instance of exception
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.CellDataReadonlyException">
            <summary>
            Exception will be thrown when attempt modify the data of cell which is set to readonly
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.CellDataReadonlyException.CellPos">
            <summary>
            Cell position (zero-based number of row and column)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.CannotCreateCellBodyException">
            <summary>
            Exception will be thrown when the cell body cannot be created for a cell automatically
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridPrintException">
            <summary>
            Common print exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPrintException.#ctor(System.String)">
            <summary>
            Create common print exception with specified message
            </summary>
            <param name="msg">message of exception</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridPrintException.#ctor(System.String,System.Exception)">
            <summary>
            Create common print exception with specified message and previous exception
            </summary>
            <param name="msg">message of exception</param>
            <param name="innerEx">previous or inner exception</param>
        </member>
        <member name="T:unvell.ReoGrid.NoPrintableContentException">
            <summary>
            Exception cause when print command received, but there is no valid content
            to be printed out from the spreadsheet. Check whether the PrintRange set to
            a region where not contain any valid cells if this exception happened.
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NoPrintableContentException.#ctor">
            <summary>
            Create no printable content exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.NoPrintableContentException.#ctor(System.String)">
            <summary>
            Create no printable cotent exception with a message
            </summary>
            <param name="msg">message of exception</param>
        </member>
        <member name="T:unvell.ReoGrid.PageBreakNotFoundException">
            <summary>
            Exception cause when specified page break cannot be found
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.PageBreakNotFoundException.#ctor(System.Int32)">
            <summary>
            Create excpetion with specified number of page break
            </summary>
            <param name="index">zero-based number of page break that cannot be found</param>
        </member>
        <member name="M:unvell.ReoGrid.PageBreakNotFoundException.#ctor(System.String,System.Int32)">
            <summary>
            Create exception with specified message and target index
            </summary>
            <param name="msg">message of exception</param>
            <param name="index">zero-based number of page break that cannot be found</param>
        </member>
        <member name="P:unvell.ReoGrid.PageBreakNotFoundException.Index">
            <summary>
            Zero-based number of index to find specified page break
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.PageBreakCannotRemoveException">
            <summary>
            Exception for page-break index cannot be removed
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.PageBreakCannotRemoveException.#ctor(System.Int32)">
            <summary>
            Create exception instance
            </summary>
            <param name="index">Number of page-break index</param>
        </member>
        <member name="M:unvell.ReoGrid.PageBreakCannotRemoveException.#ctor(System.String,System.Int32)">
            <summary>
            Create exception instance
            </summary>
            <param name="msg">Addtional message to describe the message</param>
            <param name="index">Page-break index to be removed</param>
        </member>
        <member name="P:unvell.ReoGrid.PageBreakCannotRemoveException.Index">
            <summary>
            Get or set page-break index
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridIOException">
            <summary>
            ReoGrid common I/O exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridIOException.#ctor(System.String)">
            <summary>
            Create exception instance by specified message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridIOException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception instance by specified message and original exception object
            </summary>
            <param name="msg">Additional message to describe this exception</param>
            <param name="innerEx">Original exception happened inside loading process</param>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridLoadException">
            <summary>
            Loading exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridLoadException.#ctor(System.String)">
            <summary>
            Create this exception with specified message
            </summary>
            <param name="msg">Addtional message to describe the exception</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Create this exception with specified message
            </summary>
            <param name="msg">Addtional message to describe the exception</param>
            <param name="innerEx">Inner exception where original exception happened</param>
        </member>
        <member name="T:unvell.ReoGrid.FileFormatNotSupportException">
            <summary>
            File format not supported exception
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.FileFormatNotSupportException.#ctor">
            <summary>
            Create exception instance
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.FileFormatNotSupportException.#ctor(System.String)">
            <summary>
            Create exception instance by specified message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
        </member>
        <member name="M:unvell.ReoGrid.FileFormatNotSupportException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception instance by specified message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
            <param name="innerEx">Inner exception where original exception happened</param>
        </member>
        <member name="T:unvell.ReoGrid.IO.FileFormat">
            <summary>
            File format flag
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.IO.FileFormat.ReoGridFormat">
            <summary>
            ReoGrid Format
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.IO.FileFormat.CSV">
            <summary>
            CSV plain-text format
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.IO.FileFormat.Excel2007">
            <summary>
            Excel 2007 (Office OpenXML-based format)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.IO.FileFormat._Auto">
            <summary>
            Decide file format by extension automatically
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.IO.FileFormat._Custom">
            <summary>
            User-defined file format provider (v0.8.8 Reserved)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.IO.ReoGridFileFormatProvider">
            <summary>
            Represents the file format provider for saving and loading workbook and worksheets
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.IO.ReoGridFileFormatProvider.IsValidFormat(System.String)">
            <summary>
            Check whether or not the file is valid format of this provider
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.IO.ReoGridFileFormatProvider.Load(unvell.ReoGrid.IWorkbook,System.IO.Stream,System.Text.Encoding,System.Object)">
            <summary>
            Load workbook from specified input stream
            </summary>
            <param name="workbook">Workbook to be loaded</param>
            <param name="stream">Input stream</param>
            <param name="encoding">Encoding used to read text-based stream, such as XML</param>
            <param name="arg">Provider custom parameters</param>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Has(unvell.ReoGrid.PlainStyleFlag,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Check whether the style flags contains the specified flags
            </summary>
            <param name="flag">flags container to be checked from</param>
            <param name="target">target flags to be checked to</param>
            <returns>true if style flags contains the specified flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.HasAny(unvell.ReoGrid.PlainStyleFlag,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Check whether the style flags contains the any one of specified flags
            </summary>
            <param name="flag">flags container to be checked from</param>
            <param name="target">target flags to be checked to</param>
            <returns>true if style flags contains the any one of specified flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Set(unvell.ReoGrid.PlainStyleFlag,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Set style flags
            </summary>
            <param name="flag">flags container to save the value after set</param>
            <param name="target">target flags to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Unset(unvell.ReoGrid.PlainStyleFlag,unvell.ReoGrid.PlainStyleFlag)">
            <summary>
            Remove flags from style flags
            </summary>
            <param name="flag">flags container to be removed from</param>
            <param name="target">target flags to be removed</param>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Has(unvell.ReoGrid.BorderPositions,unvell.ReoGrid.BorderPositions)">
            <summary>
            Check whether specified border position contains another position
            </summary>
            <param name="pos">border position container to be checked from</param>
            <param name="target">target border position to be checked</param>
            <returns>true if border position flags contains the specified flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.HasAny(unvell.ReoGrid.BorderPositions,unvell.ReoGrid.BorderPositions)">
            <summary>
            Check whether the border position contains any one of specified positions
            </summary>
            <param name="pos">border position container to be checked from</param>
            <param name="target">target border position to be checked</param>
            <returns>true if border position flags contains the specified flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Has(unvell.ReoGrid.WorksheetSettings,unvell.ReoGrid.WorksheetSettings)">
            <summary>
            Check whether the settings flags contains specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains specified setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.HasAny(unvell.ReoGrid.WorksheetSettings,unvell.ReoGrid.WorksheetSettings)">
            <summary>
            Check whether the settings flags contains any one of specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains any one of setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Add(unvell.ReoGrid.WorksheetSettings,unvell.ReoGrid.WorksheetSettings)">
            <summary>
            Set setting flags
            </summary>
            <param name="settings">setting flags used to save the specified flags</param>
            <param name="target">target flags to be set</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Remove(unvell.ReoGrid.WorksheetSettings,unvell.ReoGrid.WorksheetSettings)">
            <summary>
            Remove setting flags
            </summary>
            <param name="settings">setting flags used to remove the specified flags</param>
            <param name="target">target flags to be removed</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Has(unvell.ReoGrid.WorkbookSettings,unvell.ReoGrid.WorkbookSettings)">
            <summary>
            Check whether the settings flags contains specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains specified setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.HasAny(unvell.ReoGrid.WorkbookSettings,unvell.ReoGrid.WorkbookSettings)">
            <summary>
            Check whether the settings flags contains any one of specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains any one of setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Add(unvell.ReoGrid.WorkbookSettings,unvell.ReoGrid.WorkbookSettings)">
            <summary>
            Set setting flags
            </summary>
            <param name="settings">setting flags used to save the specified flags</param>
            <param name="target">target flags to be set</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.Remove(unvell.ReoGrid.WorkbookSettings,unvell.ReoGrid.WorkbookSettings)">
            <summary>
            Remove setting flags
            </summary>
            <param name="settings">setting flags used to remove the specified flags</param>
            <param name="target">target flags to be removed</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:unvell.ReoGrid.GenericExtends.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Comparing 2 Generic Dictionary Instances
            quoted from LukeH
            http://stackoverflow.com/questions/3928822/comparing-2-dictionarystring-string-instances
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.IO.RGHTMLExporter.Export(System.IO.Stream,unvell.ReoGrid.Worksheet,System.String,System.Boolean)">
            <summary>
            Export grid as html5 into specified stream
            </summary>
            <param name="s">Stream contains the exported HTML5 content</param>
            <param name="sheet">Instance of worksheet</param>
            <param name="pageTitle">Custom page title of HTML page</param>
            <param name="htmlHeader">True to export default HTML header tag; false to export table content only</param>
        </member>
        <member name="M:unvell.ReoGrid.IO.RGHTMLExporter.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
            <remarks>
            http://weblog.west-wind.com/posts/2009/Feb/05/Html-and-Uri-String-Encoding-without-SystemWeb
            </remarks>
            <param name="text">The text string to encode.</param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="P:unvell.ReoGrid.WPF.SheetTabControl.AllowDragToMove">
            <summary>
            Determine whether or not allow to move tab by dragging mouse
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Rendering.BorderPainter">
            <summary>
            Draw borders at the specified location
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Rendering.BorderPainter.DrawLine(System.Windows.Media.DrawingContext,System.Double,System.Double,System.Double,System.Double,unvell.ReoGrid.RangeBorderStyle)">
            <summary>
            Draw border at specified location
            </summary>
            <param name="g">instance for graphics object</param>
            <param name="x">x coordinate of start point</param>
            <param name="y">y coordinate of start point</param>
            <param name="x2">x coordinate of end point</param>
            <param name="y2">y coordinate of end point</param>
            <param name="style">style instance of border</param>
        </member>
        <member name="M:unvell.ReoGrid.Rendering.BorderPainter.DrawLine(System.Windows.Media.DrawingContext,System.Double,System.Double,System.Double,System.Double,unvell.ReoGrid.BorderLineStyle,System.Windows.Media.Color)">
            <summary>
            Draw border at specified location
            </summary>
            <param name="g">instance for graphics object</param>
            <param name="x">x coordinate of start point</param>
            <param name="y">y coordinate of start point</param>
            <param name="x2">x coordinate of end point</param>
            <param name="y2">y coordinate of end point</param>
            <param name="style">style flag of border</param>
            <param name="color">color of border</param>
        </member>
        <member name="M:unvell.ReoGrid.Rendering.BorderPainter.DrawLine(System.Windows.Media.DrawingContext,System.Double,System.Double,System.Double,System.Double,unvell.ReoGrid.BorderLineStyle,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Draw border at specified location
            </summary>
            <param name="g">instance for graphics object</param>
            <param name="x">x coordinate of start point</param>
            <param name="y">y coordinate of start point</param>
            <param name="x2">x coordinate of end point</param>
            <param name="y2">y coordinate of end point</param>
            <param name="style">style flag of border</param>
            <param name="color">color of border</param>
            <param name="bgColor">fill color used inner double outline</param>
        </member>
        <member name="M:unvell.ReoGrid.Rendering.BorderPainter.Dispose">
            <summary>
            Release all GDI objects
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Rendering.BorderPainter.Instance">
            <summary>
            Get BorderPainter instance
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Rendering.DrawMode">
            <summary>
            Drawing Mode for render grid control
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Rendering.DrawMode.View">
            <summary>
            View on screen
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Rendering.DrawMode.Preview">
            <summary>
            Print preview 
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Rendering.DrawMode.Print">
            <summary>
            Print
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Rendering.DrawingContext">
            <summary>
            Represents the platform no-associated drawing context.
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Rendering.DrawingContext.Worksheet">
            <summary>
            Instance of grid control
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Rendering.DrawingContext.Graphics">
            <summary>
            Get abstract platform-nonassociated graphics interface
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Rendering.DrawingContext.DrawMode">
            <summary>
            Draw mode to decide what kind of content will be drawn during this drawing event
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Rendering.CellDrawingContext">
            <summary>
            Drawing context for render grid control
            </summary>
            
        </member>
        <member name="M:unvell.ReoGrid.Rendering.CellDrawingContext.DrawCellText">
            <summary>
            Recall core renderer to draw cell text
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Rendering.CellDrawingContext.DrawCellBackground">
            <summary>
            Recall core renderer to draw cell background
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.Rendering.CellDrawingContext.Cell">
            <summary>
            Cell instance if enter a cell drawing event
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Views.RGCursor">
            <summary>
            Mouse cursor style 
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.PlatformDefault">
            <summary>
            Default (Auto)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.Hand">
            <summary>
            Hand
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.Selection">
            <summary>
            Range Selection
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.FullRowSelect">
            <summary>
            Full Row Selector
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.FullColumnSelect">
            <summary>
            Full Column Selector
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.EntireSheet">
            <summary>
            Entire worksheet Selector
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.Move">
            <summary>
            Move object
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.Copy">
            <summary>
            Copy object
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.ChangeColumnWidth">
            <summary>
            Change Column Width
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.ChangeRowHeight">
            <summary>
            Change Row Height
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.ResizeHorizontal">
            <summary>
            Horizontal Resize
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.ResizeVertical">
            <summary>
            Vertical Resize
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.Busy">
            <summary>
            Busy (Waiting)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.Views.RGCursor.Cross">
            <summary>
            Cross Cursor
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.LanguageResource">
            <summary>
            Static language resources
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Filter_SortAtoZ">
            <summary>
            Text displayed on column filter (Sort A to Z)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Filter_SortZtoA">
            <summary>
            Text displayed on column filter (Sort Z to A)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Filter_SelectAll">
            <summary>
            Text displayed on column filter (Select All)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Menu_InsertSheet">
            <summary>
            Text displayed on sheet tab control (Insert)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Menu_DeleteSheet">
            <summary>
            Text displayed on sheet tab control (Delete)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Menu_RenameSheet">
            <summary>
            Text displayed on sheet tab control (Rename...)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Sheet_RenameDialog_Title">
            <summary>
            Text displayed on sheet renaming dialog (Rename sheet)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Sheet_RenameDialog_NameLabel">
            <summary>
            Label text displayed on sheet renaming dialog (Name: )
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Button_OK">
            <summary>
            Common text displayed as label of OK button (OK)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Button_Cancel">
            <summary>
            Common text displayed as label of Cancel button (Cancel)
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.LanguageResource.Sheet">
            <summary>
            Text of word sheet (Sheet)
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridControlColors">
            <summary>
            Key of control appearance item
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridControlStyle">
            <summary>
            ReoGrid Control Appearance Colors
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControlStyle.GetColor(unvell.ReoGrid.ReoGridControlColors,unvell.ReoGrid.Graphics.SolidColor@)">
            <summary>
            Get color for appearance item
            </summary>
            <param name="colorKey">key to get the color item</param>
            <param name="color">output color get by specified key</param>
            <returns>true if color is found by specified key</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControlStyle.SetColor(unvell.ReoGrid.ReoGridControlColors,unvell.ReoGrid.Graphics.SolidColor)">
            <summary>
            Set color for appearance item
            </summary>
            <param name="colorKey">Key of appearance item</param>
            <param name="color">Color to be set</param>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControlStyle.TryGetColor(unvell.ReoGrid.ReoGridControlColors,unvell.ReoGrid.Graphics.SolidColor@)">
            <summary>
            Try get a color item from control appearance style set
            </summary>
            <param name="key">Key used to specify a item</param>
            <param name="color">Output color struction</param>
            <returns>True if key was found and color could be returned; otherwise return false</returns>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControlStyle.#ctor">
            <summary>
            Construct empty control appearance
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.ReoGridControlStyle.#ctor(unvell.ReoGrid.Graphics.SolidColor,unvell.ReoGrid.Graphics.SolidColor,System.Boolean)">
            <summary>
            Construct control appearance with two theme colors
            </summary>
            <param name="mainTheme">Main theme color</param>
            <param name="salientTheme">Salient theme color</param>
            <param name="useSystemHighlight">Whether use highlight colors of system default</param>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControlStyle.Item(unvell.ReoGrid.ReoGridControlColors)">
            <summary>
            Get or set color for appearance items
            </summary>
            <param name="colorKey"></param>
            <returns></returns>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControlStyle.SelectionBorderWidth">
            <summary>
            Get or set selection border weight
            </summary>
        </member>
        <member name="P:unvell.ReoGrid.ReoGridControlStyle.DefaultControlStyle">
            <summary>
            Create default style for grid control.
            </summary>
            <returns>Default style created</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.GetAlphaChar(System.Int64)">
            <summary>
            Get alphabet of number (eg. A is 1 and 30 is AD)
            </summary>
            <param name="a">number to be converted</param>
            <returns>alphabet of number</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.GetNumberOfChar(System.String)">
            <summary>
            Get number of alphabet from string (eg. A is 1 and AD is 30)
            </summary>
            <param name="address">alphabet to be converted</param>
            <returns>number of alphabet</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.IsValidAddress(System.String)">
            <summary>
            Check whether specified string is an valid address to locate cell or range 
            </summary>
            <param name="address">address for cell or range</param>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.IsValidName(System.String)">
            <summary>
            Chck whether specified string is valid name to define a range
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.ParseTabbedString(System.String)">
            <summary>
            Parse tabbed string into regular array
            </summary>
            <param name="str">string to be parsed</param>
            <returns>parsed regular array</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="absNum">Determine that which R1C1 format should be used.<br/>
            <ul>
            <li>1: [Absolute Row][Absolute Col] R1C1</li>
            <li>2: [Absolute Row][Relative Col] R1C[1]</li>
            <li>3: [Relative Row][Absolute Col] R[1]C1</li>
            <li>4: [Relative Row][Relative Col] R[1]C[1]</li>
            </ul>
            </param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.ToAddress(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="absNum">Determine that which R1C1 format should be used.<br/>
            <ul>
            <li>1: [Absolute Row][Absolute Col] R1C1</li>
            <li>2: [Absolute Row][Relative Col] R1C[1]</li>
            <li>3: [Relative Row][Absolute Col] R[1]C1</li>
            <li>4: [Relative Row][Relative Col] R[1]C[1]</li>
            </ul>
            </param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="rows">Zero-based number of rows</param>
            <param name="cols">Zero-based number of columns</param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address stringConvert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="rows">Zero-based number of rows</param>
            <param name="cols">Zero-based number of columns</param>
            <param name="absNum">Determine that which R1C1 format should be used.<br/>
            <ul>
            <li>1: [Absolute Row][Absolute Col] R1C1</li>
            <li>2: [Absolute Row][Relative Col] R1C[1]</li>
            <li>3: [Relative Row][Absolute Col] R[1]C1</li>
            <li>4: [Relative Row][Relative Col] R[1]C[1]</li>
            </ul>
            </param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:unvell.ReoGrid.RGUtility.ToSingleAddressIfPossible(unvell.ReoGrid.Worksheet,unvell.ReoGrid.ReoGridRange)">
            <summary>
            Convert range address into cell address style if the range is a merged cell (A1:A1 => A1)
            </summary>
            <param name="sheet">Worksheet instance used to check whther or not the range is a merged cell</param>
            <param name="range">Range to be converted</param>
            <returns>Single cell address if convert is successful; otherwise return the range address</returns>
        </member>
        <member name="T:unvell.ReoGrid.ReoGridSettings">
            <summary>
            Obsoleted control settings, changed to WorkbookSettings and WorksheetSettings
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.WorkbookSettings">
            <summary>
            Workbook Control Settings
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.Default">
            <summary>
            Default Settings
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.Behaivor_Default">
            <summary>
            Default behaivor settings
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.View_Default">
            <summary>
            Default View Settings 
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.View_ShowSheetTabControl">
            <summary>
            Determine whether or not to show sheet tab control
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.View_ShowScrolls">
            <summary>
            Determine whether or not to show horizontal and vertical scroll bars
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.View_ShowHorScroll">
            <summary>
            Determine whether or not to show horizontal scroll bar
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.View_ShowVerScroll">
            <summary>
            Determine whether or not to show vertical scroll bar
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.Script_Default">
            <summary>
            Default settings of script
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.Script_AutoRunOnload">
            <summary>
            Whether to run script if grid loaded from file which contains script
            </summary>
        </member>
        <member name="F:unvell.ReoGrid.WorkbookSettings.Script_PromptBeforeAutoRun">
            <summary>
            Confirm to user that whether allowed to run script if the script is loaded from a file
            </summary>
        </member>
        <member name="M:unvell.ReoGrid.Views.GridRegion.ToRange">
            <summary>
            Convert into range struct
            </summary>
            <returns></returns>
        </member>
        <member name="T:unvell.ReoGrid.Utility.ZipArchive">
            <summary>
            Original Document: http://www.codeproject.com/Articles/209731/Csharp-use-Zip-archives-without-external-libraries
            </summary>
        </member>
        <member name="T:unvell.ReoGrid.Utility.ZipStreamHelper">
            <summary>
            Helper class for compress and decompress zip stream
            </summary>
            <remarks>Provided by Rick Meyer</remarks>
        </member>
        <member name="M:unvell.ReoGrid.Utility.ZipStreamHelper.Decompress(System.Byte[])">
            <summary>
            Decompress a byte array
            </summary>
            <param name="zippedData">Compressed Byte Array</param>
            <returns>Decompressed Byte Array</returns>
        </member>
        <member name="M:unvell.ReoGrid.Utility.ZipStreamHelper.Compress(System.Byte[])">
            <summary>
            Compress a byte Array using Gzip
            </summary>
            <param name="plainData">The byte array to compress</param>
            <returns>Returns a compressed byte array</returns>
        </member>
    </members>
</doc>
